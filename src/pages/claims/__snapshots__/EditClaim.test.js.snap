// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Claims Edit component snapshot testing should match component with empty data 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <EditClaim
    data={Object {}}
  >
    <ClaimForm
      data={null}
      onCreate={[Function]}
    >
      <div>
        <Steps
          current={0}
          onChange={[Function]}
        >
          <Steps
            className=""
            current={0}
            direction="horizontal"
            iconPrefix="ant"
            icons={
              Object {
                "error": <ForwardRef(CloseOutlined)
                  className="ant-steps-error-icon"
                />,
                "finish": <ForwardRef(CheckOutlined)
                  className="ant-steps-finish-icon"
                />,
              }
            }
            initial={0}
            labelPlacement="horizontal"
            onChange={[Function]}
            prefixCls="ant-steps"
            progressDot={false}
            size=""
            status="process"
            stepIcon={[Function]}
            type="default"
          >
            <div
              className="ant-steps ant-steps-horizontal ant-steps-label-horizontal"
              style={Object {}}
            >
              <Step
                active={true}
                iconPrefix="ant"
                icons={
                  Object {
                    "error": <ForwardRef(CloseOutlined)
                      className="ant-steps-error-icon"
                    />,
                    "finish": <ForwardRef(CheckOutlined)
                      className="ant-steps-finish-icon"
                    />,
                  }
                }
                key="0"
                onStepClick={[Function]}
                prefixCls="ant-steps"
                progressDot={false}
                status="process"
                stepIcon={[Function]}
                stepIndex={0}
                stepNumber="1"
                title="Basic"
                wrapperStyle={Object {}}
              >
                <div
                  className="ant-steps-item ant-steps-item-process ant-steps-item-active"
                  style={Object {}}
                >
                  <div
                    className="ant-steps-item-container"
                    onClick={[Function]}
                    role="button"
                    tabIndex={0}
                  >
                    <div
                      className="ant-steps-item-tail"
                    />
                    <div
                      className="ant-steps-item-icon"
                    >
                      <span
                        className="ant-steps-icon"
                      >
                        1
                      </span>
                    </div>
                    <div
                      className="ant-steps-item-content"
                    >
                      <div
                        className="ant-steps-item-title"
                      >
                        Basic
                      </div>
                    </div>
                  </div>
                </div>
              </Step>
              <Step
                active={false}
                iconPrefix="ant"
                icons={
                  Object {
                    "error": <ForwardRef(CloseOutlined)
                      className="ant-steps-error-icon"
                    />,
                    "finish": <ForwardRef(CheckOutlined)
                      className="ant-steps-finish-icon"
                    />,
                  }
                }
                key="1"
                onStepClick={[Function]}
                prefixCls="ant-steps"
                progressDot={false}
                status="wait"
                stepIcon={[Function]}
                stepIndex={1}
                stepNumber="2"
                title="Media"
                wrapperStyle={Object {}}
              >
                <div
                  className="ant-steps-item ant-steps-item-wait"
                  style={Object {}}
                >
                  <div
                    className="ant-steps-item-container"
                    onClick={[Function]}
                    role="button"
                    tabIndex={0}
                  >
                    <div
                      className="ant-steps-item-tail"
                    />
                    <div
                      className="ant-steps-item-icon"
                    >
                      <span
                        className="ant-steps-icon"
                      >
                        2
                      </span>
                    </div>
                    <div
                      className="ant-steps-item-content"
                    >
                      <div
                        className="ant-steps-item-title"
                      >
                        Media
                      </div>
                    </div>
                  </div>
                </div>
              </Step>
            </div>
          </Steps>
        </Steps>
        <ForwardRef(InternalForm)
          form={
            Object {
              "__INTERNAL__": Object {
                "itemRef": [Function],
                "name": "create-claim",
              },
              "getFieldError": [Function],
              "getFieldInstance": [Function],
              "getFieldValue": [Function],
              "getFieldsError": [Function],
              "getFieldsValue": [Function],
              "getInternalHooks": [Function],
              "isFieldTouched": [Function],
              "isFieldValidating": [Function],
              "isFieldsTouched": [Function],
              "isFieldsValidating": [Function],
              "resetFields": [Function],
              "scrollToField": [Function],
              "setFields": [Function],
              "setFieldsValue": [Function],
              "submit": [Function],
              "validateFields": [Function],
            }
          }
          initialValues={null}
          labelCol={
            Object {
              "span": 8,
            }
          }
          layout="vertical"
          name="create-claim"
          onFinish={[Function]}
          style={
            Object {
              "paddingTop": "24px",
            }
          }
          wrapperCol={
            Object {
              "span": 16,
            }
          }
        >
          <SizeContextProvider>
            <ForwardRef(Form)
              className="ant-form ant-form-vertical"
              form={
                Object {
                  "__INTERNAL__": Object {
                    "itemRef": [Function],
                    "name": "create-claim",
                  },
                  "getFieldError": [Function],
                  "getFieldInstance": [Function],
                  "getFieldValue": [Function],
                  "getFieldsError": [Function],
                  "getFieldsValue": [Function],
                  "getInternalHooks": [Function],
                  "isFieldTouched": [Function],
                  "isFieldValidating": [Function],
                  "isFieldsTouched": [Function],
                  "isFieldsValidating": [Function],
                  "resetFields": [Function],
                  "scrollToField": [Function],
                  "setFields": [Function],
                  "setFieldsValue": [Function],
                  "submit": [Function],
                  "validateFields": [Function],
                }
              }
              id="create-claim"
              initialValues={null}
              name="create-claim"
              onFinish={[Function]}
              onFinishFailed={[Function]}
              style={
                Object {
                  "paddingTop": "24px",
                }
              }
            >
              <form
                className="ant-form ant-form-vertical"
                id="create-claim"
                onSubmit={[Function]}
                style={
                  Object {
                    "paddingTop": "24px",
                  }
                }
              >
                <div
                  style={
                    Object {
                      "display": "block",
                    }
                  }
                >
                  <FormItem
                    label="Title"
                    name="title"
                    rules={
                      Array [
                        Object {
                          "message": "Please input the title!",
                          "required": true,
                        },
                      ]
                    }
                  >
                    <WrapperField
                      label="Title"
                      messageVariables={
                        Object {
                          "label": "Title",
                        }
                      }
                      name="title"
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please input the title!",
                            "required": true,
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        key="_title"
                        label="Title"
                        messageVariables={
                          Object {
                            "label": "Title",
                          }
                        }
                        name={
                          Array [
                            "title",
                          ]
                        }
                        onReset={[Function]}
                        rules={
                          Array [
                            Object {
                              "message": "Please input the title!",
                              "required": true,
                            },
                          ]
                        }
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="create-claim_title"
                              label="Title"
                              name="title"
                              prefixCls="ant-form"
                              required={true}
                              rules={
                                Array [
                                  Object {
                                    "message": "Please input the title!",
                                    "required": true,
                                  },
                                ]
                              }
                            >
                              <Col
                                className="ant-form-item-label"
                                span={8}
                              >
                                <div
                                  className="ant-col ant-col-8 ant-form-item-label"
                                  style={Object {}}
                                >
                                  <label
                                    className="ant-form-item-required"
                                    htmlFor="create-claim_title"
                                    title="Title"
                                  >
                                    Title
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Title"
                              name={
                                Array [
                                  "title",
                                ]
                              }
                              onDomErrorVisibleChange={[Function]}
                              prefixCls="ant-form"
                              rules={
                                Array [
                                  Object {
                                    "message": "Please input the title!",
                                    "required": true,
                                  },
                                ]
                              }
                              touched={false}
                              validateStatus=""
                              validating={false}
                            >
                              <Col
                                className="ant-form-item-control"
                                span={16}
                              >
                                <div
                                  className="ant-col ant-col-16 ant-form-item-control"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={1}
                                      >
                                        <Input
                                          id="create-claim_title"
                                          onChange={[Function]}
                                          placeholder="title"
                                          type="text"
                                        >
                                          <ClearableLabeledInput
                                            bordered={true}
                                            element={
                                              <input
                                                className="ant-input"
                                                id="create-claim_title"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                placeholder="title"
                                                type="text"
                                              />
                                            }
                                            focused={false}
                                            handleReset={[Function]}
                                            id="create-claim_title"
                                            inputType="input"
                                            onChange={[Function]}
                                            placeholder="title"
                                            prefixCls="ant-input"
                                            triggerFocus={[Function]}
                                            type="text"
                                            value=""
                                          >
                                            <input
                                              className="ant-input"
                                              id="create-claim_title"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder="title"
                                              type="text"
                                              value=""
                                            />
                                          </ClearableLabeledInput>
                                        </Input>
                                      </Component>
                                    </div>
                                  </div>
                                  <ForwardRef
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <CSSMotion
                                      internalRef={null}
                                      motionAppear={true}
                                      motionDeadline={500}
                                      motionEnter={true}
                                      motionLeave={true}
                                      motionName="show-help"
                                      onLeaveEnd={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    />
                                  </ForwardRef>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                  <FormItem
                    label="Slug"
                    name="slug"
                    rules={
                      Array [
                        Object {
                          "message": "Please input the slug!",
                          "required": true,
                        },
                        Object {
                          "message": "Please enter valid slug!",
                          "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                        },
                      ]
                    }
                  >
                    <WrapperField
                      label="Slug"
                      messageVariables={
                        Object {
                          "label": "Slug",
                        }
                      }
                      name="slug"
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please input the slug!",
                            "required": true,
                          },
                          Object {
                            "message": "Please enter valid slug!",
                            "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        key="_slug"
                        label="Slug"
                        messageVariables={
                          Object {
                            "label": "Slug",
                          }
                        }
                        name={
                          Array [
                            "slug",
                          ]
                        }
                        onReset={[Function]}
                        rules={
                          Array [
                            Object {
                              "message": "Please input the slug!",
                              "required": true,
                            },
                            Object {
                              "message": "Please enter valid slug!",
                              "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                            },
                          ]
                        }
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="create-claim_slug"
                              label="Slug"
                              name="slug"
                              prefixCls="ant-form"
                              required={true}
                              rules={
                                Array [
                                  Object {
                                    "message": "Please input the slug!",
                                    "required": true,
                                  },
                                  Object {
                                    "message": "Please enter valid slug!",
                                    "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                  },
                                ]
                              }
                            >
                              <Col
                                className="ant-form-item-label"
                                span={8}
                              >
                                <div
                                  className="ant-col ant-col-8 ant-form-item-label"
                                  style={Object {}}
                                >
                                  <label
                                    className="ant-form-item-required"
                                    htmlFor="create-claim_slug"
                                    title="Slug"
                                  >
                                    Slug
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Slug"
                              name={
                                Array [
                                  "slug",
                                ]
                              }
                              onDomErrorVisibleChange={[Function]}
                              prefixCls="ant-form"
                              rules={
                                Array [
                                  Object {
                                    "message": "Please input the slug!",
                                    "required": true,
                                  },
                                  Object {
                                    "message": "Please enter valid slug!",
                                    "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                  },
                                ]
                              }
                              touched={false}
                              validateStatus=""
                              validating={false}
                            >
                              <Col
                                className="ant-form-item-control"
                                span={16}
                              >
                                <div
                                  className="ant-col ant-col-16 ant-form-item-control"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={1}
                                      >
                                        <Input
                                          id="create-claim_slug"
                                          onChange={[Function]}
                                          type="text"
                                        >
                                          <ClearableLabeledInput
                                            bordered={true}
                                            element={
                                              <input
                                                className="ant-input"
                                                id="create-claim_slug"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                type="text"
                                              />
                                            }
                                            focused={false}
                                            handleReset={[Function]}
                                            id="create-claim_slug"
                                            inputType="input"
                                            onChange={[Function]}
                                            prefixCls="ant-input"
                                            triggerFocus={[Function]}
                                            type="text"
                                            value=""
                                          >
                                            <input
                                              className="ant-input"
                                              id="create-claim_slug"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              type="text"
                                              value=""
                                            />
                                          </ClearableLabeledInput>
                                        </Input>
                                      </Component>
                                    </div>
                                  </div>
                                  <ForwardRef
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <CSSMotion
                                      internalRef={null}
                                      motionAppear={true}
                                      motionDeadline={500}
                                      motionEnter={true}
                                      motionLeave={true}
                                      motionName="show-help"
                                      onLeaveEnd={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    />
                                  </ForwardRef>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                  <FormItem
                    label="Claimants"
                    name="claimant"
                    rules={
                      Array [
                        Object {
                          "message": "Please add claimant!",
                          "required": true,
                        },
                      ]
                    }
                  >
                    <WrapperField
                      label="Claimants"
                      messageVariables={
                        Object {
                          "label": "Claimants",
                        }
                      }
                      name="claimant"
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please add claimant!",
                            "required": true,
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        key="_claimant"
                        label="Claimants"
                        messageVariables={
                          Object {
                            "label": "Claimants",
                          }
                        }
                        name={
                          Array [
                            "claimant",
                          ]
                        }
                        onReset={[Function]}
                        rules={
                          Array [
                            Object {
                              "message": "Please add claimant!",
                              "required": true,
                            },
                          ]
                        }
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="create-claim_claimant"
                              label="Claimants"
                              name="claimant"
                              prefixCls="ant-form"
                              required={true}
                              rules={
                                Array [
                                  Object {
                                    "message": "Please add claimant!",
                                    "required": true,
                                  },
                                ]
                              }
                            >
                              <Col
                                className="ant-form-item-label"
                                span={8}
                              >
                                <div
                                  className="ant-col ant-col-8 ant-form-item-label"
                                  style={Object {}}
                                >
                                  <label
                                    className="ant-form-item-required"
                                    htmlFor="create-claim_claimant"
                                    title="Claimants"
                                  >
                                    Claimants
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Claimants"
                              name={
                                Array [
                                  "claimant",
                                ]
                              }
                              onDomErrorVisibleChange={[Function]}
                              prefixCls="ant-form"
                              rules={
                                Array [
                                  Object {
                                    "message": "Please add claimant!",
                                    "required": true,
                                  },
                                ]
                              }
                              touched={false}
                              validateStatus=""
                              validating={false}
                            >
                              <Col
                                className="ant-form-item-control"
                                span={16}
                              >
                                <div
                                  className="ant-col ant-col-16 ant-form-item-control"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={1}
                                      >
                                        <Selector
                                          action="Claimants"
                                          id="create-claim_claimant"
                                          key="true"
                                          onChange={[Function]}
                                        >
                                          <Select
                                            bordered={true}
                                            choiceTransitionName=""
                                            defaultValue={
                                              Array [
                                                Array [],
                                              ]
                                            }
                                            filterOption={[Function]}
                                            listHeight={128}
                                            loading={true}
                                            onChange={[Function]}
                                            onPopupScroll={[Function]}
                                            onSearch={[Function]}
                                            placeholder="Select claimants"
                                            transitionName="slide-up"
                                          >
                                            <Select
                                              choiceTransitionName=""
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              defaultValue={
                                                Array [
                                                  Array [],
                                                ]
                                              }
                                              dropdownClassName=""
                                              filterOption={[Function]}
                                              inputIcon={
                                                <ForwardRef(LoadingOutlined)
                                                  spin={true}
                                                />
                                              }
                                              listHeight={128}
                                              listItemHeight={24}
                                              loading={true}
                                              menuItemSelectedIcon={null}
                                              notFoundContent={
                                                <Context.Consumer>
                                                  [Function]
                                                </Context.Consumer>
                                              }
                                              onChange={[Function]}
                                              onPopupScroll={[Function]}
                                              onSearch={[Function]}
                                              placeholder="Select claimants"
                                              prefixCls="ant-select"
                                              removeIcon={<ForwardRef(CloseOutlined) />}
                                              transitionName="slide-up"
                                            >
                                              <ForwardRef(Select)
                                                choiceTransitionName=""
                                                className=""
                                                clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                defaultValue={
                                                  Array [
                                                    Array [],
                                                  ]
                                                }
                                                dropdownClassName=""
                                                filterOption={[Function]}
                                                inputIcon={
                                                  <ForwardRef(LoadingOutlined)
                                                    spin={true}
                                                  />
                                                }
                                                listHeight={128}
                                                listItemHeight={24}
                                                loading={true}
                                                menuItemSelectedIcon={null}
                                                notFoundContent={
                                                  <Context.Consumer>
                                                    [Function]
                                                  </Context.Consumer>
                                                }
                                                onChange={[Function]}
                                                onPopupScroll={[Function]}
                                                onSearch={[Function]}
                                                placeholder="Select claimants"
                                                prefixCls="ant-select"
                                                removeIcon={<ForwardRef(CloseOutlined) />}
                                                transitionName="slide-up"
                                              >
                                                <div
                                                  className="ant-select ant-select-single ant-select-show-arrow ant-select-loading"
                                                  onBlur={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  onMouseDown={[Function]}
                                                >
                                                  <SelectTrigger
                                                    containerWidth={null}
                                                    dropdownClassName=""
                                                    empty={true}
                                                    getTriggerDOMNode={[Function]}
                                                    popupElement={
                                                      <ForwardRef(OptionList)
                                                        childrenAsData={true}
                                                        defaultActiveFirstOption={true}
                                                        flattenOptions={Array []}
                                                        height={128}
                                                        itemHeight={24}
                                                        menuItemSelectedIcon={null}
                                                        multiple={false}
                                                        notFoundContent={
                                                          <Context.Consumer>
                                                            [Function]
                                                          </Context.Consumer>
                                                        }
                                                        onActiveValue={[Function]}
                                                        onMouseEnter={[Function]}
                                                        onScroll={[Function]}
                                                        onSelect={[Function]}
                                                        onToggleOpen={[Function]}
                                                        options={Array []}
                                                        prefixCls="ant-select"
                                                        searchValue=""
                                                        values={
                                                          Set {
                                                            Array [],
                                                          }
                                                        }
                                                        virtual={true}
                                                      />
                                                    }
                                                    prefixCls="ant-select"
                                                    transitionName="slide-up"
                                                  >
                                                    <Trigger
                                                      action={Array []}
                                                      afterPopupVisibleChange={[Function]}
                                                      autoDestroy={false}
                                                      blurDelay={0.15}
                                                      builtinPlacements={
                                                        Object {
                                                          "bottomLeft": Object {
                                                            "offset": Array [
                                                              0,
                                                              4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "tl",
                                                              "bl",
                                                            ],
                                                          },
                                                          "bottomRight": Object {
                                                            "offset": Array [
                                                              0,
                                                              4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "tr",
                                                              "br",
                                                            ],
                                                          },
                                                          "topLeft": Object {
                                                            "offset": Array [
                                                              0,
                                                              -4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "bl",
                                                              "tl",
                                                            ],
                                                          },
                                                          "topRight": Object {
                                                            "offset": Array [
                                                              0,
                                                              -4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "br",
                                                              "tr",
                                                            ],
                                                          },
                                                        }
                                                      }
                                                      defaultPopupVisible={false}
                                                      destroyPopupOnHide={false}
                                                      focusDelay={0}
                                                      getDocument={[Function]}
                                                      getPopupClassNameFromAlign={[Function]}
                                                      getTriggerDOMNode={[Function]}
                                                      hideAction={Array []}
                                                      mask={false}
                                                      maskClosable={true}
                                                      mouseEnterDelay={0}
                                                      mouseLeaveDelay={0.1}
                                                      onPopupAlign={[Function]}
                                                      onPopupVisibleChange={[Function]}
                                                      popup={
                                                        <div>
                                                          <ForwardRef(OptionList)
                                                            childrenAsData={true}
                                                            defaultActiveFirstOption={true}
                                                            flattenOptions={Array []}
                                                            height={128}
                                                            itemHeight={24}
                                                            menuItemSelectedIcon={null}
                                                            multiple={false}
                                                            notFoundContent={
                                                              <Context.Consumer>
                                                                [Function]
                                                              </Context.Consumer>
                                                            }
                                                            onActiveValue={[Function]}
                                                            onMouseEnter={[Function]}
                                                            onScroll={[Function]}
                                                            onSelect={[Function]}
                                                            onToggleOpen={[Function]}
                                                            options={Array []}
                                                            prefixCls="ant-select"
                                                            searchValue=""
                                                            values={
                                                              Set {
                                                                Array [],
                                                              }
                                                            }
                                                            virtual={true}
                                                          />
                                                        </div>
                                                      }
                                                      popupAlign={Object {}}
                                                      popupClassName="ant-select-dropdown-empty"
                                                      popupPlacement="bottomLeft"
                                                      popupStyle={
                                                        Object {
                                                          "minWidth": null,
                                                          "width": null,
                                                        }
                                                      }
                                                      popupTransitionName="slide-up"
                                                      prefixCls="ant-select-dropdown"
                                                      showAction={Array []}
                                                    >
                                                      <Selector
                                                        accessibilityIndex={0}
                                                        activeValue={null}
                                                        choiceTransitionName=""
                                                        className=""
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        defaultValue={
                                                          Array [
                                                            Array [],
                                                          ]
                                                        }
                                                        domRef={
                                                          Object {
                                                            "current": <div
                                                              class="ant-select-selector"
                                                            >
                                                              <span
                                                                class="ant-select-selection-search"
                                                              >
                                                                <input
                                                                  aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                  aria-autocomplete="list"
                                                                  aria-controls="rc_select_TEST_OR_SSR_list"
                                                                  aria-haspopup="listbox"
                                                                  aria-owns="rc_select_TEST_OR_SSR_list"
                                                                  autocomplete="off"
                                                                  class="ant-select-selection-search-input"
                                                                  id="rc_select_TEST_OR_SSR"
                                                                  readonly=""
                                                                  role="combobox"
                                                                  style="opacity: 0;"
                                                                  unselectable="on"
                                                                  value=""
                                                                />
                                                              </span>
                                                              <span
                                                                class="ant-select-selection-item"
                                                              />
                                                            </div>,
                                                          }
                                                        }
                                                        dropdownClassName=""
                                                        filterOption={[Function]}
                                                        inputElement={null}
                                                        inputIcon={
                                                          <ForwardRef(LoadingOutlined)
                                                            spin={true}
                                                          />
                                                        }
                                                        key="trigger"
                                                        listHeight={128}
                                                        listItemHeight={24}
                                                        loading={true}
                                                        menuItemSelectedIcon={null}
                                                        multiple={false}
                                                        notFoundContent={
                                                          <Context.Consumer>
                                                            [Function]
                                                          </Context.Consumer>
                                                        }
                                                        onChange={[Function]}
                                                        onPopupScroll={[Function]}
                                                        onSearch={[Function]}
                                                        onSearchSubmit={[Function]}
                                                        onSelect={[Function]}
                                                        onToggleOpen={[Function]}
                                                        placeholder="Select claimants"
                                                        prefixCls="ant-select"
                                                        removeIcon={<ForwardRef(CloseOutlined) />}
                                                        searchValue=""
                                                        showSearch={false}
                                                        tokenWithEnter={false}
                                                        transitionName="slide-up"
                                                        values={
                                                          Array [
                                                            Object {
                                                              "disabled": undefined,
                                                              "key": Array [],
                                                              "label": Array [],
                                                              "value": Array [],
                                                            },
                                                          ]
                                                        }
                                                      >
                                                        <div
                                                          className="ant-select-selector"
                                                          onMouseDown={[Function]}
                                                        >
                                                          <SingleSelector
                                                            accessibilityIndex={0}
                                                            activeValue={null}
                                                            choiceTransitionName=""
                                                            className=""
                                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                            defaultValue={
                                                              Array [
                                                                Array [],
                                                              ]
                                                            }
                                                            domRef={
                                                              Object {
                                                                "current": <div
                                                                  class="ant-select-selector"
                                                                >
                                                                  <span
                                                                    class="ant-select-selection-search"
                                                                  >
                                                                    <input
                                                                      aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                      aria-autocomplete="list"
                                                                      aria-controls="rc_select_TEST_OR_SSR_list"
                                                                      aria-haspopup="listbox"
                                                                      aria-owns="rc_select_TEST_OR_SSR_list"
                                                                      autocomplete="off"
                                                                      class="ant-select-selection-search-input"
                                                                      id="rc_select_TEST_OR_SSR"
                                                                      readonly=""
                                                                      role="combobox"
                                                                      style="opacity: 0;"
                                                                      unselectable="on"
                                                                      value=""
                                                                    />
                                                                  </span>
                                                                  <span
                                                                    class="ant-select-selection-item"
                                                                  />
                                                                </div>,
                                                              }
                                                            }
                                                            dropdownClassName=""
                                                            filterOption={[Function]}
                                                            inputElement={null}
                                                            inputIcon={
                                                              <ForwardRef(LoadingOutlined)
                                                                spin={true}
                                                              />
                                                            }
                                                            inputRef={
                                                              Object {
                                                                "current": <input
                                                                  aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                  aria-autocomplete="list"
                                                                  aria-controls="rc_select_TEST_OR_SSR_list"
                                                                  aria-haspopup="listbox"
                                                                  aria-owns="rc_select_TEST_OR_SSR_list"
                                                                  autocomplete="off"
                                                                  class="ant-select-selection-search-input"
                                                                  id="rc_select_TEST_OR_SSR"
                                                                  readonly=""
                                                                  role="combobox"
                                                                  style="opacity: 0;"
                                                                  unselectable="on"
                                                                  value=""
                                                                />,
                                                              }
                                                            }
                                                            listHeight={128}
                                                            listItemHeight={24}
                                                            loading={true}
                                                            menuItemSelectedIcon={null}
                                                            multiple={false}
                                                            notFoundContent={
                                                              <Context.Consumer>
                                                                [Function]
                                                              </Context.Consumer>
                                                            }
                                                            onChange={[Function]}
                                                            onInputChange={[Function]}
                                                            onInputCompositionEnd={[Function]}
                                                            onInputCompositionStart={[Function]}
                                                            onInputKeyDown={[Function]}
                                                            onInputMouseDown={[Function]}
                                                            onInputPaste={[Function]}
                                                            onPopupScroll={[Function]}
                                                            onSearch={[Function]}
                                                            onSearchSubmit={[Function]}
                                                            onSelect={[Function]}
                                                            onToggleOpen={[Function]}
                                                            placeholder="Select claimants"
                                                            prefixCls="ant-select"
                                                            removeIcon={<ForwardRef(CloseOutlined) />}
                                                            searchValue=""
                                                            showSearch={false}
                                                            tokenWithEnter={false}
                                                            transitionName="slide-up"
                                                            values={
                                                              Array [
                                                                Object {
                                                                  "disabled": undefined,
                                                                  "key": Array [],
                                                                  "label": Array [],
                                                                  "value": Array [],
                                                                },
                                                              ]
                                                            }
                                                          >
                                                            <span
                                                              className="ant-select-selection-search"
                                                            >
                                                              <Input
                                                                accessibilityIndex={0}
                                                                attrs={Object {}}
                                                                editable={false}
                                                                inputElement={null}
                                                                onChange={[Function]}
                                                                onCompositionEnd={[Function]}
                                                                onCompositionStart={[Function]}
                                                                onKeyDown={[Function]}
                                                                onMouseDown={[Function]}
                                                                onPaste={[Function]}
                                                                prefixCls="ant-select"
                                                                value=""
                                                              >
                                                                <input
                                                                  aria-activedescendant="undefined_list_0"
                                                                  aria-autocomplete="list"
                                                                  aria-controls="undefined_list"
                                                                  aria-haspopup="listbox"
                                                                  aria-owns="undefined_list"
                                                                  autoComplete="off"
                                                                  className="ant-select-selection-search-input"
                                                                  onChange={[Function]}
                                                                  onCompositionEnd={[Function]}
                                                                  onCompositionStart={[Function]}
                                                                  onKeyDown={[Function]}
                                                                  onMouseDown={[Function]}
                                                                  onPaste={[Function]}
                                                                  readOnly={true}
                                                                  role="combobox"
                                                                  style={
                                                                    Object {
                                                                      "opacity": 0,
                                                                    }
                                                                  }
                                                                  unselectable="on"
                                                                  value=""
                                                                />
                                                              </Input>
                                                            </span>
                                                            <span
                                                              className="ant-select-selection-item"
                                                            />
                                                          </SingleSelector>
                                                        </div>
                                                      </Selector>
                                                    </Trigger>
                                                  </SelectTrigger>
                                                  <TransBtn
                                                    className="ant-select-arrow ant-select-arrow-loading"
                                                    customizeIcon={
                                                      <ForwardRef(LoadingOutlined)
                                                        spin={true}
                                                      />
                                                    }
                                                    customizeIconProps={
                                                      Object {
                                                        "focused": false,
                                                        "loading": true,
                                                        "open": undefined,
                                                        "searchValue": "",
                                                        "showSearch": false,
                                                      }
                                                    }
                                                  >
                                                    <span
                                                      aria-hidden={true}
                                                      className="ant-select-arrow ant-select-arrow-loading"
                                                      onMouseDown={[Function]}
                                                      style={
                                                        Object {
                                                          "WebkitUserSelect": "none",
                                                          "userSelect": "none",
                                                        }
                                                      }
                                                      unselectable="on"
                                                    >
                                                      <ForwardRef(LoadingOutlined)
                                                        spin={true}
                                                      >
                                                        <AntdIcon
                                                          icon={
                                                            Object {
                                                              "icon": Object {
                                                                "attrs": Object {
                                                                  "focusable": "false",
                                                                  "viewBox": "0 0 1024 1024",
                                                                },
                                                                "children": Array [
                                                                  Object {
                                                                    "attrs": Object {
                                                                      "d": "M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z",
                                                                    },
                                                                    "tag": "path",
                                                                  },
                                                                ],
                                                                "tag": "svg",
                                                              },
                                                              "name": "loading",
                                                              "theme": "outlined",
                                                            }
                                                          }
                                                          spin={true}
                                                        >
                                                          <span
                                                            aria-label="loading"
                                                            className="anticon anticon-loading"
                                                            role="img"
                                                          >
                                                            <IconReact
                                                              className="anticon-spin"
                                                              icon={
                                                                Object {
                                                                  "icon": Object {
                                                                    "attrs": Object {
                                                                      "focusable": "false",
                                                                      "viewBox": "0 0 1024 1024",
                                                                    },
                                                                    "children": Array [
                                                                      Object {
                                                                        "attrs": Object {
                                                                          "d": "M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z",
                                                                        },
                                                                        "tag": "path",
                                                                      },
                                                                    ],
                                                                    "tag": "svg",
                                                                  },
                                                                  "name": "loading",
                                                                  "theme": "outlined",
                                                                }
                                                              }
                                                            >
                                                              <svg
                                                                aria-hidden="true"
                                                                className="anticon-spin"
                                                                data-icon="loading"
                                                                fill="currentColor"
                                                                focusable="false"
                                                                height="1em"
                                                                key="svg-loading"
                                                                viewBox="0 0 1024 1024"
                                                                width="1em"
                                                              >
                                                                <path
                                                                  d="M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z"
                                                                  key="svg-loading-svg-0"
                                                                />
                                                              </svg>
                                                            </IconReact>
                                                          </span>
                                                        </AntdIcon>
                                                      </ForwardRef(LoadingOutlined)>
                                                    </span>
                                                  </TransBtn>
                                                </div>
                                              </ForwardRef(Select)>
                                            </Select>
                                          </Select>
                                        </Selector>
                                      </Component>
                                    </div>
                                  </div>
                                  <ForwardRef
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <CSSMotion
                                      internalRef={null}
                                      motionAppear={true}
                                      motionDeadline={500}
                                      motionEnter={true}
                                      motionLeave={true}
                                      motionName="show-help"
                                      onLeaveEnd={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    />
                                  </ForwardRef>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                  <FormItem>
                    <Row
                      className="ant-form-item"
                      key="row"
                    >
                      <div
                        className="ant-row ant-form-item"
                        style={Object {}}
                      >
                        <FormItemLabel
                          prefixCls="ant-form"
                        />
                        <FormItemInput
                          errors={Array []}
                          onDomErrorVisibleChange={[Function]}
                          prefixCls="ant-form"
                          validateStatus=""
                        >
                          <Col
                            className="ant-form-item-control"
                            span={16}
                          >
                            <div
                              className="ant-col ant-col-16 ant-form-item-control"
                              style={Object {}}
                            >
                              <div
                                className="ant-form-item-control-input"
                              >
                                <div
                                  className="ant-form-item-control-input-content"
                                >
                                  <Row
                                    gutter={8}
                                  >
                                    <div
                                      className="ant-row"
                                      style={
                                        Object {
                                          "marginLeft": -4,
                                          "marginRight": -4,
                                        }
                                      }
                                    >
                                      <Col
                                        span={18}
                                      >
                                        <div
                                          className="ant-col ant-col-18"
                                          style={
                                            Object {
                                              "paddingLeft": 4,
                                              "paddingRight": 4,
                                            }
                                          }
                                        >
                                          <Input
                                            onChange={[Function]}
                                            placeholder="claimant name"
                                            type="text"
                                            value=""
                                          >
                                            <ClearableLabeledInput
                                              bordered={true}
                                              element={
                                                <input
                                                  className="ant-input"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="claimant name"
                                                  type="text"
                                                  value=""
                                                />
                                              }
                                              focused={false}
                                              handleReset={[Function]}
                                              inputType="input"
                                              onChange={[Function]}
                                              placeholder="claimant name"
                                              prefixCls="ant-input"
                                              triggerFocus={[Function]}
                                              type="text"
                                              value=""
                                            >
                                              <input
                                                className="ant-input"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                placeholder="claimant name"
                                                type="text"
                                                value=""
                                              />
                                            </ClearableLabeledInput>
                                          </Input>
                                        </div>
                                      </Col>
                                      <Col
                                        span={6}
                                      >
                                        <div
                                          className="ant-col ant-col-6"
                                          style={
                                            Object {
                                              "paddingLeft": 4,
                                              "paddingRight": 4,
                                            }
                                          }
                                        >
                                          <Button
                                            block={true}
                                            ghost={false}
                                            htmlType="button"
                                            loading={false}
                                            onClick={[Function]}
                                          >
                                            <Wave>
                                              <button
                                                className="ant-btn ant-btn-block"
                                                onClick={[Function]}
                                                type="button"
                                              >
                                                <LoadingIcon
                                                  existIcon={false}
                                                  loading={false}
                                                  prefixCls="ant-btn"
                                                >
                                                  <ForwardRef
                                                    motionName="ant-btn-loading-icon-motion"
                                                    onAppearActive={[Function]}
                                                    onAppearStart={[Function]}
                                                    onEnterActive={[Function]}
                                                    onEnterStart={[Function]}
                                                    onLeaveActive={[Function]}
                                                    onLeaveStart={[Function]}
                                                    removeOnLeave={true}
                                                    visible={false}
                                                  >
                                                    <CSSMotion
                                                      internalRef={null}
                                                      motionAppear={true}
                                                      motionEnter={true}
                                                      motionLeave={true}
                                                      motionName="ant-btn-loading-icon-motion"
                                                      onAppearActive={[Function]}
                                                      onAppearStart={[Function]}
                                                      onEnterActive={[Function]}
                                                      onEnterStart={[Function]}
                                                      onLeaveActive={[Function]}
                                                      onLeaveStart={[Function]}
                                                      removeOnLeave={true}
                                                      visible={false}
                                                    />
                                                  </ForwardRef>
                                                </LoadingIcon>
                                                <span
                                                  key=".0"
                                                >
                                                  Add
                                                </span>
                                              </button>
                                            </Wave>
                                          </Button>
                                        </div>
                                      </Col>
                                    </div>
                                  </Row>
                                </div>
                              </div>
                              <ForwardRef
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <CSSMotion
                                  internalRef={null}
                                  motionAppear={true}
                                  motionDeadline={500}
                                  motionEnter={true}
                                  motionLeave={true}
                                  motionName="show-help"
                                  onLeaveEnd={[Function]}
                                  removeOnLeave={true}
                                  visible={false}
                                />
                              </ForwardRef>
                            </div>
                          </Col>
                        </FormItemInput>
                      </div>
                    </Row>
                  </FormItem>
                  <FormItem
                    label="Ratings"
                    name="rating"
                    rules={
                      Array [
                        Object {
                          "message": "Please add rating!",
                          "required": true,
                        },
                      ]
                    }
                  >
                    <WrapperField
                      label="Ratings"
                      messageVariables={
                        Object {
                          "label": "Ratings",
                        }
                      }
                      name="rating"
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please add rating!",
                            "required": true,
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        key="_rating"
                        label="Ratings"
                        messageVariables={
                          Object {
                            "label": "Ratings",
                          }
                        }
                        name={
                          Array [
                            "rating",
                          ]
                        }
                        onReset={[Function]}
                        rules={
                          Array [
                            Object {
                              "message": "Please add rating!",
                              "required": true,
                            },
                          ]
                        }
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="create-claim_rating"
                              label="Ratings"
                              name="rating"
                              prefixCls="ant-form"
                              required={true}
                              rules={
                                Array [
                                  Object {
                                    "message": "Please add rating!",
                                    "required": true,
                                  },
                                ]
                              }
                            >
                              <Col
                                className="ant-form-item-label"
                                span={8}
                              >
                                <div
                                  className="ant-col ant-col-8 ant-form-item-label"
                                  style={Object {}}
                                >
                                  <label
                                    className="ant-form-item-required"
                                    htmlFor="create-claim_rating"
                                    title="Ratings"
                                  >
                                    Ratings
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Ratings"
                              name={
                                Array [
                                  "rating",
                                ]
                              }
                              onDomErrorVisibleChange={[Function]}
                              prefixCls="ant-form"
                              rules={
                                Array [
                                  Object {
                                    "message": "Please add rating!",
                                    "required": true,
                                  },
                                ]
                              }
                              touched={false}
                              validateStatus=""
                              validating={false}
                            >
                              <Col
                                className="ant-form-item-control"
                                span={16}
                              >
                                <div
                                  className="ant-col ant-col-16 ant-form-item-control"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={1}
                                      >
                                        <Selector
                                          action="Ratings"
                                          id="create-claim_rating"
                                          onChange={[Function]}
                                        >
                                          <Select
                                            bordered={true}
                                            choiceTransitionName=""
                                            defaultValue={
                                              Array [
                                                Array [],
                                              ]
                                            }
                                            filterOption={[Function]}
                                            listHeight={128}
                                            loading={true}
                                            onChange={[Function]}
                                            onPopupScroll={[Function]}
                                            onSearch={[Function]}
                                            placeholder="Select ratings"
                                            transitionName="slide-up"
                                          >
                                            <Select
                                              choiceTransitionName=""
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              defaultValue={
                                                Array [
                                                  Array [],
                                                ]
                                              }
                                              dropdownClassName=""
                                              filterOption={[Function]}
                                              inputIcon={
                                                <ForwardRef(LoadingOutlined)
                                                  spin={true}
                                                />
                                              }
                                              listHeight={128}
                                              listItemHeight={24}
                                              loading={true}
                                              menuItemSelectedIcon={null}
                                              notFoundContent={
                                                <Context.Consumer>
                                                  [Function]
                                                </Context.Consumer>
                                              }
                                              onChange={[Function]}
                                              onPopupScroll={[Function]}
                                              onSearch={[Function]}
                                              placeholder="Select ratings"
                                              prefixCls="ant-select"
                                              removeIcon={<ForwardRef(CloseOutlined) />}
                                              transitionName="slide-up"
                                            >
                                              <ForwardRef(Select)
                                                choiceTransitionName=""
                                                className=""
                                                clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                defaultValue={
                                                  Array [
                                                    Array [],
                                                  ]
                                                }
                                                dropdownClassName=""
                                                filterOption={[Function]}
                                                inputIcon={
                                                  <ForwardRef(LoadingOutlined)
                                                    spin={true}
                                                  />
                                                }
                                                listHeight={128}
                                                listItemHeight={24}
                                                loading={true}
                                                menuItemSelectedIcon={null}
                                                notFoundContent={
                                                  <Context.Consumer>
                                                    [Function]
                                                  </Context.Consumer>
                                                }
                                                onChange={[Function]}
                                                onPopupScroll={[Function]}
                                                onSearch={[Function]}
                                                placeholder="Select ratings"
                                                prefixCls="ant-select"
                                                removeIcon={<ForwardRef(CloseOutlined) />}
                                                transitionName="slide-up"
                                              >
                                                <div
                                                  className="ant-select ant-select-single ant-select-show-arrow ant-select-loading"
                                                  onBlur={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  onMouseDown={[Function]}
                                                >
                                                  <SelectTrigger
                                                    containerWidth={null}
                                                    dropdownClassName=""
                                                    empty={true}
                                                    getTriggerDOMNode={[Function]}
                                                    popupElement={
                                                      <ForwardRef(OptionList)
                                                        childrenAsData={true}
                                                        defaultActiveFirstOption={true}
                                                        flattenOptions={Array []}
                                                        height={128}
                                                        itemHeight={24}
                                                        menuItemSelectedIcon={null}
                                                        multiple={false}
                                                        notFoundContent={
                                                          <Context.Consumer>
                                                            [Function]
                                                          </Context.Consumer>
                                                        }
                                                        onActiveValue={[Function]}
                                                        onMouseEnter={[Function]}
                                                        onScroll={[Function]}
                                                        onSelect={[Function]}
                                                        onToggleOpen={[Function]}
                                                        options={Array []}
                                                        prefixCls="ant-select"
                                                        searchValue=""
                                                        values={
                                                          Set {
                                                            Array [],
                                                          }
                                                        }
                                                        virtual={true}
                                                      />
                                                    }
                                                    prefixCls="ant-select"
                                                    transitionName="slide-up"
                                                  >
                                                    <Trigger
                                                      action={Array []}
                                                      afterPopupVisibleChange={[Function]}
                                                      autoDestroy={false}
                                                      blurDelay={0.15}
                                                      builtinPlacements={
                                                        Object {
                                                          "bottomLeft": Object {
                                                            "offset": Array [
                                                              0,
                                                              4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "tl",
                                                              "bl",
                                                            ],
                                                          },
                                                          "bottomRight": Object {
                                                            "offset": Array [
                                                              0,
                                                              4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "tr",
                                                              "br",
                                                            ],
                                                          },
                                                          "topLeft": Object {
                                                            "offset": Array [
                                                              0,
                                                              -4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "bl",
                                                              "tl",
                                                            ],
                                                          },
                                                          "topRight": Object {
                                                            "offset": Array [
                                                              0,
                                                              -4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "br",
                                                              "tr",
                                                            ],
                                                          },
                                                        }
                                                      }
                                                      defaultPopupVisible={false}
                                                      destroyPopupOnHide={false}
                                                      focusDelay={0}
                                                      getDocument={[Function]}
                                                      getPopupClassNameFromAlign={[Function]}
                                                      getTriggerDOMNode={[Function]}
                                                      hideAction={Array []}
                                                      mask={false}
                                                      maskClosable={true}
                                                      mouseEnterDelay={0}
                                                      mouseLeaveDelay={0.1}
                                                      onPopupAlign={[Function]}
                                                      onPopupVisibleChange={[Function]}
                                                      popup={
                                                        <div>
                                                          <ForwardRef(OptionList)
                                                            childrenAsData={true}
                                                            defaultActiveFirstOption={true}
                                                            flattenOptions={Array []}
                                                            height={128}
                                                            itemHeight={24}
                                                            menuItemSelectedIcon={null}
                                                            multiple={false}
                                                            notFoundContent={
                                                              <Context.Consumer>
                                                                [Function]
                                                              </Context.Consumer>
                                                            }
                                                            onActiveValue={[Function]}
                                                            onMouseEnter={[Function]}
                                                            onScroll={[Function]}
                                                            onSelect={[Function]}
                                                            onToggleOpen={[Function]}
                                                            options={Array []}
                                                            prefixCls="ant-select"
                                                            searchValue=""
                                                            values={
                                                              Set {
                                                                Array [],
                                                              }
                                                            }
                                                            virtual={true}
                                                          />
                                                        </div>
                                                      }
                                                      popupAlign={Object {}}
                                                      popupClassName="ant-select-dropdown-empty"
                                                      popupPlacement="bottomLeft"
                                                      popupStyle={
                                                        Object {
                                                          "minWidth": null,
                                                          "width": null,
                                                        }
                                                      }
                                                      popupTransitionName="slide-up"
                                                      prefixCls="ant-select-dropdown"
                                                      showAction={Array []}
                                                    >
                                                      <Selector
                                                        accessibilityIndex={0}
                                                        activeValue={null}
                                                        choiceTransitionName=""
                                                        className=""
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        defaultValue={
                                                          Array [
                                                            Array [],
                                                          ]
                                                        }
                                                        domRef={
                                                          Object {
                                                            "current": <div
                                                              class="ant-select-selector"
                                                            >
                                                              <span
                                                                class="ant-select-selection-search"
                                                              >
                                                                <input
                                                                  aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                  aria-autocomplete="list"
                                                                  aria-controls="rc_select_TEST_OR_SSR_list"
                                                                  aria-haspopup="listbox"
                                                                  aria-owns="rc_select_TEST_OR_SSR_list"
                                                                  autocomplete="off"
                                                                  class="ant-select-selection-search-input"
                                                                  id="rc_select_TEST_OR_SSR"
                                                                  readonly=""
                                                                  role="combobox"
                                                                  style="opacity: 0;"
                                                                  unselectable="on"
                                                                  value=""
                                                                />
                                                              </span>
                                                              <span
                                                                class="ant-select-selection-item"
                                                              />
                                                            </div>,
                                                          }
                                                        }
                                                        dropdownClassName=""
                                                        filterOption={[Function]}
                                                        inputElement={null}
                                                        inputIcon={
                                                          <ForwardRef(LoadingOutlined)
                                                            spin={true}
                                                          />
                                                        }
                                                        key="trigger"
                                                        listHeight={128}
                                                        listItemHeight={24}
                                                        loading={true}
                                                        menuItemSelectedIcon={null}
                                                        multiple={false}
                                                        notFoundContent={
                                                          <Context.Consumer>
                                                            [Function]
                                                          </Context.Consumer>
                                                        }
                                                        onChange={[Function]}
                                                        onPopupScroll={[Function]}
                                                        onSearch={[Function]}
                                                        onSearchSubmit={[Function]}
                                                        onSelect={[Function]}
                                                        onToggleOpen={[Function]}
                                                        placeholder="Select ratings"
                                                        prefixCls="ant-select"
                                                        removeIcon={<ForwardRef(CloseOutlined) />}
                                                        searchValue=""
                                                        showSearch={false}
                                                        tokenWithEnter={false}
                                                        transitionName="slide-up"
                                                        values={
                                                          Array [
                                                            Object {
                                                              "disabled": undefined,
                                                              "key": Array [],
                                                              "label": Array [],
                                                              "value": Array [],
                                                            },
                                                          ]
                                                        }
                                                      >
                                                        <div
                                                          className="ant-select-selector"
                                                          onMouseDown={[Function]}
                                                        >
                                                          <SingleSelector
                                                            accessibilityIndex={0}
                                                            activeValue={null}
                                                            choiceTransitionName=""
                                                            className=""
                                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                            defaultValue={
                                                              Array [
                                                                Array [],
                                                              ]
                                                            }
                                                            domRef={
                                                              Object {
                                                                "current": <div
                                                                  class="ant-select-selector"
                                                                >
                                                                  <span
                                                                    class="ant-select-selection-search"
                                                                  >
                                                                    <input
                                                                      aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                      aria-autocomplete="list"
                                                                      aria-controls="rc_select_TEST_OR_SSR_list"
                                                                      aria-haspopup="listbox"
                                                                      aria-owns="rc_select_TEST_OR_SSR_list"
                                                                      autocomplete="off"
                                                                      class="ant-select-selection-search-input"
                                                                      id="rc_select_TEST_OR_SSR"
                                                                      readonly=""
                                                                      role="combobox"
                                                                      style="opacity: 0;"
                                                                      unselectable="on"
                                                                      value=""
                                                                    />
                                                                  </span>
                                                                  <span
                                                                    class="ant-select-selection-item"
                                                                  />
                                                                </div>,
                                                              }
                                                            }
                                                            dropdownClassName=""
                                                            filterOption={[Function]}
                                                            inputElement={null}
                                                            inputIcon={
                                                              <ForwardRef(LoadingOutlined)
                                                                spin={true}
                                                              />
                                                            }
                                                            inputRef={
                                                              Object {
                                                                "current": <input
                                                                  aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                  aria-autocomplete="list"
                                                                  aria-controls="rc_select_TEST_OR_SSR_list"
                                                                  aria-haspopup="listbox"
                                                                  aria-owns="rc_select_TEST_OR_SSR_list"
                                                                  autocomplete="off"
                                                                  class="ant-select-selection-search-input"
                                                                  id="rc_select_TEST_OR_SSR"
                                                                  readonly=""
                                                                  role="combobox"
                                                                  style="opacity: 0;"
                                                                  unselectable="on"
                                                                  value=""
                                                                />,
                                                              }
                                                            }
                                                            listHeight={128}
                                                            listItemHeight={24}
                                                            loading={true}
                                                            menuItemSelectedIcon={null}
                                                            multiple={false}
                                                            notFoundContent={
                                                              <Context.Consumer>
                                                                [Function]
                                                              </Context.Consumer>
                                                            }
                                                            onChange={[Function]}
                                                            onInputChange={[Function]}
                                                            onInputCompositionEnd={[Function]}
                                                            onInputCompositionStart={[Function]}
                                                            onInputKeyDown={[Function]}
                                                            onInputMouseDown={[Function]}
                                                            onInputPaste={[Function]}
                                                            onPopupScroll={[Function]}
                                                            onSearch={[Function]}
                                                            onSearchSubmit={[Function]}
                                                            onSelect={[Function]}
                                                            onToggleOpen={[Function]}
                                                            placeholder="Select ratings"
                                                            prefixCls="ant-select"
                                                            removeIcon={<ForwardRef(CloseOutlined) />}
                                                            searchValue=""
                                                            showSearch={false}
                                                            tokenWithEnter={false}
                                                            transitionName="slide-up"
                                                            values={
                                                              Array [
                                                                Object {
                                                                  "disabled": undefined,
                                                                  "key": Array [],
                                                                  "label": Array [],
                                                                  "value": Array [],
                                                                },
                                                              ]
                                                            }
                                                          >
                                                            <span
                                                              className="ant-select-selection-search"
                                                            >
                                                              <Input
                                                                accessibilityIndex={0}
                                                                attrs={Object {}}
                                                                editable={false}
                                                                inputElement={null}
                                                                onChange={[Function]}
                                                                onCompositionEnd={[Function]}
                                                                onCompositionStart={[Function]}
                                                                onKeyDown={[Function]}
                                                                onMouseDown={[Function]}
                                                                onPaste={[Function]}
                                                                prefixCls="ant-select"
                                                                value=""
                                                              >
                                                                <input
                                                                  aria-activedescendant="undefined_list_0"
                                                                  aria-autocomplete="list"
                                                                  aria-controls="undefined_list"
                                                                  aria-haspopup="listbox"
                                                                  aria-owns="undefined_list"
                                                                  autoComplete="off"
                                                                  className="ant-select-selection-search-input"
                                                                  onChange={[Function]}
                                                                  onCompositionEnd={[Function]}
                                                                  onCompositionStart={[Function]}
                                                                  onKeyDown={[Function]}
                                                                  onMouseDown={[Function]}
                                                                  onPaste={[Function]}
                                                                  readOnly={true}
                                                                  role="combobox"
                                                                  style={
                                                                    Object {
                                                                      "opacity": 0,
                                                                    }
                                                                  }
                                                                  unselectable="on"
                                                                  value=""
                                                                />
                                                              </Input>
                                                            </span>
                                                            <span
                                                              className="ant-select-selection-item"
                                                            />
                                                          </SingleSelector>
                                                        </div>
                                                      </Selector>
                                                    </Trigger>
                                                  </SelectTrigger>
                                                  <TransBtn
                                                    className="ant-select-arrow ant-select-arrow-loading"
                                                    customizeIcon={
                                                      <ForwardRef(LoadingOutlined)
                                                        spin={true}
                                                      />
                                                    }
                                                    customizeIconProps={
                                                      Object {
                                                        "focused": false,
                                                        "loading": true,
                                                        "open": undefined,
                                                        "searchValue": "",
                                                        "showSearch": false,
                                                      }
                                                    }
                                                  >
                                                    <span
                                                      aria-hidden={true}
                                                      className="ant-select-arrow ant-select-arrow-loading"
                                                      onMouseDown={[Function]}
                                                      style={
                                                        Object {
                                                          "WebkitUserSelect": "none",
                                                          "userSelect": "none",
                                                        }
                                                      }
                                                      unselectable="on"
                                                    >
                                                      <ForwardRef(LoadingOutlined)
                                                        spin={true}
                                                      >
                                                        <AntdIcon
                                                          icon={
                                                            Object {
                                                              "icon": Object {
                                                                "attrs": Object {
                                                                  "focusable": "false",
                                                                  "viewBox": "0 0 1024 1024",
                                                                },
                                                                "children": Array [
                                                                  Object {
                                                                    "attrs": Object {
                                                                      "d": "M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z",
                                                                    },
                                                                    "tag": "path",
                                                                  },
                                                                ],
                                                                "tag": "svg",
                                                              },
                                                              "name": "loading",
                                                              "theme": "outlined",
                                                            }
                                                          }
                                                          spin={true}
                                                        >
                                                          <span
                                                            aria-label="loading"
                                                            className="anticon anticon-loading"
                                                            role="img"
                                                          >
                                                            <IconReact
                                                              className="anticon-spin"
                                                              icon={
                                                                Object {
                                                                  "icon": Object {
                                                                    "attrs": Object {
                                                                      "focusable": "false",
                                                                      "viewBox": "0 0 1024 1024",
                                                                    },
                                                                    "children": Array [
                                                                      Object {
                                                                        "attrs": Object {
                                                                          "d": "M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z",
                                                                        },
                                                                        "tag": "path",
                                                                      },
                                                                    ],
                                                                    "tag": "svg",
                                                                  },
                                                                  "name": "loading",
                                                                  "theme": "outlined",
                                                                }
                                                              }
                                                            >
                                                              <svg
                                                                aria-hidden="true"
                                                                className="anticon-spin"
                                                                data-icon="loading"
                                                                fill="currentColor"
                                                                focusable="false"
                                                                height="1em"
                                                                key="svg-loading"
                                                                viewBox="0 0 1024 1024"
                                                                width="1em"
                                                              >
                                                                <path
                                                                  d="M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z"
                                                                  key="svg-loading-svg-0"
                                                                />
                                                              </svg>
                                                            </IconReact>
                                                          </span>
                                                        </AntdIcon>
                                                      </ForwardRef(LoadingOutlined)>
                                                    </span>
                                                  </TransBtn>
                                                </div>
                                              </ForwardRef(Select)>
                                            </Select>
                                          </Select>
                                        </Selector>
                                      </Component>
                                    </div>
                                  </div>
                                  <ForwardRef
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <CSSMotion
                                      internalRef={null}
                                      motionAppear={true}
                                      motionDeadline={500}
                                      motionEnter={true}
                                      motionLeave={true}
                                      motionName="show-help"
                                      onLeaveEnd={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    />
                                  </ForwardRef>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                  <FormItem
                    label="Description"
                    name="description"
                  >
                    <WrapperField
                      label="Description"
                      messageVariables={
                        Object {
                          "label": "Description",
                        }
                      }
                      name="description"
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        key="_description"
                        label="Description"
                        messageVariables={
                          Object {
                            "label": "Description",
                          }
                        }
                        name={
                          Array [
                            "description",
                          ]
                        }
                        onReset={[Function]}
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="create-claim_description"
                              label="Description"
                              name="description"
                              prefixCls="ant-form"
                              required={false}
                            >
                              <Col
                                className="ant-form-item-label"
                                span={8}
                              >
                                <div
                                  className="ant-col ant-col-8 ant-form-item-label"
                                  style={Object {}}
                                >
                                  <label
                                    className=""
                                    htmlFor="create-claim_description"
                                    title="Description"
                                  >
                                    Description
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Description"
                              name={
                                Array [
                                  "description",
                                ]
                              }
                              onDomErrorVisibleChange={[Function]}
                              prefixCls="ant-form"
                              touched={false}
                              validateStatus=""
                              validating={false}
                            >
                              <Col
                                className="ant-form-item-control"
                                span={16}
                              >
                                <div
                                  className="ant-col ant-col-16 ant-form-item-control"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={1}
                                      >
                                        <Editor
                                          id="create-claim_description"
                                          onChange={[Function]}
                                        >
                                          <div />
                                        </Editor>
                                      </Component>
                                    </div>
                                  </div>
                                  <ForwardRef
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <CSSMotion
                                      internalRef={null}
                                      motionAppear={true}
                                      motionDeadline={500}
                                      motionEnter={true}
                                      motionLeave={true}
                                      motionName="show-help"
                                      onLeaveEnd={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    />
                                  </ForwardRef>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                </div>
                <div
                  style={
                    Object {
                      "display": "none",
                    }
                  }
                >
                  <FormItem
                    label="Claim Date"
                    name="claim_date"
                  >
                    <WrapperField
                      label="Claim Date"
                      messageVariables={
                        Object {
                          "label": "Claim Date",
                        }
                      }
                      name="claim_date"
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        key="_claim_date"
                        label="Claim Date"
                        messageVariables={
                          Object {
                            "label": "Claim Date",
                          }
                        }
                        name={
                          Array [
                            "claim_date",
                          ]
                        }
                        onReset={[Function]}
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="create-claim_claim_date"
                              label="Claim Date"
                              name="claim_date"
                              prefixCls="ant-form"
                              required={false}
                            >
                              <Col
                                className="ant-form-item-label"
                                span={8}
                              >
                                <div
                                  className="ant-col ant-col-8 ant-form-item-label"
                                  style={Object {}}
                                >
                                  <label
                                    className=""
                                    htmlFor="create-claim_claim_date"
                                    title="Claim Date"
                                  >
                                    Claim Date
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Claim Date"
                              name={
                                Array [
                                  "claim_date",
                                ]
                              }
                              onDomErrorVisibleChange={[Function]}
                              prefixCls="ant-form"
                              touched={false}
                              validateStatus=""
                              validating={false}
                            >
                              <Col
                                className="ant-form-item-control"
                                span={16}
                              >
                                <div
                                  className="ant-col ant-col-16 ant-form-item-control"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={1}
                                      >
                                        <Picker
                                          id="create-claim_claim_date"
                                          onChange={[Function]}
                                        >
                                          <LocaleReceiver
                                            componentName="DatePicker"
                                            defaultLocale={[Function]}
                                          >
                                            <Picker
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              components={
                                                Object {
                                                  "button": [Function],
                                                  "rangeItem": [Function],
                                                }
                                              }
                                              generateConfig={
                                                Object {
                                                  "addDate": [Function],
                                                  "addMonth": [Function],
                                                  "addYear": [Function],
                                                  "getDate": [Function],
                                                  "getHour": [Function],
                                                  "getMinute": [Function],
                                                  "getMonth": [Function],
                                                  "getNow": [Function],
                                                  "getSecond": [Function],
                                                  "getWeekDay": [Function],
                                                  "getYear": [Function],
                                                  "isAfter": [Function],
                                                  "isValidate": [Function],
                                                  "locale": Object {
                                                    "format": [Function],
                                                    "getShortMonths": [Function],
                                                    "getShortWeekDays": [Function],
                                                    "getWeek": [Function],
                                                    "getWeekFirstDay": [Function],
                                                    "parse": [Function],
                                                  },
                                                  "setDate": [Function],
                                                  "setHour": [Function],
                                                  "setMinute": [Function],
                                                  "setMonth": [Function],
                                                  "setSecond": [Function],
                                                  "setYear": [Function],
                                                }
                                              }
                                              id="create-claim_claim_date"
                                              locale={
                                                Object {
                                                  "backToToday": "Back to today",
                                                  "clear": "Clear",
                                                  "dateFormat": "M/D/YYYY",
                                                  "dateSelect": "select date",
                                                  "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                  "dayFormat": "D",
                                                  "decadeSelect": "Choose a decade",
                                                  "locale": "en_US",
                                                  "month": "Month",
                                                  "monthBeforeYear": true,
                                                  "monthPlaceholder": "Select month",
                                                  "monthSelect": "Choose a month",
                                                  "nextCentury": "Next century",
                                                  "nextDecade": "Next decade",
                                                  "nextMonth": "Next month (PageDown)",
                                                  "nextYear": "Next year (Control + right)",
                                                  "now": "Now",
                                                  "ok": "Ok",
                                                  "placeholder": "Select date",
                                                  "previousCentury": "Last century",
                                                  "previousDecade": "Last decade",
                                                  "previousMonth": "Previous month (PageUp)",
                                                  "previousYear": "Last year (Control + left)",
                                                  "quarterPlaceholder": "Select quarter",
                                                  "rangeMonthPlaceholder": Array [
                                                    "Start month",
                                                    "End month",
                                                  ],
                                                  "rangePlaceholder": Array [
                                                    "Start date",
                                                    "End date",
                                                  ],
                                                  "rangeWeekPlaceholder": Array [
                                                    "Start week",
                                                    "End week",
                                                  ],
                                                  "rangeYearPlaceholder": Array [
                                                    "Start year",
                                                    "End year",
                                                  ],
                                                  "timeSelect": "select time",
                                                  "today": "Today",
                                                  "weekPlaceholder": "Select week",
                                                  "weekSelect": "Choose a week",
                                                  "year": "Year",
                                                  "yearFormat": "YYYY",
                                                  "yearPlaceholder": "Select year",
                                                  "yearSelect": "Choose a year",
                                                }
                                              }
                                              nextIcon={
                                                <span
                                                  className="ant-picker-next-icon"
                                                />
                                              }
                                              onChange={[Function]}
                                              placeholder="Select date"
                                              prefixCls="ant-picker"
                                              prevIcon={
                                                <span
                                                  className="ant-picker-prev-icon"
                                                />
                                              }
                                              showToday={true}
                                              suffixIcon={<ForwardRef(CalendarOutlined) />}
                                              superNextIcon={
                                                <span
                                                  className="ant-picker-super-next-icon"
                                                />
                                              }
                                              superPrevIcon={
                                                <span
                                                  className="ant-picker-super-prev-icon"
                                                />
                                              }
                                              transitionName="slide-up"
                                            >
                                              <InnerPicker
                                                allowClear={true}
                                                className=""
                                                clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                components={
                                                  Object {
                                                    "button": [Function],
                                                    "rangeItem": [Function],
                                                  }
                                                }
                                                generateConfig={
                                                  Object {
                                                    "addDate": [Function],
                                                    "addMonth": [Function],
                                                    "addYear": [Function],
                                                    "getDate": [Function],
                                                    "getHour": [Function],
                                                    "getMinute": [Function],
                                                    "getMonth": [Function],
                                                    "getNow": [Function],
                                                    "getSecond": [Function],
                                                    "getWeekDay": [Function],
                                                    "getYear": [Function],
                                                    "isAfter": [Function],
                                                    "isValidate": [Function],
                                                    "locale": Object {
                                                      "format": [Function],
                                                      "getShortMonths": [Function],
                                                      "getShortWeekDays": [Function],
                                                      "getWeek": [Function],
                                                      "getWeekFirstDay": [Function],
                                                      "parse": [Function],
                                                    },
                                                    "setDate": [Function],
                                                    "setHour": [Function],
                                                    "setMinute": [Function],
                                                    "setMonth": [Function],
                                                    "setSecond": [Function],
                                                    "setYear": [Function],
                                                  }
                                                }
                                                id="create-claim_claim_date"
                                                locale={
                                                  Object {
                                                    "backToToday": "Back to today",
                                                    "clear": "Clear",
                                                    "dateFormat": "M/D/YYYY",
                                                    "dateSelect": "select date",
                                                    "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                    "dayFormat": "D",
                                                    "decadeSelect": "Choose a decade",
                                                    "locale": "en_US",
                                                    "month": "Month",
                                                    "monthBeforeYear": true,
                                                    "monthPlaceholder": "Select month",
                                                    "monthSelect": "Choose a month",
                                                    "nextCentury": "Next century",
                                                    "nextDecade": "Next decade",
                                                    "nextMonth": "Next month (PageDown)",
                                                    "nextYear": "Next year (Control + right)",
                                                    "now": "Now",
                                                    "ok": "Ok",
                                                    "placeholder": "Select date",
                                                    "previousCentury": "Last century",
                                                    "previousDecade": "Last decade",
                                                    "previousMonth": "Previous month (PageUp)",
                                                    "previousYear": "Last year (Control + left)",
                                                    "quarterPlaceholder": "Select quarter",
                                                    "rangeMonthPlaceholder": Array [
                                                      "Start month",
                                                      "End month",
                                                    ],
                                                    "rangePlaceholder": Array [
                                                      "Start date",
                                                      "End date",
                                                    ],
                                                    "rangeWeekPlaceholder": Array [
                                                      "Start week",
                                                      "End week",
                                                    ],
                                                    "rangeYearPlaceholder": Array [
                                                      "Start year",
                                                      "End year",
                                                    ],
                                                    "timeSelect": "select time",
                                                    "today": "Today",
                                                    "weekPlaceholder": "Select week",
                                                    "weekSelect": "Choose a week",
                                                    "year": "Year",
                                                    "yearFormat": "YYYY",
                                                    "yearPlaceholder": "Select year",
                                                    "yearSelect": "Choose a year",
                                                  }
                                                }
                                                nextIcon={
                                                  <span
                                                    className="ant-picker-next-icon"
                                                  />
                                                }
                                                onChange={[Function]}
                                                pickerRef={
                                                  Object {
                                                    "current": Object {
                                                      "blur": [Function],
                                                      "focus": [Function],
                                                    },
                                                  }
                                                }
                                                placeholder="Select date"
                                                prefixCls="ant-picker"
                                                prevIcon={
                                                  <span
                                                    className="ant-picker-prev-icon"
                                                  />
                                                }
                                                showToday={true}
                                                suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                superNextIcon={
                                                  <span
                                                    className="ant-picker-super-next-icon"
                                                  />
                                                }
                                                superPrevIcon={
                                                  <span
                                                    className="ant-picker-super-prev-icon"
                                                  />
                                                }
                                                transitionName="slide-up"
                                              >
                                                <PickerTrigger
                                                  popupElement={
                                                    <div
                                                      className="ant-picker-panel-container"
                                                      onMouseDown={[Function]}
                                                    >
                                                      <PickerPanel
                                                        allowClear={true}
                                                        className="ant-picker-panel-focused"
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        components={
                                                          Object {
                                                            "button": [Function],
                                                            "rangeItem": [Function],
                                                          }
                                                        }
                                                        generateConfig={
                                                          Object {
                                                            "addDate": [Function],
                                                            "addMonth": [Function],
                                                            "addYear": [Function],
                                                            "getDate": [Function],
                                                            "getHour": [Function],
                                                            "getMinute": [Function],
                                                            "getMonth": [Function],
                                                            "getNow": [Function],
                                                            "getSecond": [Function],
                                                            "getWeekDay": [Function],
                                                            "getYear": [Function],
                                                            "isAfter": [Function],
                                                            "isValidate": [Function],
                                                            "locale": Object {
                                                              "format": [Function],
                                                              "getShortMonths": [Function],
                                                              "getShortWeekDays": [Function],
                                                              "getWeek": [Function],
                                                              "getWeekFirstDay": [Function],
                                                              "parse": [Function],
                                                            },
                                                            "setDate": [Function],
                                                            "setHour": [Function],
                                                            "setMinute": [Function],
                                                            "setMonth": [Function],
                                                            "setSecond": [Function],
                                                            "setYear": [Function],
                                                          }
                                                        }
                                                        id="create-claim_claim_date"
                                                        locale={
                                                          Object {
                                                            "backToToday": "Back to today",
                                                            "clear": "Clear",
                                                            "dateFormat": "M/D/YYYY",
                                                            "dateSelect": "select date",
                                                            "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                            "dayFormat": "D",
                                                            "decadeSelect": "Choose a decade",
                                                            "locale": "en_US",
                                                            "month": "Month",
                                                            "monthBeforeYear": true,
                                                            "monthPlaceholder": "Select month",
                                                            "monthSelect": "Choose a month",
                                                            "nextCentury": "Next century",
                                                            "nextDecade": "Next decade",
                                                            "nextMonth": "Next month (PageDown)",
                                                            "nextYear": "Next year (Control + right)",
                                                            "now": "Now",
                                                            "ok": "Ok",
                                                            "placeholder": "Select date",
                                                            "previousCentury": "Last century",
                                                            "previousDecade": "Last decade",
                                                            "previousMonth": "Previous month (PageUp)",
                                                            "previousYear": "Last year (Control + left)",
                                                            "quarterPlaceholder": "Select quarter",
                                                            "rangeMonthPlaceholder": Array [
                                                              "Start month",
                                                              "End month",
                                                            ],
                                                            "rangePlaceholder": Array [
                                                              "Start date",
                                                              "End date",
                                                            ],
                                                            "rangeWeekPlaceholder": Array [
                                                              "Start week",
                                                              "End week",
                                                            ],
                                                            "rangeYearPlaceholder": Array [
                                                              "Start year",
                                                              "End year",
                                                            ],
                                                            "timeSelect": "select time",
                                                            "today": "Today",
                                                            "weekPlaceholder": "Select week",
                                                            "weekSelect": "Choose a week",
                                                            "year": "Year",
                                                            "yearFormat": "YYYY",
                                                            "yearPlaceholder": "Select year",
                                                            "yearSelect": "Choose a year",
                                                          }
                                                        }
                                                        nextIcon={
                                                          <span
                                                            className="ant-picker-next-icon"
                                                          />
                                                        }
                                                        onChange={[Function]}
                                                        pickerRef={
                                                          Object {
                                                            "current": Object {
                                                              "blur": [Function],
                                                              "focus": [Function],
                                                            },
                                                          }
                                                        }
                                                        placeholder="Select date"
                                                        prefixCls="ant-picker"
                                                        prevIcon={
                                                          <span
                                                            className="ant-picker-prev-icon"
                                                          />
                                                        }
                                                        showToday={true}
                                                        suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                        superNextIcon={
                                                          <span
                                                            className="ant-picker-super-next-icon"
                                                          />
                                                        }
                                                        superPrevIcon={
                                                          <span
                                                            className="ant-picker-super-prev-icon"
                                                          />
                                                        }
                                                        tabIndex={-1}
                                                        transitionName="slide-up"
                                                        value={null}
                                                      />
                                                    </div>
                                                  }
                                                  popupPlacement="bottomLeft"
                                                  prefixCls="ant-picker"
                                                  transitionName="slide-up"
                                                  visible={false}
                                                >
                                                  <Trigger
                                                    action={Array []}
                                                    afterPopupVisibleChange={[Function]}
                                                    autoDestroy={false}
                                                    blurDelay={0.15}
                                                    builtinPlacements={
                                                      Object {
                                                        "bottomLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 1,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tl",
                                                            "bl",
                                                          ],
                                                        },
                                                        "bottomRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 1,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tr",
                                                            "br",
                                                          ],
                                                        },
                                                        "topLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "bl",
                                                            "tl",
                                                          ],
                                                        },
                                                        "topRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "br",
                                                            "tr",
                                                          ],
                                                        },
                                                      }
                                                    }
                                                    defaultPopupVisible={false}
                                                    destroyPopupOnHide={false}
                                                    focusDelay={0}
                                                    getDocument={[Function]}
                                                    getPopupClassNameFromAlign={[Function]}
                                                    hideAction={Array []}
                                                    mask={false}
                                                    maskClosable={true}
                                                    mouseEnterDelay={0}
                                                    mouseLeaveDelay={0.1}
                                                    onPopupAlign={[Function]}
                                                    onPopupVisibleChange={[Function]}
                                                    popup={
                                                      <div
                                                        className="ant-picker-panel-container"
                                                        onMouseDown={[Function]}
                                                      >
                                                        <PickerPanel
                                                          allowClear={true}
                                                          className="ant-picker-panel-focused"
                                                          clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                          components={
                                                            Object {
                                                              "button": [Function],
                                                              "rangeItem": [Function],
                                                            }
                                                          }
                                                          generateConfig={
                                                            Object {
                                                              "addDate": [Function],
                                                              "addMonth": [Function],
                                                              "addYear": [Function],
                                                              "getDate": [Function],
                                                              "getHour": [Function],
                                                              "getMinute": [Function],
                                                              "getMonth": [Function],
                                                              "getNow": [Function],
                                                              "getSecond": [Function],
                                                              "getWeekDay": [Function],
                                                              "getYear": [Function],
                                                              "isAfter": [Function],
                                                              "isValidate": [Function],
                                                              "locale": Object {
                                                                "format": [Function],
                                                                "getShortMonths": [Function],
                                                                "getShortWeekDays": [Function],
                                                                "getWeek": [Function],
                                                                "getWeekFirstDay": [Function],
                                                                "parse": [Function],
                                                              },
                                                              "setDate": [Function],
                                                              "setHour": [Function],
                                                              "setMinute": [Function],
                                                              "setMonth": [Function],
                                                              "setSecond": [Function],
                                                              "setYear": [Function],
                                                            }
                                                          }
                                                          id="create-claim_claim_date"
                                                          locale={
                                                            Object {
                                                              "backToToday": "Back to today",
                                                              "clear": "Clear",
                                                              "dateFormat": "M/D/YYYY",
                                                              "dateSelect": "select date",
                                                              "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                              "dayFormat": "D",
                                                              "decadeSelect": "Choose a decade",
                                                              "locale": "en_US",
                                                              "month": "Month",
                                                              "monthBeforeYear": true,
                                                              "monthPlaceholder": "Select month",
                                                              "monthSelect": "Choose a month",
                                                              "nextCentury": "Next century",
                                                              "nextDecade": "Next decade",
                                                              "nextMonth": "Next month (PageDown)",
                                                              "nextYear": "Next year (Control + right)",
                                                              "now": "Now",
                                                              "ok": "Ok",
                                                              "placeholder": "Select date",
                                                              "previousCentury": "Last century",
                                                              "previousDecade": "Last decade",
                                                              "previousMonth": "Previous month (PageUp)",
                                                              "previousYear": "Last year (Control + left)",
                                                              "quarterPlaceholder": "Select quarter",
                                                              "rangeMonthPlaceholder": Array [
                                                                "Start month",
                                                                "End month",
                                                              ],
                                                              "rangePlaceholder": Array [
                                                                "Start date",
                                                                "End date",
                                                              ],
                                                              "rangeWeekPlaceholder": Array [
                                                                "Start week",
                                                                "End week",
                                                              ],
                                                              "rangeYearPlaceholder": Array [
                                                                "Start year",
                                                                "End year",
                                                              ],
                                                              "timeSelect": "select time",
                                                              "today": "Today",
                                                              "weekPlaceholder": "Select week",
                                                              "weekSelect": "Choose a week",
                                                              "year": "Year",
                                                              "yearFormat": "YYYY",
                                                              "yearPlaceholder": "Select year",
                                                              "yearSelect": "Choose a year",
                                                            }
                                                          }
                                                          nextIcon={
                                                            <span
                                                              className="ant-picker-next-icon"
                                                            />
                                                          }
                                                          onChange={[Function]}
                                                          pickerRef={
                                                            Object {
                                                              "current": Object {
                                                                "blur": [Function],
                                                                "focus": [Function],
                                                              },
                                                            }
                                                          }
                                                          placeholder="Select date"
                                                          prefixCls="ant-picker"
                                                          prevIcon={
                                                            <span
                                                              className="ant-picker-prev-icon"
                                                            />
                                                          }
                                                          showToday={true}
                                                          suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                          superNextIcon={
                                                            <span
                                                              className="ant-picker-super-next-icon"
                                                            />
                                                          }
                                                          superPrevIcon={
                                                            <span
                                                              className="ant-picker-super-prev-icon"
                                                            />
                                                          }
                                                          tabIndex={-1}
                                                          transitionName="slide-up"
                                                          value={null}
                                                        />
                                                      </div>
                                                    }
                                                    popupAlign={Object {}}
                                                    popupClassName=""
                                                    popupPlacement="bottomLeft"
                                                    popupStyle={Object {}}
                                                    popupTransitionName="slide-up"
                                                    popupVisible={false}
                                                    prefixCls="ant-picker-dropdown"
                                                    showAction={Array []}
                                                  >
                                                    <div
                                                      className="ant-picker"
                                                      key="trigger"
                                                      onMouseUp={[Function]}
                                                    >
                                                      <div
                                                        className="ant-picker-input"
                                                      >
                                                        <input
                                                          autoComplete="off"
                                                          id="create-claim_claim_date"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          onMouseDown={[Function]}
                                                          placeholder="Select date"
                                                          readOnly={true}
                                                          size={12}
                                                          title=""
                                                          value=""
                                                        />
                                                        <span
                                                          className="ant-picker-suffix"
                                                        >
                                                          <ForwardRef(CalendarOutlined)>
                                                            <AntdIcon
                                                              icon={
                                                                Object {
                                                                  "icon": Object {
                                                                    "attrs": Object {
                                                                      "focusable": "false",
                                                                      "viewBox": "64 64 896 896",
                                                                    },
                                                                    "children": Array [
                                                                      Object {
                                                                        "attrs": Object {
                                                                          "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                        },
                                                                        "tag": "path",
                                                                      },
                                                                    ],
                                                                    "tag": "svg",
                                                                  },
                                                                  "name": "calendar",
                                                                  "theme": "outlined",
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                aria-label="calendar"
                                                                className="anticon anticon-calendar"
                                                                role="img"
                                                              >
                                                                <IconReact
                                                                  className=""
                                                                  icon={
                                                                    Object {
                                                                      "icon": Object {
                                                                        "attrs": Object {
                                                                          "focusable": "false",
                                                                          "viewBox": "64 64 896 896",
                                                                        },
                                                                        "children": Array [
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                        ],
                                                                        "tag": "svg",
                                                                      },
                                                                      "name": "calendar",
                                                                      "theme": "outlined",
                                                                    }
                                                                  }
                                                                >
                                                                  <svg
                                                                    aria-hidden="true"
                                                                    className=""
                                                                    data-icon="calendar"
                                                                    fill="currentColor"
                                                                    focusable="false"
                                                                    height="1em"
                                                                    key="svg-calendar"
                                                                    viewBox="64 64 896 896"
                                                                    width="1em"
                                                                  >
                                                                    <path
                                                                      d="M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z"
                                                                      key="svg-calendar-svg-0"
                                                                    />
                                                                  </svg>
                                                                </IconReact>
                                                              </span>
                                                            </AntdIcon>
                                                          </ForwardRef(CalendarOutlined)>
                                                        </span>
                                                      </div>
                                                    </div>
                                                  </Trigger>
                                                </PickerTrigger>
                                              </InnerPicker>
                                            </Picker>
                                          </LocaleReceiver>
                                        </Picker>
                                      </Component>
                                    </div>
                                  </div>
                                  <ForwardRef
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <CSSMotion
                                      internalRef={null}
                                      motionAppear={true}
                                      motionDeadline={500}
                                      motionEnter={true}
                                      motionLeave={true}
                                      motionName="show-help"
                                      onLeaveEnd={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    />
                                  </ForwardRef>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                  <FormItem
                    label="Checked Date"
                    name="checked_date"
                  >
                    <WrapperField
                      label="Checked Date"
                      messageVariables={
                        Object {
                          "label": "Checked Date",
                        }
                      }
                      name="checked_date"
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        key="_checked_date"
                        label="Checked Date"
                        messageVariables={
                          Object {
                            "label": "Checked Date",
                          }
                        }
                        name={
                          Array [
                            "checked_date",
                          ]
                        }
                        onReset={[Function]}
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="create-claim_checked_date"
                              label="Checked Date"
                              name="checked_date"
                              prefixCls="ant-form"
                              required={false}
                            >
                              <Col
                                className="ant-form-item-label"
                                span={8}
                              >
                                <div
                                  className="ant-col ant-col-8 ant-form-item-label"
                                  style={Object {}}
                                >
                                  <label
                                    className=""
                                    htmlFor="create-claim_checked_date"
                                    title="Checked Date"
                                  >
                                    Checked Date
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Checked Date"
                              name={
                                Array [
                                  "checked_date",
                                ]
                              }
                              onDomErrorVisibleChange={[Function]}
                              prefixCls="ant-form"
                              touched={false}
                              validateStatus=""
                              validating={false}
                            >
                              <Col
                                className="ant-form-item-control"
                                span={16}
                              >
                                <div
                                  className="ant-col ant-col-16 ant-form-item-control"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={1}
                                      >
                                        <Picker
                                          id="create-claim_checked_date"
                                          onChange={[Function]}
                                        >
                                          <LocaleReceiver
                                            componentName="DatePicker"
                                            defaultLocale={[Function]}
                                          >
                                            <Picker
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              components={
                                                Object {
                                                  "button": [Function],
                                                  "rangeItem": [Function],
                                                }
                                              }
                                              generateConfig={
                                                Object {
                                                  "addDate": [Function],
                                                  "addMonth": [Function],
                                                  "addYear": [Function],
                                                  "getDate": [Function],
                                                  "getHour": [Function],
                                                  "getMinute": [Function],
                                                  "getMonth": [Function],
                                                  "getNow": [Function],
                                                  "getSecond": [Function],
                                                  "getWeekDay": [Function],
                                                  "getYear": [Function],
                                                  "isAfter": [Function],
                                                  "isValidate": [Function],
                                                  "locale": Object {
                                                    "format": [Function],
                                                    "getShortMonths": [Function],
                                                    "getShortWeekDays": [Function],
                                                    "getWeek": [Function],
                                                    "getWeekFirstDay": [Function],
                                                    "parse": [Function],
                                                  },
                                                  "setDate": [Function],
                                                  "setHour": [Function],
                                                  "setMinute": [Function],
                                                  "setMonth": [Function],
                                                  "setSecond": [Function],
                                                  "setYear": [Function],
                                                }
                                              }
                                              id="create-claim_checked_date"
                                              locale={
                                                Object {
                                                  "backToToday": "Back to today",
                                                  "clear": "Clear",
                                                  "dateFormat": "M/D/YYYY",
                                                  "dateSelect": "select date",
                                                  "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                  "dayFormat": "D",
                                                  "decadeSelect": "Choose a decade",
                                                  "locale": "en_US",
                                                  "month": "Month",
                                                  "monthBeforeYear": true,
                                                  "monthPlaceholder": "Select month",
                                                  "monthSelect": "Choose a month",
                                                  "nextCentury": "Next century",
                                                  "nextDecade": "Next decade",
                                                  "nextMonth": "Next month (PageDown)",
                                                  "nextYear": "Next year (Control + right)",
                                                  "now": "Now",
                                                  "ok": "Ok",
                                                  "placeholder": "Select date",
                                                  "previousCentury": "Last century",
                                                  "previousDecade": "Last decade",
                                                  "previousMonth": "Previous month (PageUp)",
                                                  "previousYear": "Last year (Control + left)",
                                                  "quarterPlaceholder": "Select quarter",
                                                  "rangeMonthPlaceholder": Array [
                                                    "Start month",
                                                    "End month",
                                                  ],
                                                  "rangePlaceholder": Array [
                                                    "Start date",
                                                    "End date",
                                                  ],
                                                  "rangeWeekPlaceholder": Array [
                                                    "Start week",
                                                    "End week",
                                                  ],
                                                  "rangeYearPlaceholder": Array [
                                                    "Start year",
                                                    "End year",
                                                  ],
                                                  "timeSelect": "select time",
                                                  "today": "Today",
                                                  "weekPlaceholder": "Select week",
                                                  "weekSelect": "Choose a week",
                                                  "year": "Year",
                                                  "yearFormat": "YYYY",
                                                  "yearPlaceholder": "Select year",
                                                  "yearSelect": "Choose a year",
                                                }
                                              }
                                              nextIcon={
                                                <span
                                                  className="ant-picker-next-icon"
                                                />
                                              }
                                              onChange={[Function]}
                                              placeholder="Select date"
                                              prefixCls="ant-picker"
                                              prevIcon={
                                                <span
                                                  className="ant-picker-prev-icon"
                                                />
                                              }
                                              showToday={true}
                                              suffixIcon={<ForwardRef(CalendarOutlined) />}
                                              superNextIcon={
                                                <span
                                                  className="ant-picker-super-next-icon"
                                                />
                                              }
                                              superPrevIcon={
                                                <span
                                                  className="ant-picker-super-prev-icon"
                                                />
                                              }
                                              transitionName="slide-up"
                                            >
                                              <InnerPicker
                                                allowClear={true}
                                                className=""
                                                clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                components={
                                                  Object {
                                                    "button": [Function],
                                                    "rangeItem": [Function],
                                                  }
                                                }
                                                generateConfig={
                                                  Object {
                                                    "addDate": [Function],
                                                    "addMonth": [Function],
                                                    "addYear": [Function],
                                                    "getDate": [Function],
                                                    "getHour": [Function],
                                                    "getMinute": [Function],
                                                    "getMonth": [Function],
                                                    "getNow": [Function],
                                                    "getSecond": [Function],
                                                    "getWeekDay": [Function],
                                                    "getYear": [Function],
                                                    "isAfter": [Function],
                                                    "isValidate": [Function],
                                                    "locale": Object {
                                                      "format": [Function],
                                                      "getShortMonths": [Function],
                                                      "getShortWeekDays": [Function],
                                                      "getWeek": [Function],
                                                      "getWeekFirstDay": [Function],
                                                      "parse": [Function],
                                                    },
                                                    "setDate": [Function],
                                                    "setHour": [Function],
                                                    "setMinute": [Function],
                                                    "setMonth": [Function],
                                                    "setSecond": [Function],
                                                    "setYear": [Function],
                                                  }
                                                }
                                                id="create-claim_checked_date"
                                                locale={
                                                  Object {
                                                    "backToToday": "Back to today",
                                                    "clear": "Clear",
                                                    "dateFormat": "M/D/YYYY",
                                                    "dateSelect": "select date",
                                                    "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                    "dayFormat": "D",
                                                    "decadeSelect": "Choose a decade",
                                                    "locale": "en_US",
                                                    "month": "Month",
                                                    "monthBeforeYear": true,
                                                    "monthPlaceholder": "Select month",
                                                    "monthSelect": "Choose a month",
                                                    "nextCentury": "Next century",
                                                    "nextDecade": "Next decade",
                                                    "nextMonth": "Next month (PageDown)",
                                                    "nextYear": "Next year (Control + right)",
                                                    "now": "Now",
                                                    "ok": "Ok",
                                                    "placeholder": "Select date",
                                                    "previousCentury": "Last century",
                                                    "previousDecade": "Last decade",
                                                    "previousMonth": "Previous month (PageUp)",
                                                    "previousYear": "Last year (Control + left)",
                                                    "quarterPlaceholder": "Select quarter",
                                                    "rangeMonthPlaceholder": Array [
                                                      "Start month",
                                                      "End month",
                                                    ],
                                                    "rangePlaceholder": Array [
                                                      "Start date",
                                                      "End date",
                                                    ],
                                                    "rangeWeekPlaceholder": Array [
                                                      "Start week",
                                                      "End week",
                                                    ],
                                                    "rangeYearPlaceholder": Array [
                                                      "Start year",
                                                      "End year",
                                                    ],
                                                    "timeSelect": "select time",
                                                    "today": "Today",
                                                    "weekPlaceholder": "Select week",
                                                    "weekSelect": "Choose a week",
                                                    "year": "Year",
                                                    "yearFormat": "YYYY",
                                                    "yearPlaceholder": "Select year",
                                                    "yearSelect": "Choose a year",
                                                  }
                                                }
                                                nextIcon={
                                                  <span
                                                    className="ant-picker-next-icon"
                                                  />
                                                }
                                                onChange={[Function]}
                                                pickerRef={
                                                  Object {
                                                    "current": Object {
                                                      "blur": [Function],
                                                      "focus": [Function],
                                                    },
                                                  }
                                                }
                                                placeholder="Select date"
                                                prefixCls="ant-picker"
                                                prevIcon={
                                                  <span
                                                    className="ant-picker-prev-icon"
                                                  />
                                                }
                                                showToday={true}
                                                suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                superNextIcon={
                                                  <span
                                                    className="ant-picker-super-next-icon"
                                                  />
                                                }
                                                superPrevIcon={
                                                  <span
                                                    className="ant-picker-super-prev-icon"
                                                  />
                                                }
                                                transitionName="slide-up"
                                              >
                                                <PickerTrigger
                                                  popupElement={
                                                    <div
                                                      className="ant-picker-panel-container"
                                                      onMouseDown={[Function]}
                                                    >
                                                      <PickerPanel
                                                        allowClear={true}
                                                        className="ant-picker-panel-focused"
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        components={
                                                          Object {
                                                            "button": [Function],
                                                            "rangeItem": [Function],
                                                          }
                                                        }
                                                        generateConfig={
                                                          Object {
                                                            "addDate": [Function],
                                                            "addMonth": [Function],
                                                            "addYear": [Function],
                                                            "getDate": [Function],
                                                            "getHour": [Function],
                                                            "getMinute": [Function],
                                                            "getMonth": [Function],
                                                            "getNow": [Function],
                                                            "getSecond": [Function],
                                                            "getWeekDay": [Function],
                                                            "getYear": [Function],
                                                            "isAfter": [Function],
                                                            "isValidate": [Function],
                                                            "locale": Object {
                                                              "format": [Function],
                                                              "getShortMonths": [Function],
                                                              "getShortWeekDays": [Function],
                                                              "getWeek": [Function],
                                                              "getWeekFirstDay": [Function],
                                                              "parse": [Function],
                                                            },
                                                            "setDate": [Function],
                                                            "setHour": [Function],
                                                            "setMinute": [Function],
                                                            "setMonth": [Function],
                                                            "setSecond": [Function],
                                                            "setYear": [Function],
                                                          }
                                                        }
                                                        id="create-claim_checked_date"
                                                        locale={
                                                          Object {
                                                            "backToToday": "Back to today",
                                                            "clear": "Clear",
                                                            "dateFormat": "M/D/YYYY",
                                                            "dateSelect": "select date",
                                                            "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                            "dayFormat": "D",
                                                            "decadeSelect": "Choose a decade",
                                                            "locale": "en_US",
                                                            "month": "Month",
                                                            "monthBeforeYear": true,
                                                            "monthPlaceholder": "Select month",
                                                            "monthSelect": "Choose a month",
                                                            "nextCentury": "Next century",
                                                            "nextDecade": "Next decade",
                                                            "nextMonth": "Next month (PageDown)",
                                                            "nextYear": "Next year (Control + right)",
                                                            "now": "Now",
                                                            "ok": "Ok",
                                                            "placeholder": "Select date",
                                                            "previousCentury": "Last century",
                                                            "previousDecade": "Last decade",
                                                            "previousMonth": "Previous month (PageUp)",
                                                            "previousYear": "Last year (Control + left)",
                                                            "quarterPlaceholder": "Select quarter",
                                                            "rangeMonthPlaceholder": Array [
                                                              "Start month",
                                                              "End month",
                                                            ],
                                                            "rangePlaceholder": Array [
                                                              "Start date",
                                                              "End date",
                                                            ],
                                                            "rangeWeekPlaceholder": Array [
                                                              "Start week",
                                                              "End week",
                                                            ],
                                                            "rangeYearPlaceholder": Array [
                                                              "Start year",
                                                              "End year",
                                                            ],
                                                            "timeSelect": "select time",
                                                            "today": "Today",
                                                            "weekPlaceholder": "Select week",
                                                            "weekSelect": "Choose a week",
                                                            "year": "Year",
                                                            "yearFormat": "YYYY",
                                                            "yearPlaceholder": "Select year",
                                                            "yearSelect": "Choose a year",
                                                          }
                                                        }
                                                        nextIcon={
                                                          <span
                                                            className="ant-picker-next-icon"
                                                          />
                                                        }
                                                        onChange={[Function]}
                                                        pickerRef={
                                                          Object {
                                                            "current": Object {
                                                              "blur": [Function],
                                                              "focus": [Function],
                                                            },
                                                          }
                                                        }
                                                        placeholder="Select date"
                                                        prefixCls="ant-picker"
                                                        prevIcon={
                                                          <span
                                                            className="ant-picker-prev-icon"
                                                          />
                                                        }
                                                        showToday={true}
                                                        suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                        superNextIcon={
                                                          <span
                                                            className="ant-picker-super-next-icon"
                                                          />
                                                        }
                                                        superPrevIcon={
                                                          <span
                                                            className="ant-picker-super-prev-icon"
                                                          />
                                                        }
                                                        tabIndex={-1}
                                                        transitionName="slide-up"
                                                        value={null}
                                                      />
                                                    </div>
                                                  }
                                                  popupPlacement="bottomLeft"
                                                  prefixCls="ant-picker"
                                                  transitionName="slide-up"
                                                  visible={false}
                                                >
                                                  <Trigger
                                                    action={Array []}
                                                    afterPopupVisibleChange={[Function]}
                                                    autoDestroy={false}
                                                    blurDelay={0.15}
                                                    builtinPlacements={
                                                      Object {
                                                        "bottomLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 1,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tl",
                                                            "bl",
                                                          ],
                                                        },
                                                        "bottomRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 1,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tr",
                                                            "br",
                                                          ],
                                                        },
                                                        "topLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "bl",
                                                            "tl",
                                                          ],
                                                        },
                                                        "topRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "br",
                                                            "tr",
                                                          ],
                                                        },
                                                      }
                                                    }
                                                    defaultPopupVisible={false}
                                                    destroyPopupOnHide={false}
                                                    focusDelay={0}
                                                    getDocument={[Function]}
                                                    getPopupClassNameFromAlign={[Function]}
                                                    hideAction={Array []}
                                                    mask={false}
                                                    maskClosable={true}
                                                    mouseEnterDelay={0}
                                                    mouseLeaveDelay={0.1}
                                                    onPopupAlign={[Function]}
                                                    onPopupVisibleChange={[Function]}
                                                    popup={
                                                      <div
                                                        className="ant-picker-panel-container"
                                                        onMouseDown={[Function]}
                                                      >
                                                        <PickerPanel
                                                          allowClear={true}
                                                          className="ant-picker-panel-focused"
                                                          clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                          components={
                                                            Object {
                                                              "button": [Function],
                                                              "rangeItem": [Function],
                                                            }
                                                          }
                                                          generateConfig={
                                                            Object {
                                                              "addDate": [Function],
                                                              "addMonth": [Function],
                                                              "addYear": [Function],
                                                              "getDate": [Function],
                                                              "getHour": [Function],
                                                              "getMinute": [Function],
                                                              "getMonth": [Function],
                                                              "getNow": [Function],
                                                              "getSecond": [Function],
                                                              "getWeekDay": [Function],
                                                              "getYear": [Function],
                                                              "isAfter": [Function],
                                                              "isValidate": [Function],
                                                              "locale": Object {
                                                                "format": [Function],
                                                                "getShortMonths": [Function],
                                                                "getShortWeekDays": [Function],
                                                                "getWeek": [Function],
                                                                "getWeekFirstDay": [Function],
                                                                "parse": [Function],
                                                              },
                                                              "setDate": [Function],
                                                              "setHour": [Function],
                                                              "setMinute": [Function],
                                                              "setMonth": [Function],
                                                              "setSecond": [Function],
                                                              "setYear": [Function],
                                                            }
                                                          }
                                                          id="create-claim_checked_date"
                                                          locale={
                                                            Object {
                                                              "backToToday": "Back to today",
                                                              "clear": "Clear",
                                                              "dateFormat": "M/D/YYYY",
                                                              "dateSelect": "select date",
                                                              "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                              "dayFormat": "D",
                                                              "decadeSelect": "Choose a decade",
                                                              "locale": "en_US",
                                                              "month": "Month",
                                                              "monthBeforeYear": true,
                                                              "monthPlaceholder": "Select month",
                                                              "monthSelect": "Choose a month",
                                                              "nextCentury": "Next century",
                                                              "nextDecade": "Next decade",
                                                              "nextMonth": "Next month (PageDown)",
                                                              "nextYear": "Next year (Control + right)",
                                                              "now": "Now",
                                                              "ok": "Ok",
                                                              "placeholder": "Select date",
                                                              "previousCentury": "Last century",
                                                              "previousDecade": "Last decade",
                                                              "previousMonth": "Previous month (PageUp)",
                                                              "previousYear": "Last year (Control + left)",
                                                              "quarterPlaceholder": "Select quarter",
                                                              "rangeMonthPlaceholder": Array [
                                                                "Start month",
                                                                "End month",
                                                              ],
                                                              "rangePlaceholder": Array [
                                                                "Start date",
                                                                "End date",
                                                              ],
                                                              "rangeWeekPlaceholder": Array [
                                                                "Start week",
                                                                "End week",
                                                              ],
                                                              "rangeYearPlaceholder": Array [
                                                                "Start year",
                                                                "End year",
                                                              ],
                                                              "timeSelect": "select time",
                                                              "today": "Today",
                                                              "weekPlaceholder": "Select week",
                                                              "weekSelect": "Choose a week",
                                                              "year": "Year",
                                                              "yearFormat": "YYYY",
                                                              "yearPlaceholder": "Select year",
                                                              "yearSelect": "Choose a year",
                                                            }
                                                          }
                                                          nextIcon={
                                                            <span
                                                              className="ant-picker-next-icon"
                                                            />
                                                          }
                                                          onChange={[Function]}
                                                          pickerRef={
                                                            Object {
                                                              "current": Object {
                                                                "blur": [Function],
                                                                "focus": [Function],
                                                              },
                                                            }
                                                          }
                                                          placeholder="Select date"
                                                          prefixCls="ant-picker"
                                                          prevIcon={
                                                            <span
                                                              className="ant-picker-prev-icon"
                                                            />
                                                          }
                                                          showToday={true}
                                                          suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                          superNextIcon={
                                                            <span
                                                              className="ant-picker-super-next-icon"
                                                            />
                                                          }
                                                          superPrevIcon={
                                                            <span
                                                              className="ant-picker-super-prev-icon"
                                                            />
                                                          }
                                                          tabIndex={-1}
                                                          transitionName="slide-up"
                                                          value={null}
                                                        />
                                                      </div>
                                                    }
                                                    popupAlign={Object {}}
                                                    popupClassName=""
                                                    popupPlacement="bottomLeft"
                                                    popupStyle={Object {}}
                                                    popupTransitionName="slide-up"
                                                    popupVisible={false}
                                                    prefixCls="ant-picker-dropdown"
                                                    showAction={Array []}
                                                  >
                                                    <div
                                                      className="ant-picker"
                                                      key="trigger"
                                                      onMouseUp={[Function]}
                                                    >
                                                      <div
                                                        className="ant-picker-input"
                                                      >
                                                        <input
                                                          autoComplete="off"
                                                          id="create-claim_checked_date"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          onMouseDown={[Function]}
                                                          placeholder="Select date"
                                                          readOnly={true}
                                                          size={12}
                                                          title=""
                                                          value=""
                                                        />
                                                        <span
                                                          className="ant-picker-suffix"
                                                        >
                                                          <ForwardRef(CalendarOutlined)>
                                                            <AntdIcon
                                                              icon={
                                                                Object {
                                                                  "icon": Object {
                                                                    "attrs": Object {
                                                                      "focusable": "false",
                                                                      "viewBox": "64 64 896 896",
                                                                    },
                                                                    "children": Array [
                                                                      Object {
                                                                        "attrs": Object {
                                                                          "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                        },
                                                                        "tag": "path",
                                                                      },
                                                                    ],
                                                                    "tag": "svg",
                                                                  },
                                                                  "name": "calendar",
                                                                  "theme": "outlined",
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                aria-label="calendar"
                                                                className="anticon anticon-calendar"
                                                                role="img"
                                                              >
                                                                <IconReact
                                                                  className=""
                                                                  icon={
                                                                    Object {
                                                                      "icon": Object {
                                                                        "attrs": Object {
                                                                          "focusable": "false",
                                                                          "viewBox": "64 64 896 896",
                                                                        },
                                                                        "children": Array [
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                        ],
                                                                        "tag": "svg",
                                                                      },
                                                                      "name": "calendar",
                                                                      "theme": "outlined",
                                                                    }
                                                                  }
                                                                >
                                                                  <svg
                                                                    aria-hidden="true"
                                                                    className=""
                                                                    data-icon="calendar"
                                                                    fill="currentColor"
                                                                    focusable="false"
                                                                    height="1em"
                                                                    key="svg-calendar"
                                                                    viewBox="64 64 896 896"
                                                                    width="1em"
                                                                  >
                                                                    <path
                                                                      d="M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z"
                                                                      key="svg-calendar-svg-0"
                                                                    />
                                                                  </svg>
                                                                </IconReact>
                                                              </span>
                                                            </AntdIcon>
                                                          </ForwardRef(CalendarOutlined)>
                                                        </span>
                                                      </div>
                                                    </div>
                                                  </Trigger>
                                                </PickerTrigger>
                                              </InnerPicker>
                                            </Picker>
                                          </LocaleReceiver>
                                        </Picker>
                                      </Component>
                                    </div>
                                  </div>
                                  <ForwardRef
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <CSSMotion
                                      internalRef={null}
                                      motionAppear={true}
                                      motionDeadline={500}
                                      motionEnter={true}
                                      motionLeave={true}
                                      motionName="show-help"
                                      onLeaveEnd={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    />
                                  </ForwardRef>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                  <FormItem
                    label="Claim Sources"
                    name="claim_sources"
                  >
                    <WrapperField
                      label="Claim Sources"
                      messageVariables={
                        Object {
                          "label": "Claim Sources",
                        }
                      }
                      name="claim_sources"
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        key="_claim_sources"
                        label="Claim Sources"
                        messageVariables={
                          Object {
                            "label": "Claim Sources",
                          }
                        }
                        name={
                          Array [
                            "claim_sources",
                          ]
                        }
                        onReset={[Function]}
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="create-claim_claim_sources"
                              label="Claim Sources"
                              name="claim_sources"
                              prefixCls="ant-form"
                              required={false}
                            >
                              <Col
                                className="ant-form-item-label"
                                span={8}
                              >
                                <div
                                  className="ant-col ant-col-8 ant-form-item-label"
                                  style={Object {}}
                                >
                                  <label
                                    className=""
                                    htmlFor="create-claim_claim_sources"
                                    title="Claim Sources"
                                  >
                                    Claim Sources
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Claim Sources"
                              name={
                                Array [
                                  "claim_sources",
                                ]
                              }
                              onDomErrorVisibleChange={[Function]}
                              prefixCls="ant-form"
                              touched={false}
                              validateStatus=""
                              validating={false}
                            >
                              <Col
                                className="ant-form-item-control"
                                span={16}
                              >
                                <div
                                  className="ant-col ant-col-16 ant-form-item-control"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={1}
                                      >
                                        <TextArea
                                          id="create-claim_claim_sources"
                                          onChange={[Function]}
                                        >
                                          <ClearableLabeledInput
                                            bordered={true}
                                            element={
                                              <TextArea
                                                className=""
                                                id="create-claim_claim_sources"
                                                onChange={[Function]}
                                                prefixCls="ant-input"
                                              />
                                            }
                                            handleReset={[Function]}
                                            id="create-claim_claim_sources"
                                            inputType="text"
                                            onChange={[Function]}
                                            prefixCls="ant-input"
                                            triggerFocus={[Function]}
                                            value=""
                                          >
                                            <TextArea
                                              className=""
                                              id="create-claim_claim_sources"
                                              onChange={[Function]}
                                              prefixCls="ant-input"
                                              value=""
                                            >
                                              <ResizableTextArea
                                                className=""
                                                id="create-claim_claim_sources"
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                prefixCls="ant-input"
                                                value=""
                                              >
                                                <ResizeObserver
                                                  disabled={true}
                                                  onResize={[Function]}
                                                >
                                                  <textarea
                                                    className="ant-input"
                                                    id="create-claim_claim_sources"
                                                    onChange={[Function]}
                                                    onKeyDown={[Function]}
                                                    style={Object {}}
                                                    value=""
                                                  />
                                                </ResizeObserver>
                                              </ResizableTextArea>
                                            </TextArea>
                                          </ClearableLabeledInput>
                                        </TextArea>
                                      </Component>
                                    </div>
                                  </div>
                                  <ForwardRef
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <CSSMotion
                                      internalRef={null}
                                      motionAppear={true}
                                      motionDeadline={500}
                                      motionEnter={true}
                                      motionLeave={true}
                                      motionName="show-help"
                                      onLeaveEnd={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    />
                                  </ForwardRef>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                  <FormItem
                    label="Review"
                    name="review"
                  >
                    <WrapperField
                      label="Review"
                      messageVariables={
                        Object {
                          "label": "Review",
                        }
                      }
                      name="review"
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        key="_review"
                        label="Review"
                        messageVariables={
                          Object {
                            "label": "Review",
                          }
                        }
                        name={
                          Array [
                            "review",
                          ]
                        }
                        onReset={[Function]}
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="create-claim_review"
                              label="Review"
                              name="review"
                              prefixCls="ant-form"
                              required={false}
                            >
                              <Col
                                className="ant-form-item-label"
                                span={8}
                              >
                                <div
                                  className="ant-col ant-col-8 ant-form-item-label"
                                  style={Object {}}
                                >
                                  <label
                                    className=""
                                    htmlFor="create-claim_review"
                                    title="Review"
                                  >
                                    Review
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Review"
                              name={
                                Array [
                                  "review",
                                ]
                              }
                              onDomErrorVisibleChange={[Function]}
                              prefixCls="ant-form"
                              touched={false}
                              validateStatus=""
                              validating={false}
                            >
                              <Col
                                className="ant-form-item-control"
                                span={16}
                              >
                                <div
                                  className="ant-col ant-col-16 ant-form-item-control"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={1}
                                      >
                                        <TextArea
                                          id="create-claim_review"
                                          onChange={[Function]}
                                        >
                                          <ClearableLabeledInput
                                            bordered={true}
                                            element={
                                              <TextArea
                                                className=""
                                                id="create-claim_review"
                                                onChange={[Function]}
                                                prefixCls="ant-input"
                                              />
                                            }
                                            handleReset={[Function]}
                                            id="create-claim_review"
                                            inputType="text"
                                            onChange={[Function]}
                                            prefixCls="ant-input"
                                            triggerFocus={[Function]}
                                            value=""
                                          >
                                            <TextArea
                                              className=""
                                              id="create-claim_review"
                                              onChange={[Function]}
                                              prefixCls="ant-input"
                                              value=""
                                            >
                                              <ResizableTextArea
                                                className=""
                                                id="create-claim_review"
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                prefixCls="ant-input"
                                                value=""
                                              >
                                                <ResizeObserver
                                                  disabled={true}
                                                  onResize={[Function]}
                                                >
                                                  <textarea
                                                    className="ant-input"
                                                    id="create-claim_review"
                                                    onChange={[Function]}
                                                    onKeyDown={[Function]}
                                                    style={Object {}}
                                                    value=""
                                                  />
                                                </ResizeObserver>
                                              </ResizableTextArea>
                                            </TextArea>
                                          </ClearableLabeledInput>
                                        </TextArea>
                                      </Component>
                                    </div>
                                  </div>
                                  <ForwardRef
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <CSSMotion
                                      internalRef={null}
                                      motionAppear={true}
                                      motionDeadline={500}
                                      motionEnter={true}
                                      motionLeave={true}
                                      motionName="show-help"
                                      onLeaveEnd={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    />
                                  </ForwardRef>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                  <FormItem
                    label="Review Tagline"
                    name="review_tag_line"
                  >
                    <WrapperField
                      label="Review Tagline"
                      messageVariables={
                        Object {
                          "label": "Review Tagline",
                        }
                      }
                      name="review_tag_line"
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        key="_review_tag_line"
                        label="Review Tagline"
                        messageVariables={
                          Object {
                            "label": "Review Tagline",
                          }
                        }
                        name={
                          Array [
                            "review_tag_line",
                          ]
                        }
                        onReset={[Function]}
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="create-claim_review_tag_line"
                              label="Review Tagline"
                              name="review_tag_line"
                              prefixCls="ant-form"
                              required={false}
                            >
                              <Col
                                className="ant-form-item-label"
                                span={8}
                              >
                                <div
                                  className="ant-col ant-col-8 ant-form-item-label"
                                  style={Object {}}
                                >
                                  <label
                                    className=""
                                    htmlFor="create-claim_review_tag_line"
                                    title="Review Tagline"
                                  >
                                    Review Tagline
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Review Tagline"
                              name={
                                Array [
                                  "review_tag_line",
                                ]
                              }
                              onDomErrorVisibleChange={[Function]}
                              prefixCls="ant-form"
                              touched={false}
                              validateStatus=""
                              validating={false}
                            >
                              <Col
                                className="ant-form-item-control"
                                span={16}
                              >
                                <div
                                  className="ant-col ant-col-16 ant-form-item-control"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={1}
                                      >
                                        <TextArea
                                          id="create-claim_review_tag_line"
                                          onChange={[Function]}
                                        >
                                          <ClearableLabeledInput
                                            bordered={true}
                                            element={
                                              <TextArea
                                                className=""
                                                id="create-claim_review_tag_line"
                                                onChange={[Function]}
                                                prefixCls="ant-input"
                                              />
                                            }
                                            handleReset={[Function]}
                                            id="create-claim_review_tag_line"
                                            inputType="text"
                                            onChange={[Function]}
                                            prefixCls="ant-input"
                                            triggerFocus={[Function]}
                                            value=""
                                          >
                                            <TextArea
                                              className=""
                                              id="create-claim_review_tag_line"
                                              onChange={[Function]}
                                              prefixCls="ant-input"
                                              value=""
                                            >
                                              <ResizableTextArea
                                                className=""
                                                id="create-claim_review_tag_line"
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                prefixCls="ant-input"
                                                value=""
                                              >
                                                <ResizeObserver
                                                  disabled={true}
                                                  onResize={[Function]}
                                                >
                                                  <textarea
                                                    className="ant-input"
                                                    id="create-claim_review_tag_line"
                                                    onChange={[Function]}
                                                    onKeyDown={[Function]}
                                                    style={Object {}}
                                                    value=""
                                                  />
                                                </ResizeObserver>
                                              </ResizableTextArea>
                                            </TextArea>
                                          </ClearableLabeledInput>
                                        </TextArea>
                                      </Component>
                                    </div>
                                  </div>
                                  <ForwardRef
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <CSSMotion
                                      internalRef={null}
                                      motionAppear={true}
                                      motionDeadline={500}
                                      motionEnter={true}
                                      motionLeave={true}
                                      motionName="show-help"
                                      onLeaveEnd={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    />
                                  </ForwardRef>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                  <FormItem
                    label="Review Sources"
                    name="review_sources"
                  >
                    <WrapperField
                      label="Review Sources"
                      messageVariables={
                        Object {
                          "label": "Review Sources",
                        }
                      }
                      name="review_sources"
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        key="_review_sources"
                        label="Review Sources"
                        messageVariables={
                          Object {
                            "label": "Review Sources",
                          }
                        }
                        name={
                          Array [
                            "review_sources",
                          ]
                        }
                        onReset={[Function]}
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="create-claim_review_sources"
                              label="Review Sources"
                              name="review_sources"
                              prefixCls="ant-form"
                              required={false}
                            >
                              <Col
                                className="ant-form-item-label"
                                span={8}
                              >
                                <div
                                  className="ant-col ant-col-8 ant-form-item-label"
                                  style={Object {}}
                                >
                                  <label
                                    className=""
                                    htmlFor="create-claim_review_sources"
                                    title="Review Sources"
                                  >
                                    Review Sources
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Review Sources"
                              name={
                                Array [
                                  "review_sources",
                                ]
                              }
                              onDomErrorVisibleChange={[Function]}
                              prefixCls="ant-form"
                              touched={false}
                              validateStatus=""
                              validating={false}
                            >
                              <Col
                                className="ant-form-item-control"
                                span={16}
                              >
                                <div
                                  className="ant-col ant-col-16 ant-form-item-control"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={1}
                                      >
                                        <TextArea
                                          id="create-claim_review_sources"
                                          onChange={[Function]}
                                        >
                                          <ClearableLabeledInput
                                            bordered={true}
                                            element={
                                              <TextArea
                                                className=""
                                                id="create-claim_review_sources"
                                                onChange={[Function]}
                                                prefixCls="ant-input"
                                              />
                                            }
                                            handleReset={[Function]}
                                            id="create-claim_review_sources"
                                            inputType="text"
                                            onChange={[Function]}
                                            prefixCls="ant-input"
                                            triggerFocus={[Function]}
                                            value=""
                                          >
                                            <TextArea
                                              className=""
                                              id="create-claim_review_sources"
                                              onChange={[Function]}
                                              prefixCls="ant-input"
                                              value=""
                                            >
                                              <ResizableTextArea
                                                className=""
                                                id="create-claim_review_sources"
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                prefixCls="ant-input"
                                                value=""
                                              >
                                                <ResizeObserver
                                                  disabled={true}
                                                  onResize={[Function]}
                                                >
                                                  <textarea
                                                    className="ant-input"
                                                    id="create-claim_review_sources"
                                                    onChange={[Function]}
                                                    onKeyDown={[Function]}
                                                    style={Object {}}
                                                    value=""
                                                  />
                                                </ResizeObserver>
                                              </ResizableTextArea>
                                            </TextArea>
                                          </ClearableLabeledInput>
                                        </TextArea>
                                      </Component>
                                    </div>
                                  </div>
                                  <ForwardRef
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <CSSMotion
                                      internalRef={null}
                                      motionAppear={true}
                                      motionDeadline={500}
                                      motionEnter={true}
                                      motionLeave={true}
                                      motionName="show-help"
                                      onLeaveEnd={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    />
                                  </ForwardRef>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                  <FormItem>
                    <Row
                      className="ant-form-item"
                      key="row"
                    >
                      <div
                        className="ant-row ant-form-item"
                        style={Object {}}
                      >
                        <FormItemLabel
                          prefixCls="ant-form"
                        />
                        <FormItemInput
                          errors={Array []}
                          onDomErrorVisibleChange={[Function]}
                          prefixCls="ant-form"
                          validateStatus=""
                        >
                          <Col
                            className="ant-form-item-control"
                            span={16}
                          >
                            <div
                              className="ant-col ant-col-16 ant-form-item-control"
                              style={Object {}}
                            >
                              <div
                                className="ant-form-item-control-input"
                              >
                                <div
                                  className="ant-form-item-control-input-content"
                                >
                                  <Button
                                    block={false}
                                    ghost={false}
                                    htmlType="submit"
                                    loading={false}
                                    type="primary"
                                  >
                                    <Wave>
                                      <button
                                        className="ant-btn ant-btn-primary"
                                        onClick={[Function]}
                                        type="submit"
                                      >
                                        <LoadingIcon
                                          existIcon={false}
                                          loading={false}
                                          prefixCls="ant-btn"
                                        >
                                          <ForwardRef
                                            motionName="ant-btn-loading-icon-motion"
                                            onAppearActive={[Function]}
                                            onAppearStart={[Function]}
                                            onEnterActive={[Function]}
                                            onEnterStart={[Function]}
                                            onLeaveActive={[Function]}
                                            onLeaveStart={[Function]}
                                            removeOnLeave={true}
                                            visible={false}
                                          >
                                            <CSSMotion
                                              internalRef={null}
                                              motionAppear={true}
                                              motionEnter={true}
                                              motionLeave={true}
                                              motionName="ant-btn-loading-icon-motion"
                                              onAppearActive={[Function]}
                                              onAppearStart={[Function]}
                                              onEnterActive={[Function]}
                                              onEnterStart={[Function]}
                                              onLeaveActive={[Function]}
                                              onLeaveStart={[Function]}
                                              removeOnLeave={true}
                                              visible={false}
                                            />
                                          </ForwardRef>
                                        </LoadingIcon>
                                        <span
                                          key=".0"
                                        >
                                          Submit
                                        </span>
                                      </button>
                                    </Wave>
                                  </Button>
                                </div>
                              </div>
                              <ForwardRef
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <CSSMotion
                                  internalRef={null}
                                  motionAppear={true}
                                  motionDeadline={500}
                                  motionEnter={true}
                                  motionLeave={true}
                                  motionName="show-help"
                                  onLeaveEnd={[Function]}
                                  removeOnLeave={true}
                                  visible={false}
                                />
                              </ForwardRef>
                            </div>
                          </Col>
                        </FormItemInput>
                      </div>
                    </Row>
                  </FormItem>
                </div>
                <FormItem>
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        prefixCls="ant-form"
                      />
                      <FormItemInput
                        errors={Array []}
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        validateStatus=""
                      >
                        <Col
                          className="ant-form-item-control"
                          span={16}
                        >
                          <div
                            className="ant-col ant-col-16 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <Button
                                  block={false}
                                  disabled={true}
                                  ghost={false}
                                  htmlType="button"
                                  loading={false}
                                  onClick={[Function]}
                                >
                                  <Wave>
                                    <button
                                      className="ant-btn"
                                      disabled={true}
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <LoadingIcon
                                        existIcon={false}
                                        loading={false}
                                        prefixCls="ant-btn"
                                      >
                                        <ForwardRef
                                          motionName="ant-btn-loading-icon-motion"
                                          onAppearActive={[Function]}
                                          onAppearStart={[Function]}
                                          onEnterActive={[Function]}
                                          onEnterStart={[Function]}
                                          onLeaveActive={[Function]}
                                          onLeaveStart={[Function]}
                                          removeOnLeave={true}
                                          visible={false}
                                        >
                                          <CSSMotion
                                            internalRef={null}
                                            motionAppear={true}
                                            motionEnter={true}
                                            motionLeave={true}
                                            motionName="ant-btn-loading-icon-motion"
                                            onAppearActive={[Function]}
                                            onAppearStart={[Function]}
                                            onEnterActive={[Function]}
                                            onEnterStart={[Function]}
                                            onLeaveActive={[Function]}
                                            onLeaveStart={[Function]}
                                            removeOnLeave={true}
                                            visible={false}
                                          />
                                        </ForwardRef>
                                      </LoadingIcon>
                                      <span
                                        key=".0"
                                      >
                                        Back
                                      </span>
                                    </button>
                                  </Wave>
                                </Button>
                                <Button
                                  block={false}
                                  disabled={false}
                                  ghost={false}
                                  htmlType="button"
                                  loading={false}
                                  onClick={[Function]}
                                >
                                  <Wave>
                                    <button
                                      className="ant-btn"
                                      disabled={false}
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <LoadingIcon
                                        existIcon={false}
                                        loading={false}
                                        prefixCls="ant-btn"
                                      >
                                        <ForwardRef
                                          motionName="ant-btn-loading-icon-motion"
                                          onAppearActive={[Function]}
                                          onAppearStart={[Function]}
                                          onEnterActive={[Function]}
                                          onEnterStart={[Function]}
                                          onLeaveActive={[Function]}
                                          onLeaveStart={[Function]}
                                          removeOnLeave={true}
                                          visible={false}
                                        >
                                          <CSSMotion
                                            internalRef={null}
                                            motionAppear={true}
                                            motionEnter={true}
                                            motionLeave={true}
                                            motionName="ant-btn-loading-icon-motion"
                                            onAppearActive={[Function]}
                                            onAppearStart={[Function]}
                                            onEnterActive={[Function]}
                                            onEnterStart={[Function]}
                                            onLeaveActive={[Function]}
                                            onLeaveStart={[Function]}
                                            removeOnLeave={true}
                                            visible={false}
                                          />
                                        </ForwardRef>
                                      </LoadingIcon>
                                      <span
                                        key=".0"
                                      >
                                        Next
                                      </span>
                                    </button>
                                  </Wave>
                                </Button>
                              </div>
                            </div>
                            <ForwardRef
                              motionAppear={true}
                              motionDeadline={500}
                              motionName="show-help"
                              onLeaveEnd={[Function]}
                              removeOnLeave={true}
                              visible={false}
                            >
                              <CSSMotion
                                internalRef={null}
                                motionAppear={true}
                                motionDeadline={500}
                                motionEnter={true}
                                motionLeave={true}
                                motionName="show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              />
                            </ForwardRef>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </FormItem>
              </form>
            </ForwardRef(Form)>
          </SizeContextProvider>
        </ForwardRef(InternalForm)>
      </div>
    </ClaimForm>
  </EditClaim>
</Provider>
`;

exports[`Claims Edit component snapshot testing should match skeleton while loading 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <EditClaim>
    <Skeleton
      avatar={false}
      paragraph={true}
      title={true}
    >
      <div
        className="ant-skeleton"
      >
        <div
          className="ant-skeleton-content"
        >
          <Title
            prefixCls="ant-skeleton-title"
            width="38%"
          >
            <h3
              className="ant-skeleton-title"
              style={
                Object {
                  "width": "38%",
                }
              }
            />
          </Title>
          <Paragraph
            prefixCls="ant-skeleton-paragraph"
            rows={3}
            width="61%"
          >
            <ul
              className="ant-skeleton-paragraph"
            >
              <li
                key="0"
                style={
                  Object {
                    "width": undefined,
                  }
                }
              />
              <li
                key="1"
                style={
                  Object {
                    "width": undefined,
                  }
                }
              />
              <li
                key="2"
                style={
                  Object {
                    "width": "61%",
                  }
                }
              />
            </ul>
          </Paragraph>
        </div>
      </div>
    </Skeleton>
  </EditClaim>
</Provider>
`;

exports[`Claims Edit component snapshot testing should render the component 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <EditClaim>
    <ClaimForm
      data={
        Object {
          "checked_date": "2020-07-17T10:14:44.251Z",
          "claim_date": "2020-07-17T10:14:44.251Z",
          "claimant_id": 1,
          "created_at": "2020-07-17T10:14:44.251814Z",
          "deleted_at": null,
          "description": "",
          "id": 1,
          "name": "claim-1",
          "rating_id": 1,
          "slug": "claim-1",
          "space_id": 1,
          "updated_at": "2020-07-17T10:14:44.251814Z",
        }
      }
      onCreate={[Function]}
    >
      <div>
        <Steps
          current={0}
          onChange={[Function]}
        >
          <Steps
            className=""
            current={0}
            direction="horizontal"
            iconPrefix="ant"
            icons={
              Object {
                "error": <ForwardRef(CloseOutlined)
                  className="ant-steps-error-icon"
                />,
                "finish": <ForwardRef(CheckOutlined)
                  className="ant-steps-finish-icon"
                />,
              }
            }
            initial={0}
            labelPlacement="horizontal"
            onChange={[Function]}
            prefixCls="ant-steps"
            progressDot={false}
            size=""
            status="process"
            stepIcon={[Function]}
            type="default"
          >
            <div
              className="ant-steps ant-steps-horizontal ant-steps-label-horizontal"
              style={Object {}}
            >
              <Step
                active={true}
                iconPrefix="ant"
                icons={
                  Object {
                    "error": <ForwardRef(CloseOutlined)
                      className="ant-steps-error-icon"
                    />,
                    "finish": <ForwardRef(CheckOutlined)
                      className="ant-steps-finish-icon"
                    />,
                  }
                }
                key="0"
                onStepClick={[Function]}
                prefixCls="ant-steps"
                progressDot={false}
                status="process"
                stepIcon={[Function]}
                stepIndex={0}
                stepNumber="1"
                title="Basic"
                wrapperStyle={Object {}}
              >
                <div
                  className="ant-steps-item ant-steps-item-process ant-steps-item-active"
                  style={Object {}}
                >
                  <div
                    className="ant-steps-item-container"
                    onClick={[Function]}
                    role="button"
                    tabIndex={0}
                  >
                    <div
                      className="ant-steps-item-tail"
                    />
                    <div
                      className="ant-steps-item-icon"
                    >
                      <span
                        className="ant-steps-icon"
                      >
                        1
                      </span>
                    </div>
                    <div
                      className="ant-steps-item-content"
                    >
                      <div
                        className="ant-steps-item-title"
                      >
                        Basic
                      </div>
                    </div>
                  </div>
                </div>
              </Step>
              <Step
                active={false}
                iconPrefix="ant"
                icons={
                  Object {
                    "error": <ForwardRef(CloseOutlined)
                      className="ant-steps-error-icon"
                    />,
                    "finish": <ForwardRef(CheckOutlined)
                      className="ant-steps-finish-icon"
                    />,
                  }
                }
                key="1"
                onStepClick={[Function]}
                prefixCls="ant-steps"
                progressDot={false}
                status="wait"
                stepIcon={[Function]}
                stepIndex={1}
                stepNumber="2"
                title="Media"
                wrapperStyle={Object {}}
              >
                <div
                  className="ant-steps-item ant-steps-item-wait"
                  style={Object {}}
                >
                  <div
                    className="ant-steps-item-container"
                    onClick={[Function]}
                    role="button"
                    tabIndex={0}
                  >
                    <div
                      className="ant-steps-item-tail"
                    />
                    <div
                      className="ant-steps-item-icon"
                    >
                      <span
                        className="ant-steps-icon"
                      >
                        2
                      </span>
                    </div>
                    <div
                      className="ant-steps-item-content"
                    >
                      <div
                        className="ant-steps-item-title"
                      >
                        Media
                      </div>
                    </div>
                  </div>
                </div>
              </Step>
            </div>
          </Steps>
        </Steps>
        <ForwardRef(InternalForm)
          form={
            Object {
              "__INTERNAL__": Object {
                "itemRef": [Function],
                "name": "create-claim",
              },
              "getFieldError": [Function],
              "getFieldInstance": [Function],
              "getFieldValue": [Function],
              "getFieldsError": [Function],
              "getFieldsValue": [Function],
              "getInternalHooks": [Function],
              "isFieldTouched": [Function],
              "isFieldValidating": [Function],
              "isFieldsTouched": [Function],
              "isFieldsValidating": [Function],
              "resetFields": [Function],
              "scrollToField": [Function],
              "setFields": [Function],
              "setFieldsValue": [Function],
              "submit": [Function],
              "validateFields": [Function],
            }
          }
          initialValues={
            Object {
              "checked_date": "2020-07-17T10:14:44.251Z",
              "claim_date": "2020-07-17T10:14:44.251Z",
              "claimant_id": 1,
              "created_at": "2020-07-17T10:14:44.251814Z",
              "deleted_at": null,
              "description": "",
              "id": 1,
              "name": "claim-1",
              "rating_id": 1,
              "slug": "claim-1",
              "space_id": 1,
              "updated_at": "2020-07-17T10:14:44.251814Z",
            }
          }
          labelCol={
            Object {
              "span": 8,
            }
          }
          layout="vertical"
          name="create-claim"
          onFinish={[Function]}
          style={
            Object {
              "paddingTop": "24px",
            }
          }
          wrapperCol={
            Object {
              "span": 16,
            }
          }
        >
          <SizeContextProvider>
            <ForwardRef(Form)
              className="ant-form ant-form-vertical"
              form={
                Object {
                  "__INTERNAL__": Object {
                    "itemRef": [Function],
                    "name": "create-claim",
                  },
                  "getFieldError": [Function],
                  "getFieldInstance": [Function],
                  "getFieldValue": [Function],
                  "getFieldsError": [Function],
                  "getFieldsValue": [Function],
                  "getInternalHooks": [Function],
                  "isFieldTouched": [Function],
                  "isFieldValidating": [Function],
                  "isFieldsTouched": [Function],
                  "isFieldsValidating": [Function],
                  "resetFields": [Function],
                  "scrollToField": [Function],
                  "setFields": [Function],
                  "setFieldsValue": [Function],
                  "submit": [Function],
                  "validateFields": [Function],
                }
              }
              id="create-claim"
              initialValues={
                Object {
                  "checked_date": "2020-07-17T10:14:44.251Z",
                  "claim_date": "2020-07-17T10:14:44.251Z",
                  "claimant_id": 1,
                  "created_at": "2020-07-17T10:14:44.251814Z",
                  "deleted_at": null,
                  "description": "",
                  "id": 1,
                  "name": "claim-1",
                  "rating_id": 1,
                  "slug": "claim-1",
                  "space_id": 1,
                  "updated_at": "2020-07-17T10:14:44.251814Z",
                }
              }
              name="create-claim"
              onFinish={[Function]}
              onFinishFailed={[Function]}
              style={
                Object {
                  "paddingTop": "24px",
                }
              }
            >
              <form
                className="ant-form ant-form-vertical"
                id="create-claim"
                onSubmit={[Function]}
                style={
                  Object {
                    "paddingTop": "24px",
                  }
                }
              >
                <div
                  style={
                    Object {
                      "display": "block",
                    }
                  }
                >
                  <FormItem
                    label="Title"
                    name="title"
                    rules={
                      Array [
                        Object {
                          "message": "Please input the title!",
                          "required": true,
                        },
                      ]
                    }
                  >
                    <WrapperField
                      label="Title"
                      messageVariables={
                        Object {
                          "label": "Title",
                        }
                      }
                      name="title"
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please input the title!",
                            "required": true,
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        key="_title"
                        label="Title"
                        messageVariables={
                          Object {
                            "label": "Title",
                          }
                        }
                        name={
                          Array [
                            "title",
                          ]
                        }
                        onReset={[Function]}
                        rules={
                          Array [
                            Object {
                              "message": "Please input the title!",
                              "required": true,
                            },
                          ]
                        }
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="create-claim_title"
                              label="Title"
                              name="title"
                              prefixCls="ant-form"
                              required={true}
                              rules={
                                Array [
                                  Object {
                                    "message": "Please input the title!",
                                    "required": true,
                                  },
                                ]
                              }
                            >
                              <Col
                                className="ant-form-item-label"
                                span={8}
                              >
                                <div
                                  className="ant-col ant-col-8 ant-form-item-label"
                                  style={Object {}}
                                >
                                  <label
                                    className="ant-form-item-required"
                                    htmlFor="create-claim_title"
                                    title="Title"
                                  >
                                    Title
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Title"
                              name={
                                Array [
                                  "title",
                                ]
                              }
                              onDomErrorVisibleChange={[Function]}
                              prefixCls="ant-form"
                              rules={
                                Array [
                                  Object {
                                    "message": "Please input the title!",
                                    "required": true,
                                  },
                                ]
                              }
                              touched={false}
                              validateStatus=""
                              validating={false}
                            >
                              <Col
                                className="ant-form-item-control"
                                span={16}
                              >
                                <div
                                  className="ant-col ant-col-16 ant-form-item-control"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={1}
                                      >
                                        <Input
                                          id="create-claim_title"
                                          onChange={[Function]}
                                          placeholder="title"
                                          type="text"
                                        >
                                          <ClearableLabeledInput
                                            bordered={true}
                                            element={
                                              <input
                                                className="ant-input"
                                                id="create-claim_title"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                placeholder="title"
                                                type="text"
                                              />
                                            }
                                            focused={false}
                                            handleReset={[Function]}
                                            id="create-claim_title"
                                            inputType="input"
                                            onChange={[Function]}
                                            placeholder="title"
                                            prefixCls="ant-input"
                                            triggerFocus={[Function]}
                                            type="text"
                                            value=""
                                          >
                                            <input
                                              className="ant-input"
                                              id="create-claim_title"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder="title"
                                              type="text"
                                              value=""
                                            />
                                          </ClearableLabeledInput>
                                        </Input>
                                      </Component>
                                    </div>
                                  </div>
                                  <ForwardRef
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <CSSMotion
                                      internalRef={null}
                                      motionAppear={true}
                                      motionDeadline={500}
                                      motionEnter={true}
                                      motionLeave={true}
                                      motionName="show-help"
                                      onLeaveEnd={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    />
                                  </ForwardRef>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                  <FormItem
                    label="Slug"
                    name="slug"
                    rules={
                      Array [
                        Object {
                          "message": "Please input the slug!",
                          "required": true,
                        },
                        Object {
                          "message": "Please enter valid slug!",
                          "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                        },
                      ]
                    }
                  >
                    <WrapperField
                      label="Slug"
                      messageVariables={
                        Object {
                          "label": "Slug",
                        }
                      }
                      name="slug"
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please input the slug!",
                            "required": true,
                          },
                          Object {
                            "message": "Please enter valid slug!",
                            "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        key="_slug"
                        label="Slug"
                        messageVariables={
                          Object {
                            "label": "Slug",
                          }
                        }
                        name={
                          Array [
                            "slug",
                          ]
                        }
                        onReset={[Function]}
                        rules={
                          Array [
                            Object {
                              "message": "Please input the slug!",
                              "required": true,
                            },
                            Object {
                              "message": "Please enter valid slug!",
                              "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                            },
                          ]
                        }
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="create-claim_slug"
                              label="Slug"
                              name="slug"
                              prefixCls="ant-form"
                              required={true}
                              rules={
                                Array [
                                  Object {
                                    "message": "Please input the slug!",
                                    "required": true,
                                  },
                                  Object {
                                    "message": "Please enter valid slug!",
                                    "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                  },
                                ]
                              }
                            >
                              <Col
                                className="ant-form-item-label"
                                span={8}
                              >
                                <div
                                  className="ant-col ant-col-8 ant-form-item-label"
                                  style={Object {}}
                                >
                                  <label
                                    className="ant-form-item-required"
                                    htmlFor="create-claim_slug"
                                    title="Slug"
                                  >
                                    Slug
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Slug"
                              name={
                                Array [
                                  "slug",
                                ]
                              }
                              onDomErrorVisibleChange={[Function]}
                              prefixCls="ant-form"
                              rules={
                                Array [
                                  Object {
                                    "message": "Please input the slug!",
                                    "required": true,
                                  },
                                  Object {
                                    "message": "Please enter valid slug!",
                                    "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                  },
                                ]
                              }
                              touched={false}
                              validateStatus=""
                              validating={false}
                            >
                              <Col
                                className="ant-form-item-control"
                                span={16}
                              >
                                <div
                                  className="ant-col ant-col-16 ant-form-item-control"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={1}
                                        value="claim-1"
                                      >
                                        <Input
                                          id="create-claim_slug"
                                          onChange={[Function]}
                                          type="text"
                                          value="claim-1"
                                        >
                                          <ClearableLabeledInput
                                            bordered={true}
                                            element={
                                              <input
                                                className="ant-input"
                                                id="create-claim_slug"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                type="text"
                                                value="claim-1"
                                              />
                                            }
                                            focused={false}
                                            handleReset={[Function]}
                                            id="create-claim_slug"
                                            inputType="input"
                                            onChange={[Function]}
                                            prefixCls="ant-input"
                                            triggerFocus={[Function]}
                                            type="text"
                                            value="claim-1"
                                          >
                                            <input
                                              className="ant-input"
                                              id="create-claim_slug"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              type="text"
                                              value="claim-1"
                                            />
                                          </ClearableLabeledInput>
                                        </Input>
                                      </Component>
                                    </div>
                                  </div>
                                  <ForwardRef
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <CSSMotion
                                      internalRef={null}
                                      motionAppear={true}
                                      motionDeadline={500}
                                      motionEnter={true}
                                      motionLeave={true}
                                      motionName="show-help"
                                      onLeaveEnd={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    />
                                  </ForwardRef>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                  <FormItem
                    label="Claimants"
                    name="claimant"
                    rules={
                      Array [
                        Object {
                          "message": "Please add claimant!",
                          "required": true,
                        },
                      ]
                    }
                  >
                    <WrapperField
                      label="Claimants"
                      messageVariables={
                        Object {
                          "label": "Claimants",
                        }
                      }
                      name="claimant"
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please add claimant!",
                            "required": true,
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        key="_claimant"
                        label="Claimants"
                        messageVariables={
                          Object {
                            "label": "Claimants",
                          }
                        }
                        name={
                          Array [
                            "claimant",
                          ]
                        }
                        onReset={[Function]}
                        rules={
                          Array [
                            Object {
                              "message": "Please add claimant!",
                              "required": true,
                            },
                          ]
                        }
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="create-claim_claimant"
                              label="Claimants"
                              name="claimant"
                              prefixCls="ant-form"
                              required={true}
                              rules={
                                Array [
                                  Object {
                                    "message": "Please add claimant!",
                                    "required": true,
                                  },
                                ]
                              }
                            >
                              <Col
                                className="ant-form-item-label"
                                span={8}
                              >
                                <div
                                  className="ant-col ant-col-8 ant-form-item-label"
                                  style={Object {}}
                                >
                                  <label
                                    className="ant-form-item-required"
                                    htmlFor="create-claim_claimant"
                                    title="Claimants"
                                  >
                                    Claimants
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Claimants"
                              name={
                                Array [
                                  "claimant",
                                ]
                              }
                              onDomErrorVisibleChange={[Function]}
                              prefixCls="ant-form"
                              rules={
                                Array [
                                  Object {
                                    "message": "Please add claimant!",
                                    "required": true,
                                  },
                                ]
                              }
                              touched={false}
                              validateStatus=""
                              validating={false}
                            >
                              <Col
                                className="ant-form-item-control"
                                span={16}
                              >
                                <div
                                  className="ant-col ant-col-16 ant-form-item-control"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={1}
                                      >
                                        <Selector
                                          action="Claimants"
                                          id="create-claim_claimant"
                                          key="true"
                                          onChange={[Function]}
                                        >
                                          <Select
                                            bordered={true}
                                            choiceTransitionName=""
                                            defaultValue={
                                              Array [
                                                Array [],
                                              ]
                                            }
                                            filterOption={[Function]}
                                            listHeight={128}
                                            loading={true}
                                            onChange={[Function]}
                                            onPopupScroll={[Function]}
                                            onSearch={[Function]}
                                            placeholder="Select claimants"
                                            transitionName="slide-up"
                                          >
                                            <Select
                                              choiceTransitionName=""
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              defaultValue={
                                                Array [
                                                  Array [],
                                                ]
                                              }
                                              dropdownClassName=""
                                              filterOption={[Function]}
                                              inputIcon={
                                                <ForwardRef(LoadingOutlined)
                                                  spin={true}
                                                />
                                              }
                                              listHeight={128}
                                              listItemHeight={24}
                                              loading={true}
                                              menuItemSelectedIcon={null}
                                              notFoundContent={
                                                <Context.Consumer>
                                                  [Function]
                                                </Context.Consumer>
                                              }
                                              onChange={[Function]}
                                              onPopupScroll={[Function]}
                                              onSearch={[Function]}
                                              placeholder="Select claimants"
                                              prefixCls="ant-select"
                                              removeIcon={<ForwardRef(CloseOutlined) />}
                                              transitionName="slide-up"
                                            >
                                              <ForwardRef(Select)
                                                choiceTransitionName=""
                                                className=""
                                                clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                defaultValue={
                                                  Array [
                                                    Array [],
                                                  ]
                                                }
                                                dropdownClassName=""
                                                filterOption={[Function]}
                                                inputIcon={
                                                  <ForwardRef(LoadingOutlined)
                                                    spin={true}
                                                  />
                                                }
                                                listHeight={128}
                                                listItemHeight={24}
                                                loading={true}
                                                menuItemSelectedIcon={null}
                                                notFoundContent={
                                                  <Context.Consumer>
                                                    [Function]
                                                  </Context.Consumer>
                                                }
                                                onChange={[Function]}
                                                onPopupScroll={[Function]}
                                                onSearch={[Function]}
                                                placeholder="Select claimants"
                                                prefixCls="ant-select"
                                                removeIcon={<ForwardRef(CloseOutlined) />}
                                                transitionName="slide-up"
                                              >
                                                <div
                                                  className="ant-select ant-select-single ant-select-show-arrow ant-select-loading"
                                                  onBlur={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  onMouseDown={[Function]}
                                                >
                                                  <SelectTrigger
                                                    containerWidth={null}
                                                    dropdownClassName=""
                                                    empty={true}
                                                    getTriggerDOMNode={[Function]}
                                                    popupElement={
                                                      <ForwardRef(OptionList)
                                                        childrenAsData={true}
                                                        defaultActiveFirstOption={true}
                                                        flattenOptions={Array []}
                                                        height={128}
                                                        itemHeight={24}
                                                        menuItemSelectedIcon={null}
                                                        multiple={false}
                                                        notFoundContent={
                                                          <Context.Consumer>
                                                            [Function]
                                                          </Context.Consumer>
                                                        }
                                                        onActiveValue={[Function]}
                                                        onMouseEnter={[Function]}
                                                        onScroll={[Function]}
                                                        onSelect={[Function]}
                                                        onToggleOpen={[Function]}
                                                        options={Array []}
                                                        prefixCls="ant-select"
                                                        searchValue=""
                                                        values={
                                                          Set {
                                                            Array [],
                                                          }
                                                        }
                                                        virtual={true}
                                                      />
                                                    }
                                                    prefixCls="ant-select"
                                                    transitionName="slide-up"
                                                  >
                                                    <Trigger
                                                      action={Array []}
                                                      afterPopupVisibleChange={[Function]}
                                                      autoDestroy={false}
                                                      blurDelay={0.15}
                                                      builtinPlacements={
                                                        Object {
                                                          "bottomLeft": Object {
                                                            "offset": Array [
                                                              0,
                                                              4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "tl",
                                                              "bl",
                                                            ],
                                                          },
                                                          "bottomRight": Object {
                                                            "offset": Array [
                                                              0,
                                                              4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "tr",
                                                              "br",
                                                            ],
                                                          },
                                                          "topLeft": Object {
                                                            "offset": Array [
                                                              0,
                                                              -4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "bl",
                                                              "tl",
                                                            ],
                                                          },
                                                          "topRight": Object {
                                                            "offset": Array [
                                                              0,
                                                              -4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "br",
                                                              "tr",
                                                            ],
                                                          },
                                                        }
                                                      }
                                                      defaultPopupVisible={false}
                                                      destroyPopupOnHide={false}
                                                      focusDelay={0}
                                                      getDocument={[Function]}
                                                      getPopupClassNameFromAlign={[Function]}
                                                      getTriggerDOMNode={[Function]}
                                                      hideAction={Array []}
                                                      mask={false}
                                                      maskClosable={true}
                                                      mouseEnterDelay={0}
                                                      mouseLeaveDelay={0.1}
                                                      onPopupAlign={[Function]}
                                                      onPopupVisibleChange={[Function]}
                                                      popup={
                                                        <div>
                                                          <ForwardRef(OptionList)
                                                            childrenAsData={true}
                                                            defaultActiveFirstOption={true}
                                                            flattenOptions={Array []}
                                                            height={128}
                                                            itemHeight={24}
                                                            menuItemSelectedIcon={null}
                                                            multiple={false}
                                                            notFoundContent={
                                                              <Context.Consumer>
                                                                [Function]
                                                              </Context.Consumer>
                                                            }
                                                            onActiveValue={[Function]}
                                                            onMouseEnter={[Function]}
                                                            onScroll={[Function]}
                                                            onSelect={[Function]}
                                                            onToggleOpen={[Function]}
                                                            options={Array []}
                                                            prefixCls="ant-select"
                                                            searchValue=""
                                                            values={
                                                              Set {
                                                                Array [],
                                                              }
                                                            }
                                                            virtual={true}
                                                          />
                                                        </div>
                                                      }
                                                      popupAlign={Object {}}
                                                      popupClassName="ant-select-dropdown-empty"
                                                      popupPlacement="bottomLeft"
                                                      popupStyle={
                                                        Object {
                                                          "minWidth": null,
                                                          "width": null,
                                                        }
                                                      }
                                                      popupTransitionName="slide-up"
                                                      prefixCls="ant-select-dropdown"
                                                      showAction={Array []}
                                                    >
                                                      <Selector
                                                        accessibilityIndex={0}
                                                        activeValue={null}
                                                        choiceTransitionName=""
                                                        className=""
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        defaultValue={
                                                          Array [
                                                            Array [],
                                                          ]
                                                        }
                                                        domRef={
                                                          Object {
                                                            "current": <div
                                                              class="ant-select-selector"
                                                            >
                                                              <span
                                                                class="ant-select-selection-search"
                                                              >
                                                                <input
                                                                  aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                  aria-autocomplete="list"
                                                                  aria-controls="rc_select_TEST_OR_SSR_list"
                                                                  aria-haspopup="listbox"
                                                                  aria-owns="rc_select_TEST_OR_SSR_list"
                                                                  autocomplete="off"
                                                                  class="ant-select-selection-search-input"
                                                                  id="rc_select_TEST_OR_SSR"
                                                                  readonly=""
                                                                  role="combobox"
                                                                  style="opacity: 0;"
                                                                  unselectable="on"
                                                                  value=""
                                                                />
                                                              </span>
                                                              <span
                                                                class="ant-select-selection-item"
                                                              />
                                                            </div>,
                                                          }
                                                        }
                                                        dropdownClassName=""
                                                        filterOption={[Function]}
                                                        inputElement={null}
                                                        inputIcon={
                                                          <ForwardRef(LoadingOutlined)
                                                            spin={true}
                                                          />
                                                        }
                                                        key="trigger"
                                                        listHeight={128}
                                                        listItemHeight={24}
                                                        loading={true}
                                                        menuItemSelectedIcon={null}
                                                        multiple={false}
                                                        notFoundContent={
                                                          <Context.Consumer>
                                                            [Function]
                                                          </Context.Consumer>
                                                        }
                                                        onChange={[Function]}
                                                        onPopupScroll={[Function]}
                                                        onSearch={[Function]}
                                                        onSearchSubmit={[Function]}
                                                        onSelect={[Function]}
                                                        onToggleOpen={[Function]}
                                                        placeholder="Select claimants"
                                                        prefixCls="ant-select"
                                                        removeIcon={<ForwardRef(CloseOutlined) />}
                                                        searchValue=""
                                                        showSearch={false}
                                                        tokenWithEnter={false}
                                                        transitionName="slide-up"
                                                        values={
                                                          Array [
                                                            Object {
                                                              "disabled": undefined,
                                                              "key": Array [],
                                                              "label": Array [],
                                                              "value": Array [],
                                                            },
                                                          ]
                                                        }
                                                      >
                                                        <div
                                                          className="ant-select-selector"
                                                          onMouseDown={[Function]}
                                                        >
                                                          <SingleSelector
                                                            accessibilityIndex={0}
                                                            activeValue={null}
                                                            choiceTransitionName=""
                                                            className=""
                                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                            defaultValue={
                                                              Array [
                                                                Array [],
                                                              ]
                                                            }
                                                            domRef={
                                                              Object {
                                                                "current": <div
                                                                  class="ant-select-selector"
                                                                >
                                                                  <span
                                                                    class="ant-select-selection-search"
                                                                  >
                                                                    <input
                                                                      aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                      aria-autocomplete="list"
                                                                      aria-controls="rc_select_TEST_OR_SSR_list"
                                                                      aria-haspopup="listbox"
                                                                      aria-owns="rc_select_TEST_OR_SSR_list"
                                                                      autocomplete="off"
                                                                      class="ant-select-selection-search-input"
                                                                      id="rc_select_TEST_OR_SSR"
                                                                      readonly=""
                                                                      role="combobox"
                                                                      style="opacity: 0;"
                                                                      unselectable="on"
                                                                      value=""
                                                                    />
                                                                  </span>
                                                                  <span
                                                                    class="ant-select-selection-item"
                                                                  />
                                                                </div>,
                                                              }
                                                            }
                                                            dropdownClassName=""
                                                            filterOption={[Function]}
                                                            inputElement={null}
                                                            inputIcon={
                                                              <ForwardRef(LoadingOutlined)
                                                                spin={true}
                                                              />
                                                            }
                                                            inputRef={
                                                              Object {
                                                                "current": <input
                                                                  aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                  aria-autocomplete="list"
                                                                  aria-controls="rc_select_TEST_OR_SSR_list"
                                                                  aria-haspopup="listbox"
                                                                  aria-owns="rc_select_TEST_OR_SSR_list"
                                                                  autocomplete="off"
                                                                  class="ant-select-selection-search-input"
                                                                  id="rc_select_TEST_OR_SSR"
                                                                  readonly=""
                                                                  role="combobox"
                                                                  style="opacity: 0;"
                                                                  unselectable="on"
                                                                  value=""
                                                                />,
                                                              }
                                                            }
                                                            listHeight={128}
                                                            listItemHeight={24}
                                                            loading={true}
                                                            menuItemSelectedIcon={null}
                                                            multiple={false}
                                                            notFoundContent={
                                                              <Context.Consumer>
                                                                [Function]
                                                              </Context.Consumer>
                                                            }
                                                            onChange={[Function]}
                                                            onInputChange={[Function]}
                                                            onInputCompositionEnd={[Function]}
                                                            onInputCompositionStart={[Function]}
                                                            onInputKeyDown={[Function]}
                                                            onInputMouseDown={[Function]}
                                                            onInputPaste={[Function]}
                                                            onPopupScroll={[Function]}
                                                            onSearch={[Function]}
                                                            onSearchSubmit={[Function]}
                                                            onSelect={[Function]}
                                                            onToggleOpen={[Function]}
                                                            placeholder="Select claimants"
                                                            prefixCls="ant-select"
                                                            removeIcon={<ForwardRef(CloseOutlined) />}
                                                            searchValue=""
                                                            showSearch={false}
                                                            tokenWithEnter={false}
                                                            transitionName="slide-up"
                                                            values={
                                                              Array [
                                                                Object {
                                                                  "disabled": undefined,
                                                                  "key": Array [],
                                                                  "label": Array [],
                                                                  "value": Array [],
                                                                },
                                                              ]
                                                            }
                                                          >
                                                            <span
                                                              className="ant-select-selection-search"
                                                            >
                                                              <Input
                                                                accessibilityIndex={0}
                                                                attrs={Object {}}
                                                                editable={false}
                                                                inputElement={null}
                                                                onChange={[Function]}
                                                                onCompositionEnd={[Function]}
                                                                onCompositionStart={[Function]}
                                                                onKeyDown={[Function]}
                                                                onMouseDown={[Function]}
                                                                onPaste={[Function]}
                                                                prefixCls="ant-select"
                                                                value=""
                                                              >
                                                                <input
                                                                  aria-activedescendant="undefined_list_0"
                                                                  aria-autocomplete="list"
                                                                  aria-controls="undefined_list"
                                                                  aria-haspopup="listbox"
                                                                  aria-owns="undefined_list"
                                                                  autoComplete="off"
                                                                  className="ant-select-selection-search-input"
                                                                  onChange={[Function]}
                                                                  onCompositionEnd={[Function]}
                                                                  onCompositionStart={[Function]}
                                                                  onKeyDown={[Function]}
                                                                  onMouseDown={[Function]}
                                                                  onPaste={[Function]}
                                                                  readOnly={true}
                                                                  role="combobox"
                                                                  style={
                                                                    Object {
                                                                      "opacity": 0,
                                                                    }
                                                                  }
                                                                  unselectable="on"
                                                                  value=""
                                                                />
                                                              </Input>
                                                            </span>
                                                            <span
                                                              className="ant-select-selection-item"
                                                            />
                                                          </SingleSelector>
                                                        </div>
                                                      </Selector>
                                                    </Trigger>
                                                  </SelectTrigger>
                                                  <TransBtn
                                                    className="ant-select-arrow ant-select-arrow-loading"
                                                    customizeIcon={
                                                      <ForwardRef(LoadingOutlined)
                                                        spin={true}
                                                      />
                                                    }
                                                    customizeIconProps={
                                                      Object {
                                                        "focused": false,
                                                        "loading": true,
                                                        "open": undefined,
                                                        "searchValue": "",
                                                        "showSearch": false,
                                                      }
                                                    }
                                                  >
                                                    <span
                                                      aria-hidden={true}
                                                      className="ant-select-arrow ant-select-arrow-loading"
                                                      onMouseDown={[Function]}
                                                      style={
                                                        Object {
                                                          "WebkitUserSelect": "none",
                                                          "userSelect": "none",
                                                        }
                                                      }
                                                      unselectable="on"
                                                    >
                                                      <ForwardRef(LoadingOutlined)
                                                        spin={true}
                                                      >
                                                        <AntdIcon
                                                          icon={
                                                            Object {
                                                              "icon": Object {
                                                                "attrs": Object {
                                                                  "focusable": "false",
                                                                  "viewBox": "0 0 1024 1024",
                                                                },
                                                                "children": Array [
                                                                  Object {
                                                                    "attrs": Object {
                                                                      "d": "M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z",
                                                                    },
                                                                    "tag": "path",
                                                                  },
                                                                ],
                                                                "tag": "svg",
                                                              },
                                                              "name": "loading",
                                                              "theme": "outlined",
                                                            }
                                                          }
                                                          spin={true}
                                                        >
                                                          <span
                                                            aria-label="loading"
                                                            className="anticon anticon-loading"
                                                            role="img"
                                                          >
                                                            <IconReact
                                                              className="anticon-spin"
                                                              icon={
                                                                Object {
                                                                  "icon": Object {
                                                                    "attrs": Object {
                                                                      "focusable": "false",
                                                                      "viewBox": "0 0 1024 1024",
                                                                    },
                                                                    "children": Array [
                                                                      Object {
                                                                        "attrs": Object {
                                                                          "d": "M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z",
                                                                        },
                                                                        "tag": "path",
                                                                      },
                                                                    ],
                                                                    "tag": "svg",
                                                                  },
                                                                  "name": "loading",
                                                                  "theme": "outlined",
                                                                }
                                                              }
                                                            >
                                                              <svg
                                                                aria-hidden="true"
                                                                className="anticon-spin"
                                                                data-icon="loading"
                                                                fill="currentColor"
                                                                focusable="false"
                                                                height="1em"
                                                                key="svg-loading"
                                                                viewBox="0 0 1024 1024"
                                                                width="1em"
                                                              >
                                                                <path
                                                                  d="M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z"
                                                                  key="svg-loading-svg-0"
                                                                />
                                                              </svg>
                                                            </IconReact>
                                                          </span>
                                                        </AntdIcon>
                                                      </ForwardRef(LoadingOutlined)>
                                                    </span>
                                                  </TransBtn>
                                                </div>
                                              </ForwardRef(Select)>
                                            </Select>
                                          </Select>
                                        </Selector>
                                      </Component>
                                    </div>
                                  </div>
                                  <ForwardRef
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <CSSMotion
                                      internalRef={null}
                                      motionAppear={true}
                                      motionDeadline={500}
                                      motionEnter={true}
                                      motionLeave={true}
                                      motionName="show-help"
                                      onLeaveEnd={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    />
                                  </ForwardRef>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                  <FormItem>
                    <Row
                      className="ant-form-item"
                      key="row"
                    >
                      <div
                        className="ant-row ant-form-item"
                        style={Object {}}
                      >
                        <FormItemLabel
                          prefixCls="ant-form"
                        />
                        <FormItemInput
                          errors={Array []}
                          onDomErrorVisibleChange={[Function]}
                          prefixCls="ant-form"
                          validateStatus=""
                        >
                          <Col
                            className="ant-form-item-control"
                            span={16}
                          >
                            <div
                              className="ant-col ant-col-16 ant-form-item-control"
                              style={Object {}}
                            >
                              <div
                                className="ant-form-item-control-input"
                              >
                                <div
                                  className="ant-form-item-control-input-content"
                                >
                                  <Row
                                    gutter={8}
                                  >
                                    <div
                                      className="ant-row"
                                      style={
                                        Object {
                                          "marginLeft": -4,
                                          "marginRight": -4,
                                        }
                                      }
                                    >
                                      <Col
                                        span={18}
                                      >
                                        <div
                                          className="ant-col ant-col-18"
                                          style={
                                            Object {
                                              "paddingLeft": 4,
                                              "paddingRight": 4,
                                            }
                                          }
                                        >
                                          <Input
                                            onChange={[Function]}
                                            placeholder="claimant name"
                                            type="text"
                                            value=""
                                          >
                                            <ClearableLabeledInput
                                              bordered={true}
                                              element={
                                                <input
                                                  className="ant-input"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="claimant name"
                                                  type="text"
                                                  value=""
                                                />
                                              }
                                              focused={false}
                                              handleReset={[Function]}
                                              inputType="input"
                                              onChange={[Function]}
                                              placeholder="claimant name"
                                              prefixCls="ant-input"
                                              triggerFocus={[Function]}
                                              type="text"
                                              value=""
                                            >
                                              <input
                                                className="ant-input"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                placeholder="claimant name"
                                                type="text"
                                                value=""
                                              />
                                            </ClearableLabeledInput>
                                          </Input>
                                        </div>
                                      </Col>
                                      <Col
                                        span={6}
                                      >
                                        <div
                                          className="ant-col ant-col-6"
                                          style={
                                            Object {
                                              "paddingLeft": 4,
                                              "paddingRight": 4,
                                            }
                                          }
                                        >
                                          <Button
                                            block={true}
                                            ghost={false}
                                            htmlType="button"
                                            loading={false}
                                            onClick={[Function]}
                                          >
                                            <Wave>
                                              <button
                                                className="ant-btn ant-btn-block"
                                                onClick={[Function]}
                                                type="button"
                                              >
                                                <LoadingIcon
                                                  existIcon={false}
                                                  loading={false}
                                                  prefixCls="ant-btn"
                                                >
                                                  <ForwardRef
                                                    motionName="ant-btn-loading-icon-motion"
                                                    onAppearActive={[Function]}
                                                    onAppearStart={[Function]}
                                                    onEnterActive={[Function]}
                                                    onEnterStart={[Function]}
                                                    onLeaveActive={[Function]}
                                                    onLeaveStart={[Function]}
                                                    removeOnLeave={true}
                                                    visible={false}
                                                  >
                                                    <CSSMotion
                                                      internalRef={null}
                                                      motionAppear={true}
                                                      motionEnter={true}
                                                      motionLeave={true}
                                                      motionName="ant-btn-loading-icon-motion"
                                                      onAppearActive={[Function]}
                                                      onAppearStart={[Function]}
                                                      onEnterActive={[Function]}
                                                      onEnterStart={[Function]}
                                                      onLeaveActive={[Function]}
                                                      onLeaveStart={[Function]}
                                                      removeOnLeave={true}
                                                      visible={false}
                                                    />
                                                  </ForwardRef>
                                                </LoadingIcon>
                                                <span
                                                  key=".0"
                                                >
                                                  Add
                                                </span>
                                              </button>
                                            </Wave>
                                          </Button>
                                        </div>
                                      </Col>
                                    </div>
                                  </Row>
                                </div>
                              </div>
                              <ForwardRef
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <CSSMotion
                                  internalRef={null}
                                  motionAppear={true}
                                  motionDeadline={500}
                                  motionEnter={true}
                                  motionLeave={true}
                                  motionName="show-help"
                                  onLeaveEnd={[Function]}
                                  removeOnLeave={true}
                                  visible={false}
                                />
                              </ForwardRef>
                            </div>
                          </Col>
                        </FormItemInput>
                      </div>
                    </Row>
                  </FormItem>
                  <FormItem
                    label="Ratings"
                    name="rating"
                    rules={
                      Array [
                        Object {
                          "message": "Please add rating!",
                          "required": true,
                        },
                      ]
                    }
                  >
                    <WrapperField
                      label="Ratings"
                      messageVariables={
                        Object {
                          "label": "Ratings",
                        }
                      }
                      name="rating"
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please add rating!",
                            "required": true,
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        key="_rating"
                        label="Ratings"
                        messageVariables={
                          Object {
                            "label": "Ratings",
                          }
                        }
                        name={
                          Array [
                            "rating",
                          ]
                        }
                        onReset={[Function]}
                        rules={
                          Array [
                            Object {
                              "message": "Please add rating!",
                              "required": true,
                            },
                          ]
                        }
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="create-claim_rating"
                              label="Ratings"
                              name="rating"
                              prefixCls="ant-form"
                              required={true}
                              rules={
                                Array [
                                  Object {
                                    "message": "Please add rating!",
                                    "required": true,
                                  },
                                ]
                              }
                            >
                              <Col
                                className="ant-form-item-label"
                                span={8}
                              >
                                <div
                                  className="ant-col ant-col-8 ant-form-item-label"
                                  style={Object {}}
                                >
                                  <label
                                    className="ant-form-item-required"
                                    htmlFor="create-claim_rating"
                                    title="Ratings"
                                  >
                                    Ratings
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Ratings"
                              name={
                                Array [
                                  "rating",
                                ]
                              }
                              onDomErrorVisibleChange={[Function]}
                              prefixCls="ant-form"
                              rules={
                                Array [
                                  Object {
                                    "message": "Please add rating!",
                                    "required": true,
                                  },
                                ]
                              }
                              touched={false}
                              validateStatus=""
                              validating={false}
                            >
                              <Col
                                className="ant-form-item-control"
                                span={16}
                              >
                                <div
                                  className="ant-col ant-col-16 ant-form-item-control"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={1}
                                      >
                                        <Selector
                                          action="Ratings"
                                          id="create-claim_rating"
                                          onChange={[Function]}
                                        >
                                          <Select
                                            bordered={true}
                                            choiceTransitionName=""
                                            defaultValue={
                                              Array [
                                                Array [],
                                              ]
                                            }
                                            filterOption={[Function]}
                                            listHeight={128}
                                            loading={true}
                                            onChange={[Function]}
                                            onPopupScroll={[Function]}
                                            onSearch={[Function]}
                                            placeholder="Select ratings"
                                            transitionName="slide-up"
                                          >
                                            <Select
                                              choiceTransitionName=""
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              defaultValue={
                                                Array [
                                                  Array [],
                                                ]
                                              }
                                              dropdownClassName=""
                                              filterOption={[Function]}
                                              inputIcon={
                                                <ForwardRef(LoadingOutlined)
                                                  spin={true}
                                                />
                                              }
                                              listHeight={128}
                                              listItemHeight={24}
                                              loading={true}
                                              menuItemSelectedIcon={null}
                                              notFoundContent={
                                                <Context.Consumer>
                                                  [Function]
                                                </Context.Consumer>
                                              }
                                              onChange={[Function]}
                                              onPopupScroll={[Function]}
                                              onSearch={[Function]}
                                              placeholder="Select ratings"
                                              prefixCls="ant-select"
                                              removeIcon={<ForwardRef(CloseOutlined) />}
                                              transitionName="slide-up"
                                            >
                                              <ForwardRef(Select)
                                                choiceTransitionName=""
                                                className=""
                                                clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                defaultValue={
                                                  Array [
                                                    Array [],
                                                  ]
                                                }
                                                dropdownClassName=""
                                                filterOption={[Function]}
                                                inputIcon={
                                                  <ForwardRef(LoadingOutlined)
                                                    spin={true}
                                                  />
                                                }
                                                listHeight={128}
                                                listItemHeight={24}
                                                loading={true}
                                                menuItemSelectedIcon={null}
                                                notFoundContent={
                                                  <Context.Consumer>
                                                    [Function]
                                                  </Context.Consumer>
                                                }
                                                onChange={[Function]}
                                                onPopupScroll={[Function]}
                                                onSearch={[Function]}
                                                placeholder="Select ratings"
                                                prefixCls="ant-select"
                                                removeIcon={<ForwardRef(CloseOutlined) />}
                                                transitionName="slide-up"
                                              >
                                                <div
                                                  className="ant-select ant-select-single ant-select-show-arrow ant-select-loading"
                                                  onBlur={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  onMouseDown={[Function]}
                                                >
                                                  <SelectTrigger
                                                    containerWidth={null}
                                                    dropdownClassName=""
                                                    empty={true}
                                                    getTriggerDOMNode={[Function]}
                                                    popupElement={
                                                      <ForwardRef(OptionList)
                                                        childrenAsData={true}
                                                        defaultActiveFirstOption={true}
                                                        flattenOptions={Array []}
                                                        height={128}
                                                        itemHeight={24}
                                                        menuItemSelectedIcon={null}
                                                        multiple={false}
                                                        notFoundContent={
                                                          <Context.Consumer>
                                                            [Function]
                                                          </Context.Consumer>
                                                        }
                                                        onActiveValue={[Function]}
                                                        onMouseEnter={[Function]}
                                                        onScroll={[Function]}
                                                        onSelect={[Function]}
                                                        onToggleOpen={[Function]}
                                                        options={Array []}
                                                        prefixCls="ant-select"
                                                        searchValue=""
                                                        values={
                                                          Set {
                                                            Array [],
                                                          }
                                                        }
                                                        virtual={true}
                                                      />
                                                    }
                                                    prefixCls="ant-select"
                                                    transitionName="slide-up"
                                                  >
                                                    <Trigger
                                                      action={Array []}
                                                      afterPopupVisibleChange={[Function]}
                                                      autoDestroy={false}
                                                      blurDelay={0.15}
                                                      builtinPlacements={
                                                        Object {
                                                          "bottomLeft": Object {
                                                            "offset": Array [
                                                              0,
                                                              4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "tl",
                                                              "bl",
                                                            ],
                                                          },
                                                          "bottomRight": Object {
                                                            "offset": Array [
                                                              0,
                                                              4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "tr",
                                                              "br",
                                                            ],
                                                          },
                                                          "topLeft": Object {
                                                            "offset": Array [
                                                              0,
                                                              -4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "bl",
                                                              "tl",
                                                            ],
                                                          },
                                                          "topRight": Object {
                                                            "offset": Array [
                                                              0,
                                                              -4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "br",
                                                              "tr",
                                                            ],
                                                          },
                                                        }
                                                      }
                                                      defaultPopupVisible={false}
                                                      destroyPopupOnHide={false}
                                                      focusDelay={0}
                                                      getDocument={[Function]}
                                                      getPopupClassNameFromAlign={[Function]}
                                                      getTriggerDOMNode={[Function]}
                                                      hideAction={Array []}
                                                      mask={false}
                                                      maskClosable={true}
                                                      mouseEnterDelay={0}
                                                      mouseLeaveDelay={0.1}
                                                      onPopupAlign={[Function]}
                                                      onPopupVisibleChange={[Function]}
                                                      popup={
                                                        <div>
                                                          <ForwardRef(OptionList)
                                                            childrenAsData={true}
                                                            defaultActiveFirstOption={true}
                                                            flattenOptions={Array []}
                                                            height={128}
                                                            itemHeight={24}
                                                            menuItemSelectedIcon={null}
                                                            multiple={false}
                                                            notFoundContent={
                                                              <Context.Consumer>
                                                                [Function]
                                                              </Context.Consumer>
                                                            }
                                                            onActiveValue={[Function]}
                                                            onMouseEnter={[Function]}
                                                            onScroll={[Function]}
                                                            onSelect={[Function]}
                                                            onToggleOpen={[Function]}
                                                            options={Array []}
                                                            prefixCls="ant-select"
                                                            searchValue=""
                                                            values={
                                                              Set {
                                                                Array [],
                                                              }
                                                            }
                                                            virtual={true}
                                                          />
                                                        </div>
                                                      }
                                                      popupAlign={Object {}}
                                                      popupClassName="ant-select-dropdown-empty"
                                                      popupPlacement="bottomLeft"
                                                      popupStyle={
                                                        Object {
                                                          "minWidth": null,
                                                          "width": null,
                                                        }
                                                      }
                                                      popupTransitionName="slide-up"
                                                      prefixCls="ant-select-dropdown"
                                                      showAction={Array []}
                                                    >
                                                      <Selector
                                                        accessibilityIndex={0}
                                                        activeValue={null}
                                                        choiceTransitionName=""
                                                        className=""
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        defaultValue={
                                                          Array [
                                                            Array [],
                                                          ]
                                                        }
                                                        domRef={
                                                          Object {
                                                            "current": <div
                                                              class="ant-select-selector"
                                                            >
                                                              <span
                                                                class="ant-select-selection-search"
                                                              >
                                                                <input
                                                                  aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                  aria-autocomplete="list"
                                                                  aria-controls="rc_select_TEST_OR_SSR_list"
                                                                  aria-haspopup="listbox"
                                                                  aria-owns="rc_select_TEST_OR_SSR_list"
                                                                  autocomplete="off"
                                                                  class="ant-select-selection-search-input"
                                                                  id="rc_select_TEST_OR_SSR"
                                                                  readonly=""
                                                                  role="combobox"
                                                                  style="opacity: 0;"
                                                                  unselectable="on"
                                                                  value=""
                                                                />
                                                              </span>
                                                              <span
                                                                class="ant-select-selection-item"
                                                              />
                                                            </div>,
                                                          }
                                                        }
                                                        dropdownClassName=""
                                                        filterOption={[Function]}
                                                        inputElement={null}
                                                        inputIcon={
                                                          <ForwardRef(LoadingOutlined)
                                                            spin={true}
                                                          />
                                                        }
                                                        key="trigger"
                                                        listHeight={128}
                                                        listItemHeight={24}
                                                        loading={true}
                                                        menuItemSelectedIcon={null}
                                                        multiple={false}
                                                        notFoundContent={
                                                          <Context.Consumer>
                                                            [Function]
                                                          </Context.Consumer>
                                                        }
                                                        onChange={[Function]}
                                                        onPopupScroll={[Function]}
                                                        onSearch={[Function]}
                                                        onSearchSubmit={[Function]}
                                                        onSelect={[Function]}
                                                        onToggleOpen={[Function]}
                                                        placeholder="Select ratings"
                                                        prefixCls="ant-select"
                                                        removeIcon={<ForwardRef(CloseOutlined) />}
                                                        searchValue=""
                                                        showSearch={false}
                                                        tokenWithEnter={false}
                                                        transitionName="slide-up"
                                                        values={
                                                          Array [
                                                            Object {
                                                              "disabled": undefined,
                                                              "key": Array [],
                                                              "label": Array [],
                                                              "value": Array [],
                                                            },
                                                          ]
                                                        }
                                                      >
                                                        <div
                                                          className="ant-select-selector"
                                                          onMouseDown={[Function]}
                                                        >
                                                          <SingleSelector
                                                            accessibilityIndex={0}
                                                            activeValue={null}
                                                            choiceTransitionName=""
                                                            className=""
                                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                            defaultValue={
                                                              Array [
                                                                Array [],
                                                              ]
                                                            }
                                                            domRef={
                                                              Object {
                                                                "current": <div
                                                                  class="ant-select-selector"
                                                                >
                                                                  <span
                                                                    class="ant-select-selection-search"
                                                                  >
                                                                    <input
                                                                      aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                      aria-autocomplete="list"
                                                                      aria-controls="rc_select_TEST_OR_SSR_list"
                                                                      aria-haspopup="listbox"
                                                                      aria-owns="rc_select_TEST_OR_SSR_list"
                                                                      autocomplete="off"
                                                                      class="ant-select-selection-search-input"
                                                                      id="rc_select_TEST_OR_SSR"
                                                                      readonly=""
                                                                      role="combobox"
                                                                      style="opacity: 0;"
                                                                      unselectable="on"
                                                                      value=""
                                                                    />
                                                                  </span>
                                                                  <span
                                                                    class="ant-select-selection-item"
                                                                  />
                                                                </div>,
                                                              }
                                                            }
                                                            dropdownClassName=""
                                                            filterOption={[Function]}
                                                            inputElement={null}
                                                            inputIcon={
                                                              <ForwardRef(LoadingOutlined)
                                                                spin={true}
                                                              />
                                                            }
                                                            inputRef={
                                                              Object {
                                                                "current": <input
                                                                  aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                  aria-autocomplete="list"
                                                                  aria-controls="rc_select_TEST_OR_SSR_list"
                                                                  aria-haspopup="listbox"
                                                                  aria-owns="rc_select_TEST_OR_SSR_list"
                                                                  autocomplete="off"
                                                                  class="ant-select-selection-search-input"
                                                                  id="rc_select_TEST_OR_SSR"
                                                                  readonly=""
                                                                  role="combobox"
                                                                  style="opacity: 0;"
                                                                  unselectable="on"
                                                                  value=""
                                                                />,
                                                              }
                                                            }
                                                            listHeight={128}
                                                            listItemHeight={24}
                                                            loading={true}
                                                            menuItemSelectedIcon={null}
                                                            multiple={false}
                                                            notFoundContent={
                                                              <Context.Consumer>
                                                                [Function]
                                                              </Context.Consumer>
                                                            }
                                                            onChange={[Function]}
                                                            onInputChange={[Function]}
                                                            onInputCompositionEnd={[Function]}
                                                            onInputCompositionStart={[Function]}
                                                            onInputKeyDown={[Function]}
                                                            onInputMouseDown={[Function]}
                                                            onInputPaste={[Function]}
                                                            onPopupScroll={[Function]}
                                                            onSearch={[Function]}
                                                            onSearchSubmit={[Function]}
                                                            onSelect={[Function]}
                                                            onToggleOpen={[Function]}
                                                            placeholder="Select ratings"
                                                            prefixCls="ant-select"
                                                            removeIcon={<ForwardRef(CloseOutlined) />}
                                                            searchValue=""
                                                            showSearch={false}
                                                            tokenWithEnter={false}
                                                            transitionName="slide-up"
                                                            values={
                                                              Array [
                                                                Object {
                                                                  "disabled": undefined,
                                                                  "key": Array [],
                                                                  "label": Array [],
                                                                  "value": Array [],
                                                                },
                                                              ]
                                                            }
                                                          >
                                                            <span
                                                              className="ant-select-selection-search"
                                                            >
                                                              <Input
                                                                accessibilityIndex={0}
                                                                attrs={Object {}}
                                                                editable={false}
                                                                inputElement={null}
                                                                onChange={[Function]}
                                                                onCompositionEnd={[Function]}
                                                                onCompositionStart={[Function]}
                                                                onKeyDown={[Function]}
                                                                onMouseDown={[Function]}
                                                                onPaste={[Function]}
                                                                prefixCls="ant-select"
                                                                value=""
                                                              >
                                                                <input
                                                                  aria-activedescendant="undefined_list_0"
                                                                  aria-autocomplete="list"
                                                                  aria-controls="undefined_list"
                                                                  aria-haspopup="listbox"
                                                                  aria-owns="undefined_list"
                                                                  autoComplete="off"
                                                                  className="ant-select-selection-search-input"
                                                                  onChange={[Function]}
                                                                  onCompositionEnd={[Function]}
                                                                  onCompositionStart={[Function]}
                                                                  onKeyDown={[Function]}
                                                                  onMouseDown={[Function]}
                                                                  onPaste={[Function]}
                                                                  readOnly={true}
                                                                  role="combobox"
                                                                  style={
                                                                    Object {
                                                                      "opacity": 0,
                                                                    }
                                                                  }
                                                                  unselectable="on"
                                                                  value=""
                                                                />
                                                              </Input>
                                                            </span>
                                                            <span
                                                              className="ant-select-selection-item"
                                                            />
                                                          </SingleSelector>
                                                        </div>
                                                      </Selector>
                                                    </Trigger>
                                                  </SelectTrigger>
                                                  <TransBtn
                                                    className="ant-select-arrow ant-select-arrow-loading"
                                                    customizeIcon={
                                                      <ForwardRef(LoadingOutlined)
                                                        spin={true}
                                                      />
                                                    }
                                                    customizeIconProps={
                                                      Object {
                                                        "focused": false,
                                                        "loading": true,
                                                        "open": undefined,
                                                        "searchValue": "",
                                                        "showSearch": false,
                                                      }
                                                    }
                                                  >
                                                    <span
                                                      aria-hidden={true}
                                                      className="ant-select-arrow ant-select-arrow-loading"
                                                      onMouseDown={[Function]}
                                                      style={
                                                        Object {
                                                          "WebkitUserSelect": "none",
                                                          "userSelect": "none",
                                                        }
                                                      }
                                                      unselectable="on"
                                                    >
                                                      <ForwardRef(LoadingOutlined)
                                                        spin={true}
                                                      >
                                                        <AntdIcon
                                                          icon={
                                                            Object {
                                                              "icon": Object {
                                                                "attrs": Object {
                                                                  "focusable": "false",
                                                                  "viewBox": "0 0 1024 1024",
                                                                },
                                                                "children": Array [
                                                                  Object {
                                                                    "attrs": Object {
                                                                      "d": "M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z",
                                                                    },
                                                                    "tag": "path",
                                                                  },
                                                                ],
                                                                "tag": "svg",
                                                              },
                                                              "name": "loading",
                                                              "theme": "outlined",
                                                            }
                                                          }
                                                          spin={true}
                                                        >
                                                          <span
                                                            aria-label="loading"
                                                            className="anticon anticon-loading"
                                                            role="img"
                                                          >
                                                            <IconReact
                                                              className="anticon-spin"
                                                              icon={
                                                                Object {
                                                                  "icon": Object {
                                                                    "attrs": Object {
                                                                      "focusable": "false",
                                                                      "viewBox": "0 0 1024 1024",
                                                                    },
                                                                    "children": Array [
                                                                      Object {
                                                                        "attrs": Object {
                                                                          "d": "M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z",
                                                                        },
                                                                        "tag": "path",
                                                                      },
                                                                    ],
                                                                    "tag": "svg",
                                                                  },
                                                                  "name": "loading",
                                                                  "theme": "outlined",
                                                                }
                                                              }
                                                            >
                                                              <svg
                                                                aria-hidden="true"
                                                                className="anticon-spin"
                                                                data-icon="loading"
                                                                fill="currentColor"
                                                                focusable="false"
                                                                height="1em"
                                                                key="svg-loading"
                                                                viewBox="0 0 1024 1024"
                                                                width="1em"
                                                              >
                                                                <path
                                                                  d="M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z"
                                                                  key="svg-loading-svg-0"
                                                                />
                                                              </svg>
                                                            </IconReact>
                                                          </span>
                                                        </AntdIcon>
                                                      </ForwardRef(LoadingOutlined)>
                                                    </span>
                                                  </TransBtn>
                                                </div>
                                              </ForwardRef(Select)>
                                            </Select>
                                          </Select>
                                        </Selector>
                                      </Component>
                                    </div>
                                  </div>
                                  <ForwardRef
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <CSSMotion
                                      internalRef={null}
                                      motionAppear={true}
                                      motionDeadline={500}
                                      motionEnter={true}
                                      motionLeave={true}
                                      motionName="show-help"
                                      onLeaveEnd={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    />
                                  </ForwardRef>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                  <FormItem
                    label="Description"
                    name="description"
                  >
                    <WrapperField
                      label="Description"
                      messageVariables={
                        Object {
                          "label": "Description",
                        }
                      }
                      name="description"
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        key="_description"
                        label="Description"
                        messageVariables={
                          Object {
                            "label": "Description",
                          }
                        }
                        name={
                          Array [
                            "description",
                          ]
                        }
                        onReset={[Function]}
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="create-claim_description"
                              label="Description"
                              name="description"
                              prefixCls="ant-form"
                              required={false}
                            >
                              <Col
                                className="ant-form-item-label"
                                span={8}
                              >
                                <div
                                  className="ant-col ant-col-8 ant-form-item-label"
                                  style={Object {}}
                                >
                                  <label
                                    className=""
                                    htmlFor="create-claim_description"
                                    title="Description"
                                  >
                                    Description
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Description"
                              name={
                                Array [
                                  "description",
                                ]
                              }
                              onDomErrorVisibleChange={[Function]}
                              prefixCls="ant-form"
                              touched={false}
                              validateStatus=""
                              validating={false}
                            >
                              <Col
                                className="ant-form-item-control"
                                span={16}
                              >
                                <div
                                  className="ant-col ant-col-16 ant-form-item-control"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={1}
                                        value=""
                                      >
                                        <Editor
                                          id="create-claim_description"
                                          onChange={[Function]}
                                          value=""
                                        >
                                          <div />
                                        </Editor>
                                      </Component>
                                    </div>
                                  </div>
                                  <ForwardRef
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <CSSMotion
                                      internalRef={null}
                                      motionAppear={true}
                                      motionDeadline={500}
                                      motionEnter={true}
                                      motionLeave={true}
                                      motionName="show-help"
                                      onLeaveEnd={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    />
                                  </ForwardRef>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                </div>
                <div
                  style={
                    Object {
                      "display": "none",
                    }
                  }
                >
                  <FormItem
                    label="Claim Date"
                    name="claim_date"
                  >
                    <WrapperField
                      label="Claim Date"
                      messageVariables={
                        Object {
                          "label": "Claim Date",
                        }
                      }
                      name="claim_date"
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        key="_claim_date"
                        label="Claim Date"
                        messageVariables={
                          Object {
                            "label": "Claim Date",
                          }
                        }
                        name={
                          Array [
                            "claim_date",
                          ]
                        }
                        onReset={[Function]}
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="create-claim_claim_date"
                              label="Claim Date"
                              name="claim_date"
                              prefixCls="ant-form"
                              required={false}
                            >
                              <Col
                                className="ant-form-item-label"
                                span={8}
                              >
                                <div
                                  className="ant-col ant-col-8 ant-form-item-label"
                                  style={Object {}}
                                >
                                  <label
                                    className=""
                                    htmlFor="create-claim_claim_date"
                                    title="Claim Date"
                                  >
                                    Claim Date
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Claim Date"
                              name={
                                Array [
                                  "claim_date",
                                ]
                              }
                              onDomErrorVisibleChange={[Function]}
                              prefixCls="ant-form"
                              touched={false}
                              validateStatus=""
                              validating={false}
                            >
                              <Col
                                className="ant-form-item-control"
                                span={16}
                              >
                                <div
                                  className="ant-col ant-col-16 ant-form-item-control"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={1}
                                        value={"2020-07-17T10:14:44.251Z"}
                                      >
                                        <Picker
                                          id="create-claim_claim_date"
                                          onChange={[Function]}
                                          value={"2020-07-17T10:14:44.251Z"}
                                        >
                                          <LocaleReceiver
                                            componentName="DatePicker"
                                            defaultLocale={[Function]}
                                          >
                                            <Picker
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              components={
                                                Object {
                                                  "button": [Function],
                                                  "rangeItem": [Function],
                                                }
                                              }
                                              generateConfig={
                                                Object {
                                                  "addDate": [Function],
                                                  "addMonth": [Function],
                                                  "addYear": [Function],
                                                  "getDate": [Function],
                                                  "getHour": [Function],
                                                  "getMinute": [Function],
                                                  "getMonth": [Function],
                                                  "getNow": [Function],
                                                  "getSecond": [Function],
                                                  "getWeekDay": [Function],
                                                  "getYear": [Function],
                                                  "isAfter": [Function],
                                                  "isValidate": [Function],
                                                  "locale": Object {
                                                    "format": [Function],
                                                    "getShortMonths": [Function],
                                                    "getShortWeekDays": [Function],
                                                    "getWeek": [Function],
                                                    "getWeekFirstDay": [Function],
                                                    "parse": [Function],
                                                  },
                                                  "setDate": [Function],
                                                  "setHour": [Function],
                                                  "setMinute": [Function],
                                                  "setMonth": [Function],
                                                  "setSecond": [Function],
                                                  "setYear": [Function],
                                                }
                                              }
                                              id="create-claim_claim_date"
                                              locale={
                                                Object {
                                                  "backToToday": "Back to today",
                                                  "clear": "Clear",
                                                  "dateFormat": "M/D/YYYY",
                                                  "dateSelect": "select date",
                                                  "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                  "dayFormat": "D",
                                                  "decadeSelect": "Choose a decade",
                                                  "locale": "en_US",
                                                  "month": "Month",
                                                  "monthBeforeYear": true,
                                                  "monthPlaceholder": "Select month",
                                                  "monthSelect": "Choose a month",
                                                  "nextCentury": "Next century",
                                                  "nextDecade": "Next decade",
                                                  "nextMonth": "Next month (PageDown)",
                                                  "nextYear": "Next year (Control + right)",
                                                  "now": "Now",
                                                  "ok": "Ok",
                                                  "placeholder": "Select date",
                                                  "previousCentury": "Last century",
                                                  "previousDecade": "Last decade",
                                                  "previousMonth": "Previous month (PageUp)",
                                                  "previousYear": "Last year (Control + left)",
                                                  "quarterPlaceholder": "Select quarter",
                                                  "rangeMonthPlaceholder": Array [
                                                    "Start month",
                                                    "End month",
                                                  ],
                                                  "rangePlaceholder": Array [
                                                    "Start date",
                                                    "End date",
                                                  ],
                                                  "rangeWeekPlaceholder": Array [
                                                    "Start week",
                                                    "End week",
                                                  ],
                                                  "rangeYearPlaceholder": Array [
                                                    "Start year",
                                                    "End year",
                                                  ],
                                                  "timeSelect": "select time",
                                                  "today": "Today",
                                                  "weekPlaceholder": "Select week",
                                                  "weekSelect": "Choose a week",
                                                  "year": "Year",
                                                  "yearFormat": "YYYY",
                                                  "yearPlaceholder": "Select year",
                                                  "yearSelect": "Choose a year",
                                                }
                                              }
                                              nextIcon={
                                                <span
                                                  className="ant-picker-next-icon"
                                                />
                                              }
                                              onChange={[Function]}
                                              placeholder="Select date"
                                              prefixCls="ant-picker"
                                              prevIcon={
                                                <span
                                                  className="ant-picker-prev-icon"
                                                />
                                              }
                                              showToday={true}
                                              suffixIcon={<ForwardRef(CalendarOutlined) />}
                                              superNextIcon={
                                                <span
                                                  className="ant-picker-super-next-icon"
                                                />
                                              }
                                              superPrevIcon={
                                                <span
                                                  className="ant-picker-super-prev-icon"
                                                />
                                              }
                                              transitionName="slide-up"
                                              value={"2020-07-17T10:14:44.251Z"}
                                            >
                                              <InnerPicker
                                                allowClear={true}
                                                className=""
                                                clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                components={
                                                  Object {
                                                    "button": [Function],
                                                    "rangeItem": [Function],
                                                  }
                                                }
                                                generateConfig={
                                                  Object {
                                                    "addDate": [Function],
                                                    "addMonth": [Function],
                                                    "addYear": [Function],
                                                    "getDate": [Function],
                                                    "getHour": [Function],
                                                    "getMinute": [Function],
                                                    "getMonth": [Function],
                                                    "getNow": [Function],
                                                    "getSecond": [Function],
                                                    "getWeekDay": [Function],
                                                    "getYear": [Function],
                                                    "isAfter": [Function],
                                                    "isValidate": [Function],
                                                    "locale": Object {
                                                      "format": [Function],
                                                      "getShortMonths": [Function],
                                                      "getShortWeekDays": [Function],
                                                      "getWeek": [Function],
                                                      "getWeekFirstDay": [Function],
                                                      "parse": [Function],
                                                    },
                                                    "setDate": [Function],
                                                    "setHour": [Function],
                                                    "setMinute": [Function],
                                                    "setMonth": [Function],
                                                    "setSecond": [Function],
                                                    "setYear": [Function],
                                                  }
                                                }
                                                id="create-claim_claim_date"
                                                locale={
                                                  Object {
                                                    "backToToday": "Back to today",
                                                    "clear": "Clear",
                                                    "dateFormat": "M/D/YYYY",
                                                    "dateSelect": "select date",
                                                    "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                    "dayFormat": "D",
                                                    "decadeSelect": "Choose a decade",
                                                    "locale": "en_US",
                                                    "month": "Month",
                                                    "monthBeforeYear": true,
                                                    "monthPlaceholder": "Select month",
                                                    "monthSelect": "Choose a month",
                                                    "nextCentury": "Next century",
                                                    "nextDecade": "Next decade",
                                                    "nextMonth": "Next month (PageDown)",
                                                    "nextYear": "Next year (Control + right)",
                                                    "now": "Now",
                                                    "ok": "Ok",
                                                    "placeholder": "Select date",
                                                    "previousCentury": "Last century",
                                                    "previousDecade": "Last decade",
                                                    "previousMonth": "Previous month (PageUp)",
                                                    "previousYear": "Last year (Control + left)",
                                                    "quarterPlaceholder": "Select quarter",
                                                    "rangeMonthPlaceholder": Array [
                                                      "Start month",
                                                      "End month",
                                                    ],
                                                    "rangePlaceholder": Array [
                                                      "Start date",
                                                      "End date",
                                                    ],
                                                    "rangeWeekPlaceholder": Array [
                                                      "Start week",
                                                      "End week",
                                                    ],
                                                    "rangeYearPlaceholder": Array [
                                                      "Start year",
                                                      "End year",
                                                    ],
                                                    "timeSelect": "select time",
                                                    "today": "Today",
                                                    "weekPlaceholder": "Select week",
                                                    "weekSelect": "Choose a week",
                                                    "year": "Year",
                                                    "yearFormat": "YYYY",
                                                    "yearPlaceholder": "Select year",
                                                    "yearSelect": "Choose a year",
                                                  }
                                                }
                                                nextIcon={
                                                  <span
                                                    className="ant-picker-next-icon"
                                                  />
                                                }
                                                onChange={[Function]}
                                                pickerRef={
                                                  Object {
                                                    "current": Object {
                                                      "blur": [Function],
                                                      "focus": [Function],
                                                    },
                                                  }
                                                }
                                                placeholder="Select date"
                                                prefixCls="ant-picker"
                                                prevIcon={
                                                  <span
                                                    className="ant-picker-prev-icon"
                                                  />
                                                }
                                                showToday={true}
                                                suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                superNextIcon={
                                                  <span
                                                    className="ant-picker-super-next-icon"
                                                  />
                                                }
                                                superPrevIcon={
                                                  <span
                                                    className="ant-picker-super-prev-icon"
                                                  />
                                                }
                                                transitionName="slide-up"
                                                value={"2020-07-17T10:14:44.251Z"}
                                              >
                                                <PickerTrigger
                                                  popupElement={
                                                    <div
                                                      className="ant-picker-panel-container"
                                                      onMouseDown={[Function]}
                                                    >
                                                      <PickerPanel
                                                        allowClear={true}
                                                        className="ant-picker-panel-focused"
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        components={
                                                          Object {
                                                            "button": [Function],
                                                            "rangeItem": [Function],
                                                          }
                                                        }
                                                        generateConfig={
                                                          Object {
                                                            "addDate": [Function],
                                                            "addMonth": [Function],
                                                            "addYear": [Function],
                                                            "getDate": [Function],
                                                            "getHour": [Function],
                                                            "getMinute": [Function],
                                                            "getMonth": [Function],
                                                            "getNow": [Function],
                                                            "getSecond": [Function],
                                                            "getWeekDay": [Function],
                                                            "getYear": [Function],
                                                            "isAfter": [Function],
                                                            "isValidate": [Function],
                                                            "locale": Object {
                                                              "format": [Function],
                                                              "getShortMonths": [Function],
                                                              "getShortWeekDays": [Function],
                                                              "getWeek": [Function],
                                                              "getWeekFirstDay": [Function],
                                                              "parse": [Function],
                                                            },
                                                            "setDate": [Function],
                                                            "setHour": [Function],
                                                            "setMinute": [Function],
                                                            "setMonth": [Function],
                                                            "setSecond": [Function],
                                                            "setYear": [Function],
                                                          }
                                                        }
                                                        id="create-claim_claim_date"
                                                        locale={
                                                          Object {
                                                            "backToToday": "Back to today",
                                                            "clear": "Clear",
                                                            "dateFormat": "M/D/YYYY",
                                                            "dateSelect": "select date",
                                                            "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                            "dayFormat": "D",
                                                            "decadeSelect": "Choose a decade",
                                                            "locale": "en_US",
                                                            "month": "Month",
                                                            "monthBeforeYear": true,
                                                            "monthPlaceholder": "Select month",
                                                            "monthSelect": "Choose a month",
                                                            "nextCentury": "Next century",
                                                            "nextDecade": "Next decade",
                                                            "nextMonth": "Next month (PageDown)",
                                                            "nextYear": "Next year (Control + right)",
                                                            "now": "Now",
                                                            "ok": "Ok",
                                                            "placeholder": "Select date",
                                                            "previousCentury": "Last century",
                                                            "previousDecade": "Last decade",
                                                            "previousMonth": "Previous month (PageUp)",
                                                            "previousYear": "Last year (Control + left)",
                                                            "quarterPlaceholder": "Select quarter",
                                                            "rangeMonthPlaceholder": Array [
                                                              "Start month",
                                                              "End month",
                                                            ],
                                                            "rangePlaceholder": Array [
                                                              "Start date",
                                                              "End date",
                                                            ],
                                                            "rangeWeekPlaceholder": Array [
                                                              "Start week",
                                                              "End week",
                                                            ],
                                                            "rangeYearPlaceholder": Array [
                                                              "Start year",
                                                              "End year",
                                                            ],
                                                            "timeSelect": "select time",
                                                            "today": "Today",
                                                            "weekPlaceholder": "Select week",
                                                            "weekSelect": "Choose a week",
                                                            "year": "Year",
                                                            "yearFormat": "YYYY",
                                                            "yearPlaceholder": "Select year",
                                                            "yearSelect": "Choose a year",
                                                          }
                                                        }
                                                        nextIcon={
                                                          <span
                                                            className="ant-picker-next-icon"
                                                          />
                                                        }
                                                        onChange={[Function]}
                                                        pickerRef={
                                                          Object {
                                                            "current": Object {
                                                              "blur": [Function],
                                                              "focus": [Function],
                                                            },
                                                          }
                                                        }
                                                        placeholder="Select date"
                                                        prefixCls="ant-picker"
                                                        prevIcon={
                                                          <span
                                                            className="ant-picker-prev-icon"
                                                          />
                                                        }
                                                        showToday={true}
                                                        suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                        superNextIcon={
                                                          <span
                                                            className="ant-picker-super-next-icon"
                                                          />
                                                        }
                                                        superPrevIcon={
                                                          <span
                                                            className="ant-picker-super-prev-icon"
                                                          />
                                                        }
                                                        tabIndex={-1}
                                                        transitionName="slide-up"
                                                        value={"2020-07-17T10:14:44.251Z"}
                                                      />
                                                    </div>
                                                  }
                                                  popupPlacement="bottomLeft"
                                                  prefixCls="ant-picker"
                                                  transitionName="slide-up"
                                                  visible={false}
                                                >
                                                  <Trigger
                                                    action={Array []}
                                                    afterPopupVisibleChange={[Function]}
                                                    autoDestroy={false}
                                                    blurDelay={0.15}
                                                    builtinPlacements={
                                                      Object {
                                                        "bottomLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 1,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tl",
                                                            "bl",
                                                          ],
                                                        },
                                                        "bottomRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 1,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tr",
                                                            "br",
                                                          ],
                                                        },
                                                        "topLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "bl",
                                                            "tl",
                                                          ],
                                                        },
                                                        "topRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "br",
                                                            "tr",
                                                          ],
                                                        },
                                                      }
                                                    }
                                                    defaultPopupVisible={false}
                                                    destroyPopupOnHide={false}
                                                    focusDelay={0}
                                                    getDocument={[Function]}
                                                    getPopupClassNameFromAlign={[Function]}
                                                    hideAction={Array []}
                                                    mask={false}
                                                    maskClosable={true}
                                                    mouseEnterDelay={0}
                                                    mouseLeaveDelay={0.1}
                                                    onPopupAlign={[Function]}
                                                    onPopupVisibleChange={[Function]}
                                                    popup={
                                                      <div
                                                        className="ant-picker-panel-container"
                                                        onMouseDown={[Function]}
                                                      >
                                                        <PickerPanel
                                                          allowClear={true}
                                                          className="ant-picker-panel-focused"
                                                          clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                          components={
                                                            Object {
                                                              "button": [Function],
                                                              "rangeItem": [Function],
                                                            }
                                                          }
                                                          generateConfig={
                                                            Object {
                                                              "addDate": [Function],
                                                              "addMonth": [Function],
                                                              "addYear": [Function],
                                                              "getDate": [Function],
                                                              "getHour": [Function],
                                                              "getMinute": [Function],
                                                              "getMonth": [Function],
                                                              "getNow": [Function],
                                                              "getSecond": [Function],
                                                              "getWeekDay": [Function],
                                                              "getYear": [Function],
                                                              "isAfter": [Function],
                                                              "isValidate": [Function],
                                                              "locale": Object {
                                                                "format": [Function],
                                                                "getShortMonths": [Function],
                                                                "getShortWeekDays": [Function],
                                                                "getWeek": [Function],
                                                                "getWeekFirstDay": [Function],
                                                                "parse": [Function],
                                                              },
                                                              "setDate": [Function],
                                                              "setHour": [Function],
                                                              "setMinute": [Function],
                                                              "setMonth": [Function],
                                                              "setSecond": [Function],
                                                              "setYear": [Function],
                                                            }
                                                          }
                                                          id="create-claim_claim_date"
                                                          locale={
                                                            Object {
                                                              "backToToday": "Back to today",
                                                              "clear": "Clear",
                                                              "dateFormat": "M/D/YYYY",
                                                              "dateSelect": "select date",
                                                              "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                              "dayFormat": "D",
                                                              "decadeSelect": "Choose a decade",
                                                              "locale": "en_US",
                                                              "month": "Month",
                                                              "monthBeforeYear": true,
                                                              "monthPlaceholder": "Select month",
                                                              "monthSelect": "Choose a month",
                                                              "nextCentury": "Next century",
                                                              "nextDecade": "Next decade",
                                                              "nextMonth": "Next month (PageDown)",
                                                              "nextYear": "Next year (Control + right)",
                                                              "now": "Now",
                                                              "ok": "Ok",
                                                              "placeholder": "Select date",
                                                              "previousCentury": "Last century",
                                                              "previousDecade": "Last decade",
                                                              "previousMonth": "Previous month (PageUp)",
                                                              "previousYear": "Last year (Control + left)",
                                                              "quarterPlaceholder": "Select quarter",
                                                              "rangeMonthPlaceholder": Array [
                                                                "Start month",
                                                                "End month",
                                                              ],
                                                              "rangePlaceholder": Array [
                                                                "Start date",
                                                                "End date",
                                                              ],
                                                              "rangeWeekPlaceholder": Array [
                                                                "Start week",
                                                                "End week",
                                                              ],
                                                              "rangeYearPlaceholder": Array [
                                                                "Start year",
                                                                "End year",
                                                              ],
                                                              "timeSelect": "select time",
                                                              "today": "Today",
                                                              "weekPlaceholder": "Select week",
                                                              "weekSelect": "Choose a week",
                                                              "year": "Year",
                                                              "yearFormat": "YYYY",
                                                              "yearPlaceholder": "Select year",
                                                              "yearSelect": "Choose a year",
                                                            }
                                                          }
                                                          nextIcon={
                                                            <span
                                                              className="ant-picker-next-icon"
                                                            />
                                                          }
                                                          onChange={[Function]}
                                                          pickerRef={
                                                            Object {
                                                              "current": Object {
                                                                "blur": [Function],
                                                                "focus": [Function],
                                                              },
                                                            }
                                                          }
                                                          placeholder="Select date"
                                                          prefixCls="ant-picker"
                                                          prevIcon={
                                                            <span
                                                              className="ant-picker-prev-icon"
                                                            />
                                                          }
                                                          showToday={true}
                                                          suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                          superNextIcon={
                                                            <span
                                                              className="ant-picker-super-next-icon"
                                                            />
                                                          }
                                                          superPrevIcon={
                                                            <span
                                                              className="ant-picker-super-prev-icon"
                                                            />
                                                          }
                                                          tabIndex={-1}
                                                          transitionName="slide-up"
                                                          value={"2020-07-17T10:14:44.251Z"}
                                                        />
                                                      </div>
                                                    }
                                                    popupAlign={Object {}}
                                                    popupClassName=""
                                                    popupPlacement="bottomLeft"
                                                    popupStyle={Object {}}
                                                    popupTransitionName="slide-up"
                                                    popupVisible={false}
                                                    prefixCls="ant-picker-dropdown"
                                                    showAction={Array []}
                                                  >
                                                    <div
                                                      className="ant-picker"
                                                      key="trigger"
                                                      onMouseUp={[Function]}
                                                    >
                                                      <div
                                                        className="ant-picker-input"
                                                      >
                                                        <input
                                                          autoComplete="off"
                                                          id="create-claim_claim_date"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          onMouseDown={[Function]}
                                                          placeholder="Select date"
                                                          readOnly={true}
                                                          size={12}
                                                          title=""
                                                          value=""
                                                        />
                                                        <span
                                                          className="ant-picker-suffix"
                                                        >
                                                          <ForwardRef(CalendarOutlined)>
                                                            <AntdIcon
                                                              icon={
                                                                Object {
                                                                  "icon": Object {
                                                                    "attrs": Object {
                                                                      "focusable": "false",
                                                                      "viewBox": "64 64 896 896",
                                                                    },
                                                                    "children": Array [
                                                                      Object {
                                                                        "attrs": Object {
                                                                          "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                        },
                                                                        "tag": "path",
                                                                      },
                                                                    ],
                                                                    "tag": "svg",
                                                                  },
                                                                  "name": "calendar",
                                                                  "theme": "outlined",
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                aria-label="calendar"
                                                                className="anticon anticon-calendar"
                                                                role="img"
                                                              >
                                                                <IconReact
                                                                  className=""
                                                                  icon={
                                                                    Object {
                                                                      "icon": Object {
                                                                        "attrs": Object {
                                                                          "focusable": "false",
                                                                          "viewBox": "64 64 896 896",
                                                                        },
                                                                        "children": Array [
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                        ],
                                                                        "tag": "svg",
                                                                      },
                                                                      "name": "calendar",
                                                                      "theme": "outlined",
                                                                    }
                                                                  }
                                                                >
                                                                  <svg
                                                                    aria-hidden="true"
                                                                    className=""
                                                                    data-icon="calendar"
                                                                    fill="currentColor"
                                                                    focusable="false"
                                                                    height="1em"
                                                                    key="svg-calendar"
                                                                    viewBox="64 64 896 896"
                                                                    width="1em"
                                                                  >
                                                                    <path
                                                                      d="M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z"
                                                                      key="svg-calendar-svg-0"
                                                                    />
                                                                  </svg>
                                                                </IconReact>
                                                              </span>
                                                            </AntdIcon>
                                                          </ForwardRef(CalendarOutlined)>
                                                        </span>
                                                        <span
                                                          className="ant-picker-clear"
                                                          onMouseDown={[Function]}
                                                          onMouseUp={[Function]}
                                                        >
                                                          <ForwardRef(CloseCircleFilled)>
                                                            <AntdIcon
                                                              icon={
                                                                Object {
                                                                  "icon": Object {
                                                                    "attrs": Object {
                                                                      "focusable": "false",
                                                                      "viewBox": "64 64 896 896",
                                                                    },
                                                                    "children": Array [
                                                                      Object {
                                                                        "attrs": Object {
                                                                          "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                        },
                                                                        "tag": "path",
                                                                      },
                                                                    ],
                                                                    "tag": "svg",
                                                                  },
                                                                  "name": "close-circle",
                                                                  "theme": "filled",
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                aria-label="close-circle"
                                                                className="anticon anticon-close-circle"
                                                                role="img"
                                                              >
                                                                <IconReact
                                                                  className=""
                                                                  icon={
                                                                    Object {
                                                                      "icon": Object {
                                                                        "attrs": Object {
                                                                          "focusable": "false",
                                                                          "viewBox": "64 64 896 896",
                                                                        },
                                                                        "children": Array [
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                        ],
                                                                        "tag": "svg",
                                                                      },
                                                                      "name": "close-circle",
                                                                      "theme": "filled",
                                                                    }
                                                                  }
                                                                >
                                                                  <svg
                                                                    aria-hidden="true"
                                                                    className=""
                                                                    data-icon="close-circle"
                                                                    fill="currentColor"
                                                                    focusable="false"
                                                                    height="1em"
                                                                    key="svg-close-circle"
                                                                    viewBox="64 64 896 896"
                                                                    width="1em"
                                                                  >
                                                                    <path
                                                                      d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                                                                      key="svg-close-circle-svg-0"
                                                                    />
                                                                  </svg>
                                                                </IconReact>
                                                              </span>
                                                            </AntdIcon>
                                                          </ForwardRef(CloseCircleFilled)>
                                                        </span>
                                                      </div>
                                                    </div>
                                                  </Trigger>
                                                </PickerTrigger>
                                              </InnerPicker>
                                            </Picker>
                                          </LocaleReceiver>
                                        </Picker>
                                      </Component>
                                    </div>
                                  </div>
                                  <ForwardRef
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <CSSMotion
                                      internalRef={null}
                                      motionAppear={true}
                                      motionDeadline={500}
                                      motionEnter={true}
                                      motionLeave={true}
                                      motionName="show-help"
                                      onLeaveEnd={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    />
                                  </ForwardRef>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                  <FormItem
                    label="Checked Date"
                    name="checked_date"
                  >
                    <WrapperField
                      label="Checked Date"
                      messageVariables={
                        Object {
                          "label": "Checked Date",
                        }
                      }
                      name="checked_date"
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        key="_checked_date"
                        label="Checked Date"
                        messageVariables={
                          Object {
                            "label": "Checked Date",
                          }
                        }
                        name={
                          Array [
                            "checked_date",
                          ]
                        }
                        onReset={[Function]}
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="create-claim_checked_date"
                              label="Checked Date"
                              name="checked_date"
                              prefixCls="ant-form"
                              required={false}
                            >
                              <Col
                                className="ant-form-item-label"
                                span={8}
                              >
                                <div
                                  className="ant-col ant-col-8 ant-form-item-label"
                                  style={Object {}}
                                >
                                  <label
                                    className=""
                                    htmlFor="create-claim_checked_date"
                                    title="Checked Date"
                                  >
                                    Checked Date
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Checked Date"
                              name={
                                Array [
                                  "checked_date",
                                ]
                              }
                              onDomErrorVisibleChange={[Function]}
                              prefixCls="ant-form"
                              touched={false}
                              validateStatus=""
                              validating={false}
                            >
                              <Col
                                className="ant-form-item-control"
                                span={16}
                              >
                                <div
                                  className="ant-col ant-col-16 ant-form-item-control"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={1}
                                        value={"2020-07-17T10:14:44.251Z"}
                                      >
                                        <Picker
                                          id="create-claim_checked_date"
                                          onChange={[Function]}
                                          value={"2020-07-17T10:14:44.251Z"}
                                        >
                                          <LocaleReceiver
                                            componentName="DatePicker"
                                            defaultLocale={[Function]}
                                          >
                                            <Picker
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              components={
                                                Object {
                                                  "button": [Function],
                                                  "rangeItem": [Function],
                                                }
                                              }
                                              generateConfig={
                                                Object {
                                                  "addDate": [Function],
                                                  "addMonth": [Function],
                                                  "addYear": [Function],
                                                  "getDate": [Function],
                                                  "getHour": [Function],
                                                  "getMinute": [Function],
                                                  "getMonth": [Function],
                                                  "getNow": [Function],
                                                  "getSecond": [Function],
                                                  "getWeekDay": [Function],
                                                  "getYear": [Function],
                                                  "isAfter": [Function],
                                                  "isValidate": [Function],
                                                  "locale": Object {
                                                    "format": [Function],
                                                    "getShortMonths": [Function],
                                                    "getShortWeekDays": [Function],
                                                    "getWeek": [Function],
                                                    "getWeekFirstDay": [Function],
                                                    "parse": [Function],
                                                  },
                                                  "setDate": [Function],
                                                  "setHour": [Function],
                                                  "setMinute": [Function],
                                                  "setMonth": [Function],
                                                  "setSecond": [Function],
                                                  "setYear": [Function],
                                                }
                                              }
                                              id="create-claim_checked_date"
                                              locale={
                                                Object {
                                                  "backToToday": "Back to today",
                                                  "clear": "Clear",
                                                  "dateFormat": "M/D/YYYY",
                                                  "dateSelect": "select date",
                                                  "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                  "dayFormat": "D",
                                                  "decadeSelect": "Choose a decade",
                                                  "locale": "en_US",
                                                  "month": "Month",
                                                  "monthBeforeYear": true,
                                                  "monthPlaceholder": "Select month",
                                                  "monthSelect": "Choose a month",
                                                  "nextCentury": "Next century",
                                                  "nextDecade": "Next decade",
                                                  "nextMonth": "Next month (PageDown)",
                                                  "nextYear": "Next year (Control + right)",
                                                  "now": "Now",
                                                  "ok": "Ok",
                                                  "placeholder": "Select date",
                                                  "previousCentury": "Last century",
                                                  "previousDecade": "Last decade",
                                                  "previousMonth": "Previous month (PageUp)",
                                                  "previousYear": "Last year (Control + left)",
                                                  "quarterPlaceholder": "Select quarter",
                                                  "rangeMonthPlaceholder": Array [
                                                    "Start month",
                                                    "End month",
                                                  ],
                                                  "rangePlaceholder": Array [
                                                    "Start date",
                                                    "End date",
                                                  ],
                                                  "rangeWeekPlaceholder": Array [
                                                    "Start week",
                                                    "End week",
                                                  ],
                                                  "rangeYearPlaceholder": Array [
                                                    "Start year",
                                                    "End year",
                                                  ],
                                                  "timeSelect": "select time",
                                                  "today": "Today",
                                                  "weekPlaceholder": "Select week",
                                                  "weekSelect": "Choose a week",
                                                  "year": "Year",
                                                  "yearFormat": "YYYY",
                                                  "yearPlaceholder": "Select year",
                                                  "yearSelect": "Choose a year",
                                                }
                                              }
                                              nextIcon={
                                                <span
                                                  className="ant-picker-next-icon"
                                                />
                                              }
                                              onChange={[Function]}
                                              placeholder="Select date"
                                              prefixCls="ant-picker"
                                              prevIcon={
                                                <span
                                                  className="ant-picker-prev-icon"
                                                />
                                              }
                                              showToday={true}
                                              suffixIcon={<ForwardRef(CalendarOutlined) />}
                                              superNextIcon={
                                                <span
                                                  className="ant-picker-super-next-icon"
                                                />
                                              }
                                              superPrevIcon={
                                                <span
                                                  className="ant-picker-super-prev-icon"
                                                />
                                              }
                                              transitionName="slide-up"
                                              value={"2020-07-17T10:14:44.251Z"}
                                            >
                                              <InnerPicker
                                                allowClear={true}
                                                className=""
                                                clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                components={
                                                  Object {
                                                    "button": [Function],
                                                    "rangeItem": [Function],
                                                  }
                                                }
                                                generateConfig={
                                                  Object {
                                                    "addDate": [Function],
                                                    "addMonth": [Function],
                                                    "addYear": [Function],
                                                    "getDate": [Function],
                                                    "getHour": [Function],
                                                    "getMinute": [Function],
                                                    "getMonth": [Function],
                                                    "getNow": [Function],
                                                    "getSecond": [Function],
                                                    "getWeekDay": [Function],
                                                    "getYear": [Function],
                                                    "isAfter": [Function],
                                                    "isValidate": [Function],
                                                    "locale": Object {
                                                      "format": [Function],
                                                      "getShortMonths": [Function],
                                                      "getShortWeekDays": [Function],
                                                      "getWeek": [Function],
                                                      "getWeekFirstDay": [Function],
                                                      "parse": [Function],
                                                    },
                                                    "setDate": [Function],
                                                    "setHour": [Function],
                                                    "setMinute": [Function],
                                                    "setMonth": [Function],
                                                    "setSecond": [Function],
                                                    "setYear": [Function],
                                                  }
                                                }
                                                id="create-claim_checked_date"
                                                locale={
                                                  Object {
                                                    "backToToday": "Back to today",
                                                    "clear": "Clear",
                                                    "dateFormat": "M/D/YYYY",
                                                    "dateSelect": "select date",
                                                    "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                    "dayFormat": "D",
                                                    "decadeSelect": "Choose a decade",
                                                    "locale": "en_US",
                                                    "month": "Month",
                                                    "monthBeforeYear": true,
                                                    "monthPlaceholder": "Select month",
                                                    "monthSelect": "Choose a month",
                                                    "nextCentury": "Next century",
                                                    "nextDecade": "Next decade",
                                                    "nextMonth": "Next month (PageDown)",
                                                    "nextYear": "Next year (Control + right)",
                                                    "now": "Now",
                                                    "ok": "Ok",
                                                    "placeholder": "Select date",
                                                    "previousCentury": "Last century",
                                                    "previousDecade": "Last decade",
                                                    "previousMonth": "Previous month (PageUp)",
                                                    "previousYear": "Last year (Control + left)",
                                                    "quarterPlaceholder": "Select quarter",
                                                    "rangeMonthPlaceholder": Array [
                                                      "Start month",
                                                      "End month",
                                                    ],
                                                    "rangePlaceholder": Array [
                                                      "Start date",
                                                      "End date",
                                                    ],
                                                    "rangeWeekPlaceholder": Array [
                                                      "Start week",
                                                      "End week",
                                                    ],
                                                    "rangeYearPlaceholder": Array [
                                                      "Start year",
                                                      "End year",
                                                    ],
                                                    "timeSelect": "select time",
                                                    "today": "Today",
                                                    "weekPlaceholder": "Select week",
                                                    "weekSelect": "Choose a week",
                                                    "year": "Year",
                                                    "yearFormat": "YYYY",
                                                    "yearPlaceholder": "Select year",
                                                    "yearSelect": "Choose a year",
                                                  }
                                                }
                                                nextIcon={
                                                  <span
                                                    className="ant-picker-next-icon"
                                                  />
                                                }
                                                onChange={[Function]}
                                                pickerRef={
                                                  Object {
                                                    "current": Object {
                                                      "blur": [Function],
                                                      "focus": [Function],
                                                    },
                                                  }
                                                }
                                                placeholder="Select date"
                                                prefixCls="ant-picker"
                                                prevIcon={
                                                  <span
                                                    className="ant-picker-prev-icon"
                                                  />
                                                }
                                                showToday={true}
                                                suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                superNextIcon={
                                                  <span
                                                    className="ant-picker-super-next-icon"
                                                  />
                                                }
                                                superPrevIcon={
                                                  <span
                                                    className="ant-picker-super-prev-icon"
                                                  />
                                                }
                                                transitionName="slide-up"
                                                value={"2020-07-17T10:14:44.251Z"}
                                              >
                                                <PickerTrigger
                                                  popupElement={
                                                    <div
                                                      className="ant-picker-panel-container"
                                                      onMouseDown={[Function]}
                                                    >
                                                      <PickerPanel
                                                        allowClear={true}
                                                        className="ant-picker-panel-focused"
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        components={
                                                          Object {
                                                            "button": [Function],
                                                            "rangeItem": [Function],
                                                          }
                                                        }
                                                        generateConfig={
                                                          Object {
                                                            "addDate": [Function],
                                                            "addMonth": [Function],
                                                            "addYear": [Function],
                                                            "getDate": [Function],
                                                            "getHour": [Function],
                                                            "getMinute": [Function],
                                                            "getMonth": [Function],
                                                            "getNow": [Function],
                                                            "getSecond": [Function],
                                                            "getWeekDay": [Function],
                                                            "getYear": [Function],
                                                            "isAfter": [Function],
                                                            "isValidate": [Function],
                                                            "locale": Object {
                                                              "format": [Function],
                                                              "getShortMonths": [Function],
                                                              "getShortWeekDays": [Function],
                                                              "getWeek": [Function],
                                                              "getWeekFirstDay": [Function],
                                                              "parse": [Function],
                                                            },
                                                            "setDate": [Function],
                                                            "setHour": [Function],
                                                            "setMinute": [Function],
                                                            "setMonth": [Function],
                                                            "setSecond": [Function],
                                                            "setYear": [Function],
                                                          }
                                                        }
                                                        id="create-claim_checked_date"
                                                        locale={
                                                          Object {
                                                            "backToToday": "Back to today",
                                                            "clear": "Clear",
                                                            "dateFormat": "M/D/YYYY",
                                                            "dateSelect": "select date",
                                                            "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                            "dayFormat": "D",
                                                            "decadeSelect": "Choose a decade",
                                                            "locale": "en_US",
                                                            "month": "Month",
                                                            "monthBeforeYear": true,
                                                            "monthPlaceholder": "Select month",
                                                            "monthSelect": "Choose a month",
                                                            "nextCentury": "Next century",
                                                            "nextDecade": "Next decade",
                                                            "nextMonth": "Next month (PageDown)",
                                                            "nextYear": "Next year (Control + right)",
                                                            "now": "Now",
                                                            "ok": "Ok",
                                                            "placeholder": "Select date",
                                                            "previousCentury": "Last century",
                                                            "previousDecade": "Last decade",
                                                            "previousMonth": "Previous month (PageUp)",
                                                            "previousYear": "Last year (Control + left)",
                                                            "quarterPlaceholder": "Select quarter",
                                                            "rangeMonthPlaceholder": Array [
                                                              "Start month",
                                                              "End month",
                                                            ],
                                                            "rangePlaceholder": Array [
                                                              "Start date",
                                                              "End date",
                                                            ],
                                                            "rangeWeekPlaceholder": Array [
                                                              "Start week",
                                                              "End week",
                                                            ],
                                                            "rangeYearPlaceholder": Array [
                                                              "Start year",
                                                              "End year",
                                                            ],
                                                            "timeSelect": "select time",
                                                            "today": "Today",
                                                            "weekPlaceholder": "Select week",
                                                            "weekSelect": "Choose a week",
                                                            "year": "Year",
                                                            "yearFormat": "YYYY",
                                                            "yearPlaceholder": "Select year",
                                                            "yearSelect": "Choose a year",
                                                          }
                                                        }
                                                        nextIcon={
                                                          <span
                                                            className="ant-picker-next-icon"
                                                          />
                                                        }
                                                        onChange={[Function]}
                                                        pickerRef={
                                                          Object {
                                                            "current": Object {
                                                              "blur": [Function],
                                                              "focus": [Function],
                                                            },
                                                          }
                                                        }
                                                        placeholder="Select date"
                                                        prefixCls="ant-picker"
                                                        prevIcon={
                                                          <span
                                                            className="ant-picker-prev-icon"
                                                          />
                                                        }
                                                        showToday={true}
                                                        suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                        superNextIcon={
                                                          <span
                                                            className="ant-picker-super-next-icon"
                                                          />
                                                        }
                                                        superPrevIcon={
                                                          <span
                                                            className="ant-picker-super-prev-icon"
                                                          />
                                                        }
                                                        tabIndex={-1}
                                                        transitionName="slide-up"
                                                        value={"2020-07-17T10:14:44.251Z"}
                                                      />
                                                    </div>
                                                  }
                                                  popupPlacement="bottomLeft"
                                                  prefixCls="ant-picker"
                                                  transitionName="slide-up"
                                                  visible={false}
                                                >
                                                  <Trigger
                                                    action={Array []}
                                                    afterPopupVisibleChange={[Function]}
                                                    autoDestroy={false}
                                                    blurDelay={0.15}
                                                    builtinPlacements={
                                                      Object {
                                                        "bottomLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 1,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tl",
                                                            "bl",
                                                          ],
                                                        },
                                                        "bottomRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 1,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tr",
                                                            "br",
                                                          ],
                                                        },
                                                        "topLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "bl",
                                                            "tl",
                                                          ],
                                                        },
                                                        "topRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "br",
                                                            "tr",
                                                          ],
                                                        },
                                                      }
                                                    }
                                                    defaultPopupVisible={false}
                                                    destroyPopupOnHide={false}
                                                    focusDelay={0}
                                                    getDocument={[Function]}
                                                    getPopupClassNameFromAlign={[Function]}
                                                    hideAction={Array []}
                                                    mask={false}
                                                    maskClosable={true}
                                                    mouseEnterDelay={0}
                                                    mouseLeaveDelay={0.1}
                                                    onPopupAlign={[Function]}
                                                    onPopupVisibleChange={[Function]}
                                                    popup={
                                                      <div
                                                        className="ant-picker-panel-container"
                                                        onMouseDown={[Function]}
                                                      >
                                                        <PickerPanel
                                                          allowClear={true}
                                                          className="ant-picker-panel-focused"
                                                          clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                          components={
                                                            Object {
                                                              "button": [Function],
                                                              "rangeItem": [Function],
                                                            }
                                                          }
                                                          generateConfig={
                                                            Object {
                                                              "addDate": [Function],
                                                              "addMonth": [Function],
                                                              "addYear": [Function],
                                                              "getDate": [Function],
                                                              "getHour": [Function],
                                                              "getMinute": [Function],
                                                              "getMonth": [Function],
                                                              "getNow": [Function],
                                                              "getSecond": [Function],
                                                              "getWeekDay": [Function],
                                                              "getYear": [Function],
                                                              "isAfter": [Function],
                                                              "isValidate": [Function],
                                                              "locale": Object {
                                                                "format": [Function],
                                                                "getShortMonths": [Function],
                                                                "getShortWeekDays": [Function],
                                                                "getWeek": [Function],
                                                                "getWeekFirstDay": [Function],
                                                                "parse": [Function],
                                                              },
                                                              "setDate": [Function],
                                                              "setHour": [Function],
                                                              "setMinute": [Function],
                                                              "setMonth": [Function],
                                                              "setSecond": [Function],
                                                              "setYear": [Function],
                                                            }
                                                          }
                                                          id="create-claim_checked_date"
                                                          locale={
                                                            Object {
                                                              "backToToday": "Back to today",
                                                              "clear": "Clear",
                                                              "dateFormat": "M/D/YYYY",
                                                              "dateSelect": "select date",
                                                              "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                              "dayFormat": "D",
                                                              "decadeSelect": "Choose a decade",
                                                              "locale": "en_US",
                                                              "month": "Month",
                                                              "monthBeforeYear": true,
                                                              "monthPlaceholder": "Select month",
                                                              "monthSelect": "Choose a month",
                                                              "nextCentury": "Next century",
                                                              "nextDecade": "Next decade",
                                                              "nextMonth": "Next month (PageDown)",
                                                              "nextYear": "Next year (Control + right)",
                                                              "now": "Now",
                                                              "ok": "Ok",
                                                              "placeholder": "Select date",
                                                              "previousCentury": "Last century",
                                                              "previousDecade": "Last decade",
                                                              "previousMonth": "Previous month (PageUp)",
                                                              "previousYear": "Last year (Control + left)",
                                                              "quarterPlaceholder": "Select quarter",
                                                              "rangeMonthPlaceholder": Array [
                                                                "Start month",
                                                                "End month",
                                                              ],
                                                              "rangePlaceholder": Array [
                                                                "Start date",
                                                                "End date",
                                                              ],
                                                              "rangeWeekPlaceholder": Array [
                                                                "Start week",
                                                                "End week",
                                                              ],
                                                              "rangeYearPlaceholder": Array [
                                                                "Start year",
                                                                "End year",
                                                              ],
                                                              "timeSelect": "select time",
                                                              "today": "Today",
                                                              "weekPlaceholder": "Select week",
                                                              "weekSelect": "Choose a week",
                                                              "year": "Year",
                                                              "yearFormat": "YYYY",
                                                              "yearPlaceholder": "Select year",
                                                              "yearSelect": "Choose a year",
                                                            }
                                                          }
                                                          nextIcon={
                                                            <span
                                                              className="ant-picker-next-icon"
                                                            />
                                                          }
                                                          onChange={[Function]}
                                                          pickerRef={
                                                            Object {
                                                              "current": Object {
                                                                "blur": [Function],
                                                                "focus": [Function],
                                                              },
                                                            }
                                                          }
                                                          placeholder="Select date"
                                                          prefixCls="ant-picker"
                                                          prevIcon={
                                                            <span
                                                              className="ant-picker-prev-icon"
                                                            />
                                                          }
                                                          showToday={true}
                                                          suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                          superNextIcon={
                                                            <span
                                                              className="ant-picker-super-next-icon"
                                                            />
                                                          }
                                                          superPrevIcon={
                                                            <span
                                                              className="ant-picker-super-prev-icon"
                                                            />
                                                          }
                                                          tabIndex={-1}
                                                          transitionName="slide-up"
                                                          value={"2020-07-17T10:14:44.251Z"}
                                                        />
                                                      </div>
                                                    }
                                                    popupAlign={Object {}}
                                                    popupClassName=""
                                                    popupPlacement="bottomLeft"
                                                    popupStyle={Object {}}
                                                    popupTransitionName="slide-up"
                                                    popupVisible={false}
                                                    prefixCls="ant-picker-dropdown"
                                                    showAction={Array []}
                                                  >
                                                    <div
                                                      className="ant-picker"
                                                      key="trigger"
                                                      onMouseUp={[Function]}
                                                    >
                                                      <div
                                                        className="ant-picker-input"
                                                      >
                                                        <input
                                                          autoComplete="off"
                                                          id="create-claim_checked_date"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          onMouseDown={[Function]}
                                                          placeholder="Select date"
                                                          readOnly={true}
                                                          size={12}
                                                          title=""
                                                          value=""
                                                        />
                                                        <span
                                                          className="ant-picker-suffix"
                                                        >
                                                          <ForwardRef(CalendarOutlined)>
                                                            <AntdIcon
                                                              icon={
                                                                Object {
                                                                  "icon": Object {
                                                                    "attrs": Object {
                                                                      "focusable": "false",
                                                                      "viewBox": "64 64 896 896",
                                                                    },
                                                                    "children": Array [
                                                                      Object {
                                                                        "attrs": Object {
                                                                          "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                        },
                                                                        "tag": "path",
                                                                      },
                                                                    ],
                                                                    "tag": "svg",
                                                                  },
                                                                  "name": "calendar",
                                                                  "theme": "outlined",
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                aria-label="calendar"
                                                                className="anticon anticon-calendar"
                                                                role="img"
                                                              >
                                                                <IconReact
                                                                  className=""
                                                                  icon={
                                                                    Object {
                                                                      "icon": Object {
                                                                        "attrs": Object {
                                                                          "focusable": "false",
                                                                          "viewBox": "64 64 896 896",
                                                                        },
                                                                        "children": Array [
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                        ],
                                                                        "tag": "svg",
                                                                      },
                                                                      "name": "calendar",
                                                                      "theme": "outlined",
                                                                    }
                                                                  }
                                                                >
                                                                  <svg
                                                                    aria-hidden="true"
                                                                    className=""
                                                                    data-icon="calendar"
                                                                    fill="currentColor"
                                                                    focusable="false"
                                                                    height="1em"
                                                                    key="svg-calendar"
                                                                    viewBox="64 64 896 896"
                                                                    width="1em"
                                                                  >
                                                                    <path
                                                                      d="M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z"
                                                                      key="svg-calendar-svg-0"
                                                                    />
                                                                  </svg>
                                                                </IconReact>
                                                              </span>
                                                            </AntdIcon>
                                                          </ForwardRef(CalendarOutlined)>
                                                        </span>
                                                        <span
                                                          className="ant-picker-clear"
                                                          onMouseDown={[Function]}
                                                          onMouseUp={[Function]}
                                                        >
                                                          <ForwardRef(CloseCircleFilled)>
                                                            <AntdIcon
                                                              icon={
                                                                Object {
                                                                  "icon": Object {
                                                                    "attrs": Object {
                                                                      "focusable": "false",
                                                                      "viewBox": "64 64 896 896",
                                                                    },
                                                                    "children": Array [
                                                                      Object {
                                                                        "attrs": Object {
                                                                          "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                        },
                                                                        "tag": "path",
                                                                      },
                                                                    ],
                                                                    "tag": "svg",
                                                                  },
                                                                  "name": "close-circle",
                                                                  "theme": "filled",
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                aria-label="close-circle"
                                                                className="anticon anticon-close-circle"
                                                                role="img"
                                                              >
                                                                <IconReact
                                                                  className=""
                                                                  icon={
                                                                    Object {
                                                                      "icon": Object {
                                                                        "attrs": Object {
                                                                          "focusable": "false",
                                                                          "viewBox": "64 64 896 896",
                                                                        },
                                                                        "children": Array [
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                        ],
                                                                        "tag": "svg",
                                                                      },
                                                                      "name": "close-circle",
                                                                      "theme": "filled",
                                                                    }
                                                                  }
                                                                >
                                                                  <svg
                                                                    aria-hidden="true"
                                                                    className=""
                                                                    data-icon="close-circle"
                                                                    fill="currentColor"
                                                                    focusable="false"
                                                                    height="1em"
                                                                    key="svg-close-circle"
                                                                    viewBox="64 64 896 896"
                                                                    width="1em"
                                                                  >
                                                                    <path
                                                                      d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                                                                      key="svg-close-circle-svg-0"
                                                                    />
                                                                  </svg>
                                                                </IconReact>
                                                              </span>
                                                            </AntdIcon>
                                                          </ForwardRef(CloseCircleFilled)>
                                                        </span>
                                                      </div>
                                                    </div>
                                                  </Trigger>
                                                </PickerTrigger>
                                              </InnerPicker>
                                            </Picker>
                                          </LocaleReceiver>
                                        </Picker>
                                      </Component>
                                    </div>
                                  </div>
                                  <ForwardRef
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <CSSMotion
                                      internalRef={null}
                                      motionAppear={true}
                                      motionDeadline={500}
                                      motionEnter={true}
                                      motionLeave={true}
                                      motionName="show-help"
                                      onLeaveEnd={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    />
                                  </ForwardRef>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                  <FormItem
                    label="Claim Sources"
                    name="claim_sources"
                  >
                    <WrapperField
                      label="Claim Sources"
                      messageVariables={
                        Object {
                          "label": "Claim Sources",
                        }
                      }
                      name="claim_sources"
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        key="_claim_sources"
                        label="Claim Sources"
                        messageVariables={
                          Object {
                            "label": "Claim Sources",
                          }
                        }
                        name={
                          Array [
                            "claim_sources",
                          ]
                        }
                        onReset={[Function]}
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="create-claim_claim_sources"
                              label="Claim Sources"
                              name="claim_sources"
                              prefixCls="ant-form"
                              required={false}
                            >
                              <Col
                                className="ant-form-item-label"
                                span={8}
                              >
                                <div
                                  className="ant-col ant-col-8 ant-form-item-label"
                                  style={Object {}}
                                >
                                  <label
                                    className=""
                                    htmlFor="create-claim_claim_sources"
                                    title="Claim Sources"
                                  >
                                    Claim Sources
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Claim Sources"
                              name={
                                Array [
                                  "claim_sources",
                                ]
                              }
                              onDomErrorVisibleChange={[Function]}
                              prefixCls="ant-form"
                              touched={false}
                              validateStatus=""
                              validating={false}
                            >
                              <Col
                                className="ant-form-item-control"
                                span={16}
                              >
                                <div
                                  className="ant-col ant-col-16 ant-form-item-control"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={1}
                                      >
                                        <TextArea
                                          id="create-claim_claim_sources"
                                          onChange={[Function]}
                                        >
                                          <ClearableLabeledInput
                                            bordered={true}
                                            element={
                                              <TextArea
                                                className=""
                                                id="create-claim_claim_sources"
                                                onChange={[Function]}
                                                prefixCls="ant-input"
                                              />
                                            }
                                            handleReset={[Function]}
                                            id="create-claim_claim_sources"
                                            inputType="text"
                                            onChange={[Function]}
                                            prefixCls="ant-input"
                                            triggerFocus={[Function]}
                                            value=""
                                          >
                                            <TextArea
                                              className=""
                                              id="create-claim_claim_sources"
                                              onChange={[Function]}
                                              prefixCls="ant-input"
                                              value=""
                                            >
                                              <ResizableTextArea
                                                className=""
                                                id="create-claim_claim_sources"
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                prefixCls="ant-input"
                                                value=""
                                              >
                                                <ResizeObserver
                                                  disabled={true}
                                                  onResize={[Function]}
                                                >
                                                  <textarea
                                                    className="ant-input"
                                                    id="create-claim_claim_sources"
                                                    onChange={[Function]}
                                                    onKeyDown={[Function]}
                                                    style={Object {}}
                                                    value=""
                                                  />
                                                </ResizeObserver>
                                              </ResizableTextArea>
                                            </TextArea>
                                          </ClearableLabeledInput>
                                        </TextArea>
                                      </Component>
                                    </div>
                                  </div>
                                  <ForwardRef
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <CSSMotion
                                      internalRef={null}
                                      motionAppear={true}
                                      motionDeadline={500}
                                      motionEnter={true}
                                      motionLeave={true}
                                      motionName="show-help"
                                      onLeaveEnd={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    />
                                  </ForwardRef>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                  <FormItem
                    label="Review"
                    name="review"
                  >
                    <WrapperField
                      label="Review"
                      messageVariables={
                        Object {
                          "label": "Review",
                        }
                      }
                      name="review"
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        key="_review"
                        label="Review"
                        messageVariables={
                          Object {
                            "label": "Review",
                          }
                        }
                        name={
                          Array [
                            "review",
                          ]
                        }
                        onReset={[Function]}
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="create-claim_review"
                              label="Review"
                              name="review"
                              prefixCls="ant-form"
                              required={false}
                            >
                              <Col
                                className="ant-form-item-label"
                                span={8}
                              >
                                <div
                                  className="ant-col ant-col-8 ant-form-item-label"
                                  style={Object {}}
                                >
                                  <label
                                    className=""
                                    htmlFor="create-claim_review"
                                    title="Review"
                                  >
                                    Review
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Review"
                              name={
                                Array [
                                  "review",
                                ]
                              }
                              onDomErrorVisibleChange={[Function]}
                              prefixCls="ant-form"
                              touched={false}
                              validateStatus=""
                              validating={false}
                            >
                              <Col
                                className="ant-form-item-control"
                                span={16}
                              >
                                <div
                                  className="ant-col ant-col-16 ant-form-item-control"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={1}
                                      >
                                        <TextArea
                                          id="create-claim_review"
                                          onChange={[Function]}
                                        >
                                          <ClearableLabeledInput
                                            bordered={true}
                                            element={
                                              <TextArea
                                                className=""
                                                id="create-claim_review"
                                                onChange={[Function]}
                                                prefixCls="ant-input"
                                              />
                                            }
                                            handleReset={[Function]}
                                            id="create-claim_review"
                                            inputType="text"
                                            onChange={[Function]}
                                            prefixCls="ant-input"
                                            triggerFocus={[Function]}
                                            value=""
                                          >
                                            <TextArea
                                              className=""
                                              id="create-claim_review"
                                              onChange={[Function]}
                                              prefixCls="ant-input"
                                              value=""
                                            >
                                              <ResizableTextArea
                                                className=""
                                                id="create-claim_review"
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                prefixCls="ant-input"
                                                value=""
                                              >
                                                <ResizeObserver
                                                  disabled={true}
                                                  onResize={[Function]}
                                                >
                                                  <textarea
                                                    className="ant-input"
                                                    id="create-claim_review"
                                                    onChange={[Function]}
                                                    onKeyDown={[Function]}
                                                    style={Object {}}
                                                    value=""
                                                  />
                                                </ResizeObserver>
                                              </ResizableTextArea>
                                            </TextArea>
                                          </ClearableLabeledInput>
                                        </TextArea>
                                      </Component>
                                    </div>
                                  </div>
                                  <ForwardRef
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <CSSMotion
                                      internalRef={null}
                                      motionAppear={true}
                                      motionDeadline={500}
                                      motionEnter={true}
                                      motionLeave={true}
                                      motionName="show-help"
                                      onLeaveEnd={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    />
                                  </ForwardRef>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                  <FormItem
                    label="Review Tagline"
                    name="review_tag_line"
                  >
                    <WrapperField
                      label="Review Tagline"
                      messageVariables={
                        Object {
                          "label": "Review Tagline",
                        }
                      }
                      name="review_tag_line"
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        key="_review_tag_line"
                        label="Review Tagline"
                        messageVariables={
                          Object {
                            "label": "Review Tagline",
                          }
                        }
                        name={
                          Array [
                            "review_tag_line",
                          ]
                        }
                        onReset={[Function]}
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="create-claim_review_tag_line"
                              label="Review Tagline"
                              name="review_tag_line"
                              prefixCls="ant-form"
                              required={false}
                            >
                              <Col
                                className="ant-form-item-label"
                                span={8}
                              >
                                <div
                                  className="ant-col ant-col-8 ant-form-item-label"
                                  style={Object {}}
                                >
                                  <label
                                    className=""
                                    htmlFor="create-claim_review_tag_line"
                                    title="Review Tagline"
                                  >
                                    Review Tagline
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Review Tagline"
                              name={
                                Array [
                                  "review_tag_line",
                                ]
                              }
                              onDomErrorVisibleChange={[Function]}
                              prefixCls="ant-form"
                              touched={false}
                              validateStatus=""
                              validating={false}
                            >
                              <Col
                                className="ant-form-item-control"
                                span={16}
                              >
                                <div
                                  className="ant-col ant-col-16 ant-form-item-control"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={1}
                                      >
                                        <TextArea
                                          id="create-claim_review_tag_line"
                                          onChange={[Function]}
                                        >
                                          <ClearableLabeledInput
                                            bordered={true}
                                            element={
                                              <TextArea
                                                className=""
                                                id="create-claim_review_tag_line"
                                                onChange={[Function]}
                                                prefixCls="ant-input"
                                              />
                                            }
                                            handleReset={[Function]}
                                            id="create-claim_review_tag_line"
                                            inputType="text"
                                            onChange={[Function]}
                                            prefixCls="ant-input"
                                            triggerFocus={[Function]}
                                            value=""
                                          >
                                            <TextArea
                                              className=""
                                              id="create-claim_review_tag_line"
                                              onChange={[Function]}
                                              prefixCls="ant-input"
                                              value=""
                                            >
                                              <ResizableTextArea
                                                className=""
                                                id="create-claim_review_tag_line"
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                prefixCls="ant-input"
                                                value=""
                                              >
                                                <ResizeObserver
                                                  disabled={true}
                                                  onResize={[Function]}
                                                >
                                                  <textarea
                                                    className="ant-input"
                                                    id="create-claim_review_tag_line"
                                                    onChange={[Function]}
                                                    onKeyDown={[Function]}
                                                    style={Object {}}
                                                    value=""
                                                  />
                                                </ResizeObserver>
                                              </ResizableTextArea>
                                            </TextArea>
                                          </ClearableLabeledInput>
                                        </TextArea>
                                      </Component>
                                    </div>
                                  </div>
                                  <ForwardRef
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <CSSMotion
                                      internalRef={null}
                                      motionAppear={true}
                                      motionDeadline={500}
                                      motionEnter={true}
                                      motionLeave={true}
                                      motionName="show-help"
                                      onLeaveEnd={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    />
                                  </ForwardRef>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                  <FormItem
                    label="Review Sources"
                    name="review_sources"
                  >
                    <WrapperField
                      label="Review Sources"
                      messageVariables={
                        Object {
                          "label": "Review Sources",
                        }
                      }
                      name="review_sources"
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        key="_review_sources"
                        label="Review Sources"
                        messageVariables={
                          Object {
                            "label": "Review Sources",
                          }
                        }
                        name={
                          Array [
                            "review_sources",
                          ]
                        }
                        onReset={[Function]}
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            style={Object {}}
                          >
                            <FormItemLabel
                              htmlFor="create-claim_review_sources"
                              label="Review Sources"
                              name="review_sources"
                              prefixCls="ant-form"
                              required={false}
                            >
                              <Col
                                className="ant-form-item-label"
                                span={8}
                              >
                                <div
                                  className="ant-col ant-col-8 ant-form-item-label"
                                  style={Object {}}
                                >
                                  <label
                                    className=""
                                    htmlFor="create-claim_review_sources"
                                    title="Review Sources"
                                  >
                                    Review Sources
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              label="Review Sources"
                              name={
                                Array [
                                  "review_sources",
                                ]
                              }
                              onDomErrorVisibleChange={[Function]}
                              prefixCls="ant-form"
                              touched={false}
                              validateStatus=""
                              validating={false}
                            >
                              <Col
                                className="ant-form-item-control"
                                span={16}
                              >
                                <div
                                  className="ant-col ant-col-16 ant-form-item-control"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={1}
                                      >
                                        <TextArea
                                          id="create-claim_review_sources"
                                          onChange={[Function]}
                                        >
                                          <ClearableLabeledInput
                                            bordered={true}
                                            element={
                                              <TextArea
                                                className=""
                                                id="create-claim_review_sources"
                                                onChange={[Function]}
                                                prefixCls="ant-input"
                                              />
                                            }
                                            handleReset={[Function]}
                                            id="create-claim_review_sources"
                                            inputType="text"
                                            onChange={[Function]}
                                            prefixCls="ant-input"
                                            triggerFocus={[Function]}
                                            value=""
                                          >
                                            <TextArea
                                              className=""
                                              id="create-claim_review_sources"
                                              onChange={[Function]}
                                              prefixCls="ant-input"
                                              value=""
                                            >
                                              <ResizableTextArea
                                                className=""
                                                id="create-claim_review_sources"
                                                onChange={[Function]}
                                                onKeyDown={[Function]}
                                                prefixCls="ant-input"
                                                value=""
                                              >
                                                <ResizeObserver
                                                  disabled={true}
                                                  onResize={[Function]}
                                                >
                                                  <textarea
                                                    className="ant-input"
                                                    id="create-claim_review_sources"
                                                    onChange={[Function]}
                                                    onKeyDown={[Function]}
                                                    style={Object {}}
                                                    value=""
                                                  />
                                                </ResizeObserver>
                                              </ResizableTextArea>
                                            </TextArea>
                                          </ClearableLabeledInput>
                                        </TextArea>
                                      </Component>
                                    </div>
                                  </div>
                                  <ForwardRef
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <CSSMotion
                                      internalRef={null}
                                      motionAppear={true}
                                      motionDeadline={500}
                                      motionEnter={true}
                                      motionLeave={true}
                                      motionName="show-help"
                                      onLeaveEnd={[Function]}
                                      removeOnLeave={true}
                                      visible={false}
                                    />
                                  </ForwardRef>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                  <FormItem>
                    <Row
                      className="ant-form-item"
                      key="row"
                    >
                      <div
                        className="ant-row ant-form-item"
                        style={Object {}}
                      >
                        <FormItemLabel
                          prefixCls="ant-form"
                        />
                        <FormItemInput
                          errors={Array []}
                          onDomErrorVisibleChange={[Function]}
                          prefixCls="ant-form"
                          validateStatus=""
                        >
                          <Col
                            className="ant-form-item-control"
                            span={16}
                          >
                            <div
                              className="ant-col ant-col-16 ant-form-item-control"
                              style={Object {}}
                            >
                              <div
                                className="ant-form-item-control-input"
                              >
                                <div
                                  className="ant-form-item-control-input-content"
                                >
                                  <Button
                                    block={false}
                                    ghost={false}
                                    htmlType="submit"
                                    loading={false}
                                    type="primary"
                                  >
                                    <Wave>
                                      <button
                                        className="ant-btn ant-btn-primary"
                                        onClick={[Function]}
                                        type="submit"
                                      >
                                        <LoadingIcon
                                          existIcon={false}
                                          loading={false}
                                          prefixCls="ant-btn"
                                        >
                                          <ForwardRef
                                            motionName="ant-btn-loading-icon-motion"
                                            onAppearActive={[Function]}
                                            onAppearStart={[Function]}
                                            onEnterActive={[Function]}
                                            onEnterStart={[Function]}
                                            onLeaveActive={[Function]}
                                            onLeaveStart={[Function]}
                                            removeOnLeave={true}
                                            visible={false}
                                          >
                                            <CSSMotion
                                              internalRef={null}
                                              motionAppear={true}
                                              motionEnter={true}
                                              motionLeave={true}
                                              motionName="ant-btn-loading-icon-motion"
                                              onAppearActive={[Function]}
                                              onAppearStart={[Function]}
                                              onEnterActive={[Function]}
                                              onEnterStart={[Function]}
                                              onLeaveActive={[Function]}
                                              onLeaveStart={[Function]}
                                              removeOnLeave={true}
                                              visible={false}
                                            />
                                          </ForwardRef>
                                        </LoadingIcon>
                                        <span
                                          key=".0"
                                        >
                                          Submit
                                        </span>
                                      </button>
                                    </Wave>
                                  </Button>
                                </div>
                              </div>
                              <ForwardRef
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <CSSMotion
                                  internalRef={null}
                                  motionAppear={true}
                                  motionDeadline={500}
                                  motionEnter={true}
                                  motionLeave={true}
                                  motionName="show-help"
                                  onLeaveEnd={[Function]}
                                  removeOnLeave={true}
                                  visible={false}
                                />
                              </ForwardRef>
                            </div>
                          </Col>
                        </FormItemInput>
                      </div>
                    </Row>
                  </FormItem>
                </div>
                <FormItem>
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        prefixCls="ant-form"
                      />
                      <FormItemInput
                        errors={Array []}
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        validateStatus=""
                      >
                        <Col
                          className="ant-form-item-control"
                          span={16}
                        >
                          <div
                            className="ant-col ant-col-16 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <Button
                                  block={false}
                                  disabled={true}
                                  ghost={false}
                                  htmlType="button"
                                  loading={false}
                                  onClick={[Function]}
                                >
                                  <Wave>
                                    <button
                                      className="ant-btn"
                                      disabled={true}
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <LoadingIcon
                                        existIcon={false}
                                        loading={false}
                                        prefixCls="ant-btn"
                                      >
                                        <ForwardRef
                                          motionName="ant-btn-loading-icon-motion"
                                          onAppearActive={[Function]}
                                          onAppearStart={[Function]}
                                          onEnterActive={[Function]}
                                          onEnterStart={[Function]}
                                          onLeaveActive={[Function]}
                                          onLeaveStart={[Function]}
                                          removeOnLeave={true}
                                          visible={false}
                                        >
                                          <CSSMotion
                                            internalRef={null}
                                            motionAppear={true}
                                            motionEnter={true}
                                            motionLeave={true}
                                            motionName="ant-btn-loading-icon-motion"
                                            onAppearActive={[Function]}
                                            onAppearStart={[Function]}
                                            onEnterActive={[Function]}
                                            onEnterStart={[Function]}
                                            onLeaveActive={[Function]}
                                            onLeaveStart={[Function]}
                                            removeOnLeave={true}
                                            visible={false}
                                          />
                                        </ForwardRef>
                                      </LoadingIcon>
                                      <span
                                        key=".0"
                                      >
                                        Back
                                      </span>
                                    </button>
                                  </Wave>
                                </Button>
                                <Button
                                  block={false}
                                  disabled={false}
                                  ghost={false}
                                  htmlType="button"
                                  loading={false}
                                  onClick={[Function]}
                                >
                                  <Wave>
                                    <button
                                      className="ant-btn"
                                      disabled={false}
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <LoadingIcon
                                        existIcon={false}
                                        loading={false}
                                        prefixCls="ant-btn"
                                      >
                                        <ForwardRef
                                          motionName="ant-btn-loading-icon-motion"
                                          onAppearActive={[Function]}
                                          onAppearStart={[Function]}
                                          onEnterActive={[Function]}
                                          onEnterStart={[Function]}
                                          onLeaveActive={[Function]}
                                          onLeaveStart={[Function]}
                                          removeOnLeave={true}
                                          visible={false}
                                        >
                                          <CSSMotion
                                            internalRef={null}
                                            motionAppear={true}
                                            motionEnter={true}
                                            motionLeave={true}
                                            motionName="ant-btn-loading-icon-motion"
                                            onAppearActive={[Function]}
                                            onAppearStart={[Function]}
                                            onEnterActive={[Function]}
                                            onEnterStart={[Function]}
                                            onLeaveActive={[Function]}
                                            onLeaveStart={[Function]}
                                            removeOnLeave={true}
                                            visible={false}
                                          />
                                        </ForwardRef>
                                      </LoadingIcon>
                                      <span
                                        key=".0"
                                      >
                                        Next
                                      </span>
                                    </button>
                                  </Wave>
                                </Button>
                              </div>
                            </div>
                            <ForwardRef
                              motionAppear={true}
                              motionDeadline={500}
                              motionName="show-help"
                              onLeaveEnd={[Function]}
                              removeOnLeave={true}
                              visible={false}
                            >
                              <CSSMotion
                                internalRef={null}
                                motionAppear={true}
                                motionDeadline={500}
                                motionEnter={true}
                                motionLeave={true}
                                motionName="show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              />
                            </ForwardRef>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </FormItem>
              </form>
            </ForwardRef(Form)>
          </SizeContextProvider>
        </ForwardRef(InternalForm)>
      </div>
    </ClaimForm>
  </EditClaim>
</Provider>
`;
